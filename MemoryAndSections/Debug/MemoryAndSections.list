
MemoryAndSections.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00007100  2**2
                  ALLOC
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00002000  2**2
                  ALLOC
  3 .myBackUpRAM  00000001  20001000  20001000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00003d1c  08001010  08001010  00002010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .mysection    0000000a  08018000  08018000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .rodata       000000a8  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08004dd4  08004dd4  00008001  2**0
                  CONTENTS
  8 .ARM          00000008  08004dd4  08004dd4  00005dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08004ddc  08004ddc  00008001  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  08004ddc  08004ddc  00005ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000004  08004de0  08004de0  00005de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         00000068  20000180  08004de4  00006180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000001f8  200001e8  08004e4c  000061e8  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  200003e0  08004e4c  000063e0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00008001  2**0
                  CONTENTS, READONLY
 16 .debug_info   0000b481  00000000  00000000  00008031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001bcc  00000000  00000000  000134b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000a08  00000000  00000000  00015080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000079d  00000000  00000000  00015a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000227ed  00000000  00000000  00016225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0000bdc2  00000000  00000000  00038a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000cf282  00000000  00000000  000447d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  00113a56  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002f48  00000000  00000000  00113a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000a0  00000000  00000000  001169e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08001010 <__do_global_dtors_aux>:
 8001010:	b510      	push	{r4, lr}
 8001012:	4c05      	ldr	r4, [pc, #20]	@ (8001028 <__do_global_dtors_aux+0x18>)
 8001014:	7823      	ldrb	r3, [r4, #0]
 8001016:	b933      	cbnz	r3, 8001026 <__do_global_dtors_aux+0x16>
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__do_global_dtors_aux+0x1c>)
 800101a:	b113      	cbz	r3, 8001022 <__do_global_dtors_aux+0x12>
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <__do_global_dtors_aux+0x20>)
 800101e:	f3af 8000 	nop.w
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	200001e8 	.word	0x200001e8
 800102c:	00000000 	.word	0x00000000
 8001030:	08004d14 	.word	0x08004d14

08001034 <frame_dummy>:
 8001034:	b508      	push	{r3, lr}
 8001036:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <frame_dummy+0x10>)
 8001038:	b11b      	cbz	r3, 8001042 <frame_dummy+0xe>
 800103a:	4903      	ldr	r1, [pc, #12]	@ (8001048 <frame_dummy+0x14>)
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <frame_dummy+0x18>)
 800103e:	f3af 8000 	nop.w
 8001042:	bd08      	pop	{r3, pc}
 8001044:	00000000 	.word	0x00000000
 8001048:	200001ec 	.word	0x200001ec
 800104c:	08004d14 	.word	0x08004d14

08001050 <memchr>:
 8001050:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001054:	2a10      	cmp	r2, #16
 8001056:	db2b      	blt.n	80010b0 <memchr+0x60>
 8001058:	f010 0f07 	tst.w	r0, #7
 800105c:	d008      	beq.n	8001070 <memchr+0x20>
 800105e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001062:	3a01      	subs	r2, #1
 8001064:	428b      	cmp	r3, r1
 8001066:	d02d      	beq.n	80010c4 <memchr+0x74>
 8001068:	f010 0f07 	tst.w	r0, #7
 800106c:	b342      	cbz	r2, 80010c0 <memchr+0x70>
 800106e:	d1f6      	bne.n	800105e <memchr+0xe>
 8001070:	b4f0      	push	{r4, r5, r6, r7}
 8001072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800107a:	f022 0407 	bic.w	r4, r2, #7
 800107e:	f07f 0700 	mvns.w	r7, #0
 8001082:	2300      	movs	r3, #0
 8001084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001088:	3c08      	subs	r4, #8
 800108a:	ea85 0501 	eor.w	r5, r5, r1
 800108e:	ea86 0601 	eor.w	r6, r6, r1
 8001092:	fa85 f547 	uadd8	r5, r5, r7
 8001096:	faa3 f587 	sel	r5, r3, r7
 800109a:	fa86 f647 	uadd8	r6, r6, r7
 800109e:	faa5 f687 	sel	r6, r5, r7
 80010a2:	b98e      	cbnz	r6, 80010c8 <memchr+0x78>
 80010a4:	d1ee      	bne.n	8001084 <memchr+0x34>
 80010a6:	bcf0      	pop	{r4, r5, r6, r7}
 80010a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80010ac:	f002 0207 	and.w	r2, r2, #7
 80010b0:	b132      	cbz	r2, 80010c0 <memchr+0x70>
 80010b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80010b6:	3a01      	subs	r2, #1
 80010b8:	ea83 0301 	eor.w	r3, r3, r1
 80010bc:	b113      	cbz	r3, 80010c4 <memchr+0x74>
 80010be:	d1f8      	bne.n	80010b2 <memchr+0x62>
 80010c0:	2000      	movs	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	3801      	subs	r0, #1
 80010c6:	4770      	bx	lr
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	bf06      	itte	eq
 80010cc:	4635      	moveq	r5, r6
 80010ce:	3803      	subeq	r0, #3
 80010d0:	3807      	subne	r0, #7
 80010d2:	f015 0f01 	tst.w	r5, #1
 80010d6:	d107      	bne.n	80010e8 <memchr+0x98>
 80010d8:	3001      	adds	r0, #1
 80010da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80010de:	bf02      	ittt	eq
 80010e0:	3001      	addeq	r0, #1
 80010e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80010e6:	3001      	addeq	r0, #1
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	3801      	subs	r0, #1
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_uldivmod>:
 80010f0:	b953      	cbnz	r3, 8001108 <__aeabi_uldivmod+0x18>
 80010f2:	b94a      	cbnz	r2, 8001108 <__aeabi_uldivmod+0x18>
 80010f4:	2900      	cmp	r1, #0
 80010f6:	bf08      	it	eq
 80010f8:	2800      	cmpeq	r0, #0
 80010fa:	bf1c      	itt	ne
 80010fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001100:	f04f 30ff 	movne.w	r0, #4294967295
 8001104:	f000 b96a 	b.w	80013dc <__aeabi_idiv0>
 8001108:	f1ad 0c08 	sub.w	ip, sp, #8
 800110c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001110:	f000 f806 	bl	8001120 <__udivmoddi4>
 8001114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr

08001120 <__udivmoddi4>:
 8001120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001124:	9d08      	ldr	r5, [sp, #32]
 8001126:	460c      	mov	r4, r1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d14e      	bne.n	80011ca <__udivmoddi4+0xaa>
 800112c:	4694      	mov	ip, r2
 800112e:	458c      	cmp	ip, r1
 8001130:	4686      	mov	lr, r0
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	d962      	bls.n	80011fe <__udivmoddi4+0xde>
 8001138:	b14a      	cbz	r2, 800114e <__udivmoddi4+0x2e>
 800113a:	f1c2 0320 	rsb	r3, r2, #32
 800113e:	4091      	lsls	r1, r2
 8001140:	fa20 f303 	lsr.w	r3, r0, r3
 8001144:	fa0c fc02 	lsl.w	ip, ip, r2
 8001148:	4319      	orrs	r1, r3
 800114a:	fa00 fe02 	lsl.w	lr, r0, r2
 800114e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001152:	fa1f f68c 	uxth.w	r6, ip
 8001156:	fbb1 f4f7 	udiv	r4, r1, r7
 800115a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800115e:	fb07 1114 	mls	r1, r7, r4, r1
 8001162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001166:	fb04 f106 	mul.w	r1, r4, r6
 800116a:	4299      	cmp	r1, r3
 800116c:	d90a      	bls.n	8001184 <__udivmoddi4+0x64>
 800116e:	eb1c 0303 	adds.w	r3, ip, r3
 8001172:	f104 30ff 	add.w	r0, r4, #4294967295
 8001176:	f080 8112 	bcs.w	800139e <__udivmoddi4+0x27e>
 800117a:	4299      	cmp	r1, r3
 800117c:	f240 810f 	bls.w	800139e <__udivmoddi4+0x27e>
 8001180:	3c02      	subs	r4, #2
 8001182:	4463      	add	r3, ip
 8001184:	1a59      	subs	r1, r3, r1
 8001186:	fa1f f38e 	uxth.w	r3, lr
 800118a:	fbb1 f0f7 	udiv	r0, r1, r7
 800118e:	fb07 1110 	mls	r1, r7, r0, r1
 8001192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001196:	fb00 f606 	mul.w	r6, r0, r6
 800119a:	429e      	cmp	r6, r3
 800119c:	d90a      	bls.n	80011b4 <__udivmoddi4+0x94>
 800119e:	eb1c 0303 	adds.w	r3, ip, r3
 80011a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80011a6:	f080 80fc 	bcs.w	80013a2 <__udivmoddi4+0x282>
 80011aa:	429e      	cmp	r6, r3
 80011ac:	f240 80f9 	bls.w	80013a2 <__udivmoddi4+0x282>
 80011b0:	4463      	add	r3, ip
 80011b2:	3802      	subs	r0, #2
 80011b4:	1b9b      	subs	r3, r3, r6
 80011b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011ba:	2100      	movs	r1, #0
 80011bc:	b11d      	cbz	r5, 80011c6 <__udivmoddi4+0xa6>
 80011be:	40d3      	lsrs	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	e9c5 3200 	strd	r3, r2, [r5]
 80011c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ca:	428b      	cmp	r3, r1
 80011cc:	d905      	bls.n	80011da <__udivmoddi4+0xba>
 80011ce:	b10d      	cbz	r5, 80011d4 <__udivmoddi4+0xb4>
 80011d0:	e9c5 0100 	strd	r0, r1, [r5]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4608      	mov	r0, r1
 80011d8:	e7f5      	b.n	80011c6 <__udivmoddi4+0xa6>
 80011da:	fab3 f183 	clz	r1, r3
 80011de:	2900      	cmp	r1, #0
 80011e0:	d146      	bne.n	8001270 <__udivmoddi4+0x150>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d302      	bcc.n	80011ec <__udivmoddi4+0xcc>
 80011e6:	4290      	cmp	r0, r2
 80011e8:	f0c0 80f0 	bcc.w	80013cc <__udivmoddi4+0x2ac>
 80011ec:	1a86      	subs	r6, r0, r2
 80011ee:	eb64 0303 	sbc.w	r3, r4, r3
 80011f2:	2001      	movs	r0, #1
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d0e6      	beq.n	80011c6 <__udivmoddi4+0xa6>
 80011f8:	e9c5 6300 	strd	r6, r3, [r5]
 80011fc:	e7e3      	b.n	80011c6 <__udivmoddi4+0xa6>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	f040 8090 	bne.w	8001324 <__udivmoddi4+0x204>
 8001204:	eba1 040c 	sub.w	r4, r1, ip
 8001208:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800120c:	fa1f f78c 	uxth.w	r7, ip
 8001210:	2101      	movs	r1, #1
 8001212:	fbb4 f6f8 	udiv	r6, r4, r8
 8001216:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800121a:	fb08 4416 	mls	r4, r8, r6, r4
 800121e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001222:	fb07 f006 	mul.w	r0, r7, r6
 8001226:	4298      	cmp	r0, r3
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x11c>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x11a>
 8001234:	4298      	cmp	r0, r3
 8001236:	f200 80cd 	bhi.w	80013d4 <__udivmoddi4+0x2b4>
 800123a:	4626      	mov	r6, r4
 800123c:	1a1c      	subs	r4, r3, r0
 800123e:	fa1f f38e 	uxth.w	r3, lr
 8001242:	fbb4 f0f8 	udiv	r0, r4, r8
 8001246:	fb08 4410 	mls	r4, r8, r0, r4
 800124a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800124e:	fb00 f707 	mul.w	r7, r0, r7
 8001252:	429f      	cmp	r7, r3
 8001254:	d908      	bls.n	8001268 <__udivmoddi4+0x148>
 8001256:	eb1c 0303 	adds.w	r3, ip, r3
 800125a:	f100 34ff 	add.w	r4, r0, #4294967295
 800125e:	d202      	bcs.n	8001266 <__udivmoddi4+0x146>
 8001260:	429f      	cmp	r7, r3
 8001262:	f200 80b0 	bhi.w	80013c6 <__udivmoddi4+0x2a6>
 8001266:	4620      	mov	r0, r4
 8001268:	1bdb      	subs	r3, r3, r7
 800126a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800126e:	e7a5      	b.n	80011bc <__udivmoddi4+0x9c>
 8001270:	f1c1 0620 	rsb	r6, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 f706 	lsr.w	r7, r2, r6
 800127a:	431f      	orrs	r7, r3
 800127c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001280:	fa04 f301 	lsl.w	r3, r4, r1
 8001284:	ea43 030c 	orr.w	r3, r3, ip
 8001288:	40f4      	lsrs	r4, r6
 800128a:	fa00 f801 	lsl.w	r8, r0, r1
 800128e:	0c38      	lsrs	r0, r7, #16
 8001290:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001294:	fbb4 fef0 	udiv	lr, r4, r0
 8001298:	fa1f fc87 	uxth.w	ip, r7
 800129c:	fb00 441e 	mls	r4, r0, lr, r4
 80012a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012a4:	fb0e f90c 	mul.w	r9, lr, ip
 80012a8:	45a1      	cmp	r9, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90a      	bls.n	80012c6 <__udivmoddi4+0x1a6>
 80012b0:	193c      	adds	r4, r7, r4
 80012b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80012b6:	f080 8084 	bcs.w	80013c2 <__udivmoddi4+0x2a2>
 80012ba:	45a1      	cmp	r9, r4
 80012bc:	f240 8081 	bls.w	80013c2 <__udivmoddi4+0x2a2>
 80012c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80012c4:	443c      	add	r4, r7
 80012c6:	eba4 0409 	sub.w	r4, r4, r9
 80012ca:	fa1f f983 	uxth.w	r9, r3
 80012ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80012d2:	fb00 4413 	mls	r4, r0, r3, r4
 80012d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012da:	fb03 fc0c 	mul.w	ip, r3, ip
 80012de:	45a4      	cmp	ip, r4
 80012e0:	d907      	bls.n	80012f2 <__udivmoddi4+0x1d2>
 80012e2:	193c      	adds	r4, r7, r4
 80012e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80012e8:	d267      	bcs.n	80013ba <__udivmoddi4+0x29a>
 80012ea:	45a4      	cmp	ip, r4
 80012ec:	d965      	bls.n	80013ba <__udivmoddi4+0x29a>
 80012ee:	3b02      	subs	r3, #2
 80012f0:	443c      	add	r4, r7
 80012f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012f6:	fba0 9302 	umull	r9, r3, r0, r2
 80012fa:	eba4 040c 	sub.w	r4, r4, ip
 80012fe:	429c      	cmp	r4, r3
 8001300:	46ce      	mov	lr, r9
 8001302:	469c      	mov	ip, r3
 8001304:	d351      	bcc.n	80013aa <__udivmoddi4+0x28a>
 8001306:	d04e      	beq.n	80013a6 <__udivmoddi4+0x286>
 8001308:	b155      	cbz	r5, 8001320 <__udivmoddi4+0x200>
 800130a:	ebb8 030e 	subs.w	r3, r8, lr
 800130e:	eb64 040c 	sbc.w	r4, r4, ip
 8001312:	fa04 f606 	lsl.w	r6, r4, r6
 8001316:	40cb      	lsrs	r3, r1
 8001318:	431e      	orrs	r6, r3
 800131a:	40cc      	lsrs	r4, r1
 800131c:	e9c5 6400 	strd	r6, r4, [r5]
 8001320:	2100      	movs	r1, #0
 8001322:	e750      	b.n	80011c6 <__udivmoddi4+0xa6>
 8001324:	f1c2 0320 	rsb	r3, r2, #32
 8001328:	fa20 f103 	lsr.w	r1, r0, r3
 800132c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001330:	fa24 f303 	lsr.w	r3, r4, r3
 8001334:	4094      	lsls	r4, r2
 8001336:	430c      	orrs	r4, r1
 8001338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800133c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001340:	fa1f f78c 	uxth.w	r7, ip
 8001344:	fbb3 f0f8 	udiv	r0, r3, r8
 8001348:	fb08 3110 	mls	r1, r8, r0, r3
 800134c:	0c23      	lsrs	r3, r4, #16
 800134e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001352:	fb00 f107 	mul.w	r1, r0, r7
 8001356:	4299      	cmp	r1, r3
 8001358:	d908      	bls.n	800136c <__udivmoddi4+0x24c>
 800135a:	eb1c 0303 	adds.w	r3, ip, r3
 800135e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001362:	d22c      	bcs.n	80013be <__udivmoddi4+0x29e>
 8001364:	4299      	cmp	r1, r3
 8001366:	d92a      	bls.n	80013be <__udivmoddi4+0x29e>
 8001368:	3802      	subs	r0, #2
 800136a:	4463      	add	r3, ip
 800136c:	1a5b      	subs	r3, r3, r1
 800136e:	b2a4      	uxth	r4, r4
 8001370:	fbb3 f1f8 	udiv	r1, r3, r8
 8001374:	fb08 3311 	mls	r3, r8, r1, r3
 8001378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800137c:	fb01 f307 	mul.w	r3, r1, r7
 8001380:	42a3      	cmp	r3, r4
 8001382:	d908      	bls.n	8001396 <__udivmoddi4+0x276>
 8001384:	eb1c 0404 	adds.w	r4, ip, r4
 8001388:	f101 36ff 	add.w	r6, r1, #4294967295
 800138c:	d213      	bcs.n	80013b6 <__udivmoddi4+0x296>
 800138e:	42a3      	cmp	r3, r4
 8001390:	d911      	bls.n	80013b6 <__udivmoddi4+0x296>
 8001392:	3902      	subs	r1, #2
 8001394:	4464      	add	r4, ip
 8001396:	1ae4      	subs	r4, r4, r3
 8001398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800139c:	e739      	b.n	8001212 <__udivmoddi4+0xf2>
 800139e:	4604      	mov	r4, r0
 80013a0:	e6f0      	b.n	8001184 <__udivmoddi4+0x64>
 80013a2:	4608      	mov	r0, r1
 80013a4:	e706      	b.n	80011b4 <__udivmoddi4+0x94>
 80013a6:	45c8      	cmp	r8, r9
 80013a8:	d2ae      	bcs.n	8001308 <__udivmoddi4+0x1e8>
 80013aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80013ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80013b2:	3801      	subs	r0, #1
 80013b4:	e7a8      	b.n	8001308 <__udivmoddi4+0x1e8>
 80013b6:	4631      	mov	r1, r6
 80013b8:	e7ed      	b.n	8001396 <__udivmoddi4+0x276>
 80013ba:	4603      	mov	r3, r0
 80013bc:	e799      	b.n	80012f2 <__udivmoddi4+0x1d2>
 80013be:	4630      	mov	r0, r6
 80013c0:	e7d4      	b.n	800136c <__udivmoddi4+0x24c>
 80013c2:	46d6      	mov	lr, sl
 80013c4:	e77f      	b.n	80012c6 <__udivmoddi4+0x1a6>
 80013c6:	4463      	add	r3, ip
 80013c8:	3802      	subs	r0, #2
 80013ca:	e74d      	b.n	8001268 <__udivmoddi4+0x148>
 80013cc:	4606      	mov	r6, r0
 80013ce:	4623      	mov	r3, r4
 80013d0:	4608      	mov	r0, r1
 80013d2:	e70f      	b.n	80011f4 <__udivmoddi4+0xd4>
 80013d4:	3e02      	subs	r6, #2
 80013d6:	4463      	add	r3, ip
 80013d8:	e730      	b.n	800123c <__udivmoddi4+0x11c>
 80013da:	bf00      	nop

080013dc <__aeabi_idiv0>:
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e6:	f000 faed 	bl	80019c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ea:	f000 f857 	bl	800149c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b27      	ldr	r3, [pc, #156]	@ (800148c <main+0xac>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	4a26      	ldr	r2, [pc, #152]	@ (800148c <main+0xac>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <main+0xac>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  HAL_PWR_EnableBkUpAccess();
 8001406:	f000 fdd1 	bl	8001fac <HAL_PWR_EnableBkUpAccess>

  // Wait for Backup domain Write protection disable
  uint32_t tickstart = HAL_GetTick();
 800140a:	f000 fb4b 	bl	8001aa4 <HAL_GetTick>
 800140e:	6078      	str	r0, [r7, #4]
  while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001410:	e008      	b.n	8001424 <main+0x44>
  {
	  if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001412:	f000 fb47 	bl	8001aa4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <main+0x44>
	  {
		  Error_Handler();
 8001420:	f000 f936 	bl	8001690 <Error_Handler>
  while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <main+0xb0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <main+0x32>
	  }
  }

  // Select the RTC clock source (LSE, LSI, or HSE)
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 8001430:	4b16      	ldr	r3, [pc, #88]	@ (800148c <main+0xac>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <main+0xac>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  // Enable the RTC clock
  __HAL_RCC_RTC_ENABLE();
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <main+0xac>)
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144a:	4a10      	ldr	r2, [pc, #64]	@ (800148c <main+0xac>)
 800144c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  //Mechanism to clean and validate the data stored in the backup RAM.
  if((u8_variable % 0x10) != 0) u8_variable = 0x00;
 8001454:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <main+0xb4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d002      	beq.n	8001468 <main+0x88>
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <main+0xb4>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]

  u8_variable += 0x10;
 8001468:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <main+0xb4>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	3310      	adds	r3, #16
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <main+0xb4>)
 8001472:	701a      	strb	r2, [r3, #0]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f000 f894 	bl	80015a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001478:	f000 f862 	bl	8001540 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Variable in BackUpRAM: %d\r\n ", u8_variable);
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <main+0xb4>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <main+0xb8>)
 8001484:	f002 fdd8 	bl	8004038 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <main+0xa8>
 800148c:	40021000 	.word	0x40021000
 8001490:	40007000 	.word	0x40007000
 8001494:	20001000 	.word	0x20001000
 8001498:	08004d2c 	.word	0x08004d2c

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	@ 0x58
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2244      	movs	r2, #68	@ 0x44
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fe19 	bl	80040e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014c2:	f000 fd91 	bl	8001fe8 <HAL_PWREx_ControlVoltageScaling>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014cc:	f000 f8e0 	bl	8001690 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80014da:	2340      	movs	r3, #64	@ 0x40
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e2:	2302      	movs	r3, #2
 80014e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014ea:	230a      	movs	r3, #10
 80014ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ee:	2307      	movs	r3, #7
 80014f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fdc8 	bl	8002094 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800150a:	f000 f8c1 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f9c8 	bl	80028bc <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001532:	f000 f8ad 	bl	8001690 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3758      	adds	r7, #88	@ 0x58
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001544:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001546:	4a15      	ldr	r2, [pc, #84]	@ (800159c <MX_USART2_UART_Init+0x5c>)
 8001548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_USART2_UART_Init+0x58>)
 8001584:	f001 ff1c 	bl	80033c0 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800158e:	f000 f87f 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000204 	.word	0x20000204
 800159c:	40004400 	.word	0x40004400

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a24      	ldr	r2, [pc, #144]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_GPIO_Init+0xc4>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_GPIO_Init+0xc4>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <MX_GPIO_Init+0xc4>)
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <MX_GPIO_Init+0xc4>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2120      	movs	r1, #32
 800161a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800161e:	f000 fcad 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001622:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001628:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480b      	ldr	r0, [pc, #44]	@ (8001668 <MX_GPIO_Init+0xc8>)
 800163a:	f000 fb25 	bl	8001c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800163e:	2320      	movs	r3, #32
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001658:	f000 fb16 	bl	8001c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	@ 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	48000800 	.word	0x48000800

0800166c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001674:	1d39      	adds	r1, r7, #4
 8001676:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800167a:	2201      	movs	r2, #1
 800167c:	4803      	ldr	r0, [pc, #12]	@ (800168c <__io_putchar+0x20>)
 800167e:	f001 feed 	bl	800345c <HAL_UART_Transmit>

  return ch;
 8001682:	687b      	ldr	r3, [r7, #4]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000204 	.word	0x20000204

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error\r\n ");
 8001694:	4803      	ldr	r0, [pc, #12]	@ (80016a4 <Error_Handler+0x14>)
 8001696:	f002 fccf 	bl	8004038 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169a:	b672      	cpsid	i
}
 800169c:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800169e:	bf00      	nop
 80016a0:	e7fd      	b.n	800169e <Error_Handler+0xe>
 80016a2:	bf00      	nop
 80016a4:	08004d4c 	.word	0x08004d4c

080016a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <HAL_MspInit+0x44>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	4a0e      	ldr	r2, [pc, #56]	@ (80016ec <HAL_MspInit+0x44>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ba:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <HAL_MspInit+0x44>)
 80016bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <HAL_MspInit+0x44>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <HAL_MspInit+0x44>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_MspInit+0x44>)
 80016d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b0a4      	sub	sp, #144	@ 0x90
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2268      	movs	r2, #104	@ 0x68
 800170e:	2100      	movs	r1, #0
 8001710:	4618      	mov	r0, r3
 8001712:	f002 fce6 	bl	80040e2 <memset>
  if(huart->Instance==USART2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <HAL_UART_MspInit+0xb0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d13a      	bne.n	8001796 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001720:	2302      	movs	r3, #2
 8001722:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001724:	2300      	movs	r3, #0
 8001726:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4618      	mov	r0, r3
 800172e:	f001 fae9 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001738:	f7ff ffaa 	bl	8001690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 800173e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 8001742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001746:	6593      	str	r3, [r2, #88]	@ 0x58
 8001748:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001754:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_UART_MspInit+0xb4>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800176c:	230c      	movs	r3, #12
 800176e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001782:	2307      	movs	r3, #7
 8001784:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001792:	f000 fa79 	bl	8001c88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001796:	bf00      	nop
 8001798:	3790      	adds	r7, #144	@ 0x90
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40004400 	.word	0x40004400
 80017a4:	40021000 	.word	0x40021000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <NMI_Handler+0x4>

080017b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <HardFault_Handler+0x4>

080017b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <MemManage_Handler+0x4>

080017c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <BusFault_Handler+0x4>

080017c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <UsageFault_Handler+0x4>

080017d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017fe:	f000 f93d 	bl	8001a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e00a      	b.n	800182e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001818:	f3af 8000 	nop.w
 800181c:	4601      	mov	r1, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	b2ca      	uxtb	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	dbf0      	blt.n	8001818 <_read+0x12>
  }

  return len;
 8001836:	687b      	ldr	r3, [r7, #4]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e009      	b.n	8001866 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff06 	bl	800166c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	dbf1      	blt.n	8001852 <_write+0x12>
  }
  return len;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_close>:

int _close(int file)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a0:	605a      	str	r2, [r3, #4]
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_isatty>:

int _isatty(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f002 fc36 	bl	8004180 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20026000 	.word	0x20026000
 8001940:	00000400 	.word	0x00000400
 8001944:	2000028c 	.word	0x2000028c
 8001948:	200003e0 	.word	0x200003e0

0800194c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	@ (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001974:	f7ff ffea 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <LoopForever+0x6>)
  ldr r1, =_edata
 800197a:	490d      	ldr	r1, [pc, #52]	@ (80019b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800197c:	4a0d      	ldr	r2, [pc, #52]	@ (80019b4 <LoopForever+0xe>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001980:	e002      	b.n	8001988 <LoopCopyDataInit>

08001982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001986:	3304      	adds	r3, #4

08001988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800198a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800198c:	d3f9      	bcc.n	8001982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001990:	4c0a      	ldr	r4, [pc, #40]	@ (80019bc <LoopForever+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001994:	e001      	b.n	800199a <LoopFillZerobss>

08001996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001998:	3204      	adds	r2, #4

0800199a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800199a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800199c:	d3fb      	bcc.n	8001996 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f002 fbf5 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fd1d 	bl	80013e0 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019a8:	20026000 	.word	0x20026000
  ldr r0, =_sdata
 80019ac:	20000180 	.word	0x20000180
  ldr r1, =_edata
 80019b0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80019b4:	08004de4 	.word	0x08004de4
  ldr r2, =_sbss
 80019b8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80019bc:	200003e0 	.word	0x200003e0

080019c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_IRQHandler>
	...

080019c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <HAL_Init+0x3c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <HAL_Init+0x3c>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019da:	2003      	movs	r0, #3
 80019dc:	f000 f920 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 f80f 	bl	8001a04 <HAL_InitTick>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	e001      	b.n	80019f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019f2:	f7ff fe59 	bl	80016a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019f6:	79fb      	ldrb	r3, [r7, #7]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40022000 	.word	0x40022000

08001a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a10:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <HAL_InitTick+0x6c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a18:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <HAL_InitTick+0x70>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b14      	ldr	r3, [pc, #80]	@ (8001a70 <HAL_InitTick+0x6c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f000 f91d 	bl	8001c6e <HAL_SYSTICK_Config>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b0f      	cmp	r3, #15
 8001a3e:	d809      	bhi.n	8001a54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a40:	2200      	movs	r2, #0
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295
 8001a48:	f000 f8f5 	bl	8001c36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <HAL_InitTick+0x74>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e007      	b.n	8001a64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	e004      	b.n	8001a64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	e001      	b.n	8001a64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000188 	.word	0x20000188
 8001a74:	20000180 	.word	0x20000180
 8001a78:	20000184 	.word	0x20000184

08001a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_IncTick+0x24>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000188 	.word	0x20000188
 8001aa0:	20000290 	.word	0x20000290

08001aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <HAL_GetTick+0x14>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000290 	.word	0x20000290

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aee:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	60d3      	str	r3, [r2, #12]
}
 8001af4:	bf00      	nop
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	@ (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	@ (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	@ 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	@ (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff47 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c48:	f7ff ff5c 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	68b9      	ldr	r1, [r7, #8]
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f7ff ff8e 	bl	8001b74 <NVIC_EncodePriority>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff5d 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffb0 	bl	8001bdc <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c96:	e154      	b.n	8001f42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8146 	beq.w	8001f3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x40>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 0201 	and.w	r2, r3, #1
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	6939      	ldr	r1, [r7, #16]
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80a0 	beq.w	8001f3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b58      	ldr	r3, [pc, #352]	@ (8001f60 <HAL_GPIO_Init+0x2d8>)
 8001dfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e00:	4a57      	ldr	r2, [pc, #348]	@ (8001f60 <HAL_GPIO_Init+0x2d8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e08:	4b55      	ldr	r3, [pc, #340]	@ (8001f60 <HAL_GPIO_Init+0x2d8>)
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e14:	4a53      	ldr	r2, [pc, #332]	@ (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e3e:	d019      	beq.n	8001e74 <HAL_GPIO_Init+0x1ec>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a49      	ldr	r2, [pc, #292]	@ (8001f68 <HAL_GPIO_Init+0x2e0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_GPIO_Init+0x1e8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a48      	ldr	r2, [pc, #288]	@ (8001f6c <HAL_GPIO_Init+0x2e4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00d      	beq.n	8001e6c <HAL_GPIO_Init+0x1e4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a47      	ldr	r2, [pc, #284]	@ (8001f70 <HAL_GPIO_Init+0x2e8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <HAL_GPIO_Init+0x1e0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a46      	ldr	r2, [pc, #280]	@ (8001f74 <HAL_GPIO_Init+0x2ec>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_GPIO_Init+0x1dc>
 8001e60:	2304      	movs	r3, #4
 8001e62:	e008      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e64:	2307      	movs	r3, #7
 8001e66:	e006      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e004      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_GPIO_Init+0x1ee>
 8001e74:	2300      	movs	r3, #0
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	0092      	lsls	r2, r2, #2
 8001e7e:	4093      	lsls	r3, r2
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e86:	4937      	ldr	r1, [pc, #220]	@ (8001f64 <HAL_GPIO_Init+0x2dc>)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e94:	4b38      	ldr	r3, [pc, #224]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee2:	4a25      	ldr	r2, [pc, #148]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ee8:	4b23      	ldr	r3, [pc, #140]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f36:	4a10      	ldr	r2, [pc, #64]	@ (8001f78 <HAL_GPIO_Init+0x2f0>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f aea3 	bne.w	8001c98 <HAL_GPIO_Init+0x10>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000
 8001f68:	48000400 	.word	0x48000400
 8001f6c:	48000800 	.word	0x48000800
 8001f70:	48000c00 	.word	0x48000c00
 8001f74:	48001000 	.word	0x48001000
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a04      	ldr	r2, [pc, #16]	@ (8001fc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40007000 	.word	0x40007000

08001fcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff6:	d130      	bne.n	800205a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002004:	d038      	beq.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002006:	4b20      	ldr	r3, [pc, #128]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800200e:	4a1e      	ldr	r2, [pc, #120]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002010:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002014:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2232      	movs	r2, #50	@ 0x32
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	4a1b      	ldr	r2, [pc, #108]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202c:	e002      	b.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3b01      	subs	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002034:	4b14      	ldr	r3, [pc, #80]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002040:	d102      	bne.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f2      	bne.n	800202e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002048:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002054:	d110      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e00f      	b.n	800207a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800205a:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002066:	d007      	beq.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002068:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002070:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002076:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40007000 	.word	0x40007000
 800208c:	20000180 	.word	0x20000180
 8002090:	431bde83 	.word	0x431bde83

08002094 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f000 bc02 	b.w	80028ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a8:	4b96      	ldr	r3, [pc, #600]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b2:	4b94      	ldr	r3, [pc, #592]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0310 	and.w	r3, r3, #16
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80e4 	beq.w	8002292 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4c>
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	f040 808b 	bne.w	80021ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	f040 8087 	bne.w	80021ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e0:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_OscConfig+0x64>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e3d9      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1a      	ldr	r2, [r3, #32]
 80020fc:	4b81      	ldr	r3, [pc, #516]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_RCC_OscConfig+0x7e>
 8002108:	4b7e      	ldr	r3, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002110:	e005      	b.n	800211e <HAL_RCC_OscConfig+0x8a>
 8002112:	4b7c      	ldr	r3, [pc, #496]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002114:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800211e:	4293      	cmp	r3, r2
 8002120:	d223      	bcs.n	800216a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fd8c 	bl	8002c44 <RCC_SetFlashLatencyFromMSIRange>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e3ba      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002136:	4b73      	ldr	r3, [pc, #460]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a72      	ldr	r2, [pc, #456]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800213c:	f043 0308 	orr.w	r3, r3, #8
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b70      	ldr	r3, [pc, #448]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	496d      	ldr	r1, [pc, #436]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	4968      	ldr	r1, [pc, #416]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
 8002168:	e025      	b.n	80021b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216a:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a65      	ldr	r2, [pc, #404]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4960      	ldr	r1, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002188:	4b5e      	ldr	r3, [pc, #376]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	021b      	lsls	r3, r3, #8
 8002196:	495b      	ldr	r1, [pc, #364]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002198:	4313      	orrs	r3, r2
 800219a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fd4c 	bl	8002c44 <RCC_SetFlashLatencyFromMSIRange>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e37a      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021b6:	f000 fc81 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	4950      	ldr	r1, [pc, #320]	@ (8002308 <HAL_RCC_OscConfig+0x274>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a4e      	ldr	r2, [pc, #312]	@ (800230c <HAL_RCC_OscConfig+0x278>)
 80021d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002310 <HAL_RCC_OscConfig+0x27c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fc12 	bl	8001a04 <HAL_InitTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d052      	beq.n	8002290 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	e35e      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d032      	beq.n	800225c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021f6:	4b43      	ldr	r3, [pc, #268]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a42      	ldr	r2, [pc, #264]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002202:	f7ff fc4f 	bl	8001aa4 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800220a:	f7ff fc4b 	bl	8001aa4 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e347      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221c:	4b39      	ldr	r3, [pc, #228]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f0      	beq.n	800220a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a35      	ldr	r2, [pc, #212]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4930      	ldr	r1, [pc, #192]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002246:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	492b      	ldr	r1, [pc, #172]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
 800225a:	e01a      	b.n	8002292 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a28      	ldr	r2, [pc, #160]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002268:	f7ff fc1c 	bl	8001aa4 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002270:	f7ff fc18 	bl	8001aa4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e314      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x1dc>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d073      	beq.n	8002386 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_OscConfig+0x21c>
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d10e      	bne.n	80022c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d10b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d063      	beq.n	8002384 <HAL_RCC_OscConfig+0x2f0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d15f      	bne.n	8002384 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e2f1      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022d0:	d106      	bne.n	80022e0 <HAL_RCC_OscConfig+0x24c>
 80022d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e025      	b.n	800232c <HAL_RCC_OscConfig+0x298>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e8:	d114      	bne.n	8002314 <HAL_RCC_OscConfig+0x280>
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4b03      	ldr	r3, [pc, #12]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a02      	ldr	r2, [pc, #8]	@ (8002304 <HAL_RCC_OscConfig+0x270>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e013      	b.n	800232c <HAL_RCC_OscConfig+0x298>
 8002304:	40021000 	.word	0x40021000
 8002308:	08004d58 	.word	0x08004d58
 800230c:	20000180 	.word	0x20000180
 8002310:	20000184 	.word	0x20000184
 8002314:	4ba0      	ldr	r3, [pc, #640]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a9f      	ldr	r2, [pc, #636]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800231a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800231e:	6013      	str	r3, [r2, #0]
 8002320:	4b9d      	ldr	r3, [pc, #628]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a9c      	ldr	r2, [pc, #624]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d013      	beq.n	800235c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fbb6 	bl	8001aa4 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fbb2 	bl	8001aa4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	@ 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e2ae      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	4b92      	ldr	r3, [pc, #584]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x2a8>
 800235a:	e014      	b.n	8002386 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff fba2 	bl	8001aa4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7ff fb9e 	bl	8001aa4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e29a      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002376:	4b88      	ldr	r3, [pc, #544]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x2d0>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d060      	beq.n	8002454 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_OscConfig+0x310>
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d119      	bne.n	80023d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d116      	bne.n	80023d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x328>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e277      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b76      	ldr	r3, [pc, #472]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	4973      	ldr	r1, [pc, #460]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	e040      	b.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d023      	beq.n	8002422 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023da:	4b6f      	ldr	r3, [pc, #444]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a6e      	ldr	r2, [pc, #440]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80023e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb5d 	bl	8001aa4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fb59 	bl	8001aa4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e255      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002400:	4b65      	ldr	r3, [pc, #404]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b62      	ldr	r3, [pc, #392]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	495f      	ldr	r1, [pc, #380]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e018      	b.n	8002454 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b5d      	ldr	r3, [pc, #372]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5c      	ldr	r2, [pc, #368]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002428:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800242c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7ff fb39 	bl	8001aa4 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002436:	f7ff fb35 	bl	8001aa4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e231      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	2b00      	cmp	r3, #0
 800245e:	d03c      	beq.n	80024da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002468:	4b4b      	ldr	r3, [pc, #300]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800246e:	4a4a      	ldr	r2, [pc, #296]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7ff fb14 	bl	8001aa4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002480:	f7ff fb10 	bl	8001aa4 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e20c      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ef      	beq.n	8002480 <HAL_RCC_OscConfig+0x3ec>
 80024a0:	e01b      	b.n	80024da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80024a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7ff faf7 	bl	8001aa4 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ba:	f7ff faf3 	bl	8001aa4 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1ef      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024cc:	4b32      	ldr	r3, [pc, #200]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80024ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ef      	bne.n	80024ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80a6 	beq.w	8002634 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	@ 0x58
 8002504:	4b24      	ldr	r3, [pc, #144]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002510:	2301      	movs	r3, #1
 8002512:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002514:	4b21      	ldr	r3, [pc, #132]	@ (800259c <HAL_RCC_OscConfig+0x508>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d118      	bne.n	8002552 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002520:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <HAL_RCC_OscConfig+0x508>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_RCC_OscConfig+0x508>)
 8002526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800252a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252c:	f7ff faba 	bl	8001aa4 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002534:	f7ff fab6 	bl	8001aa4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1b2      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_RCC_OscConfig+0x508>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x4d8>
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002560:	4a0d      	ldr	r2, [pc, #52]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800256a:	e029      	b.n	80025c0 <HAL_RCC_OscConfig+0x52c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d115      	bne.n	80025a0 <HAL_RCC_OscConfig+0x50c>
 8002574:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257a:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800257c:	f043 0304 	orr.w	r3, r3, #4
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002584:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	4a03      	ldr	r2, [pc, #12]	@ (8002598 <HAL_RCC_OscConfig+0x504>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002594:	e014      	b.n	80025c0 <HAL_RCC_OscConfig+0x52c>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	4b9a      	ldr	r3, [pc, #616]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	4a99      	ldr	r2, [pc, #612]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b0:	4b96      	ldr	r3, [pc, #600]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b6:	4a95      	ldr	r2, [pc, #596]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff fa6c 	bl	8001aa4 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d0:	f7ff fa68 	bl	8001aa4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e162      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e6:	4b89      	ldr	r3, [pc, #548]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ed      	beq.n	80025d0 <HAL_RCC_OscConfig+0x53c>
 80025f4:	e015      	b.n	8002622 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7ff fa55 	bl	8001aa4 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7ff fa51 	bl	8001aa4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e14b      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002614:	4b7d      	ldr	r3, [pc, #500]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ed      	bne.n	80025fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002622:	7ffb      	ldrb	r3, [r7, #31]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d105      	bne.n	8002634 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002628:	4b78      	ldr	r3, [pc, #480]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	4a77      	ldr	r2, [pc, #476]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 800262e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002632:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d03c      	beq.n	80026ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002648:	4b70      	ldr	r3, [pc, #448]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 800264a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800264e:	4a6f      	ldr	r2, [pc, #444]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002650:	f043 0301 	orr.w	r3, r3, #1
 8002654:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff fa24 	bl	8001aa4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002660:	f7ff fa20 	bl	8001aa4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e11c      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002672:	4b66      	ldr	r3, [pc, #408]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002674:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ef      	beq.n	8002660 <HAL_RCC_OscConfig+0x5cc>
 8002680:	e01b      	b.n	80026ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002682:	4b62      	ldr	r3, [pc, #392]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002684:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002688:	4a60      	ldr	r2, [pc, #384]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002692:	f7ff fa07 	bl	8001aa4 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800269a:	f7ff fa03 	bl	8001aa4 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0ff      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ac:	4b57      	ldr	r3, [pc, #348]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80026ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1ef      	bne.n	800269a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80f3 	beq.w	80028aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	f040 80c9 	bne.w	8002860 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ce:	4b4f      	ldr	r3, [pc, #316]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 0203 	and.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026de:	429a      	cmp	r2, r3
 80026e0:	d12c      	bne.n	800273c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ec:	3b01      	subs	r3, #1
 80026ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d123      	bne.n	800273c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d11b      	bne.n	800273c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d113      	bne.n	800273c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d109      	bne.n	800273c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d06b      	beq.n	8002814 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d062      	beq.n	8002808 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002742:	4b32      	ldr	r3, [pc, #200]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0ac      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002752:	4b2e      	ldr	r3, [pc, #184]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2d      	ldr	r2, [pc, #180]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002758:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800275c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800275e:	f7ff f9a1 	bl	8001aa4 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff f99d 	bl	8001aa4 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e099      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <HAL_RCC_OscConfig+0x77c>)
 800278a:	4013      	ands	r3, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002794:	3a01      	subs	r2, #1
 8002796:	0112      	lsls	r2, r2, #4
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800279e:	0212      	lsls	r2, r2, #8
 80027a0:	4311      	orrs	r1, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027a6:	0852      	lsrs	r2, r2, #1
 80027a8:	3a01      	subs	r2, #1
 80027aa:	0552      	lsls	r2, r2, #21
 80027ac:	4311      	orrs	r1, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80027b2:	0852      	lsrs	r2, r2, #1
 80027b4:	3a01      	subs	r2, #1
 80027b6:	0652      	lsls	r2, r2, #25
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027be:	06d2      	lsls	r2, r2, #27
 80027c0:	430a      	orrs	r2, r1
 80027c2:	4912      	ldr	r1, [pc, #72]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027c8:	4b10      	ldr	r3, [pc, #64]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0f      	ldr	r2, [pc, #60]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80027ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d4:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80027da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e0:	f7ff f960 	bl	8001aa4 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff f95c 	bl	8001aa4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e058      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fa:	4b04      	ldr	r3, [pc, #16]	@ (800280c <HAL_RCC_OscConfig+0x778>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002806:	e050      	b.n	80028aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e04f      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
 800280c:	40021000 	.word	0x40021000
 8002810:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002814:	4b27      	ldr	r3, [pc, #156]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d144      	bne.n	80028aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002820:	4b24      	ldr	r3, [pc, #144]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a23      	ldr	r2, [pc, #140]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 8002826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a20      	ldr	r2, [pc, #128]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002836:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002838:	f7ff f934 	bl	8001aa4 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff f930 	bl	8001aa4 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e02c      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	4b18      	ldr	r3, [pc, #96]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x7ac>
 800285e:	e024      	b.n	80028aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b0c      	cmp	r3, #12
 8002864:	d01f      	beq.n	80028a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	4b13      	ldr	r3, [pc, #76]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a12      	ldr	r2, [pc, #72]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 800286c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7ff f917 	bl	8001aa4 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff f913 	bl	8001aa4 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e00f      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4905      	ldr	r1, [pc, #20]	@ (80028b4 <HAL_RCC_OscConfig+0x820>)
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_RCC_OscConfig+0x824>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
 80028a4:	e001      	b.n	80028aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3720      	adds	r7, #32
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	feeefffc 	.word	0xfeeefffc

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0e7      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b75      	ldr	r3, [pc, #468]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d910      	bls.n	8002900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b72      	ldr	r3, [pc, #456]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 0207 	bic.w	r2, r3, #7
 80028e6:	4970      	ldr	r1, [pc, #448]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b6e      	ldr	r3, [pc, #440]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0cf      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d010      	beq.n	800292e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	4b66      	ldr	r3, [pc, #408]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002918:	429a      	cmp	r2, r3
 800291a:	d908      	bls.n	800292e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800291c:	4b63      	ldr	r3, [pc, #396]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4960      	ldr	r1, [pc, #384]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d04c      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002942:	4b5a      	ldr	r3, [pc, #360]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d121      	bne.n	8002992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e0a6      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295a:	4b54      	ldr	r3, [pc, #336]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d115      	bne.n	8002992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e09a      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002972:	4b4e      	ldr	r3, [pc, #312]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e08e      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002982:	4b4a      	ldr	r3, [pc, #296]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e086      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b46      	ldr	r3, [pc, #280]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4943      	ldr	r1, [pc, #268]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a4:	f7ff f87e 	bl	8001aa4 <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7ff f87a 	bl	8001aa4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e06e      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b3a      	ldr	r3, [pc, #232]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d010      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d208      	bcs.n	8002a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4b2e      	ldr	r3, [pc, #184]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	492b      	ldr	r1, [pc, #172]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a02:	4b29      	ldr	r3, [pc, #164]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d210      	bcs.n	8002a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 0207 	bic.w	r2, r3, #7
 8002a18:	4923      	ldr	r1, [pc, #140]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e036      	b.n	8002aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4918      	ldr	r1, [pc, #96]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d009      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5c:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4910      	ldr	r1, [pc, #64]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a70:	f000 f824 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a74:	4602      	mov	r2, r0
 8002a76:	4b0d      	ldr	r3, [pc, #52]	@ (8002aac <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	490b      	ldr	r1, [pc, #44]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a82:	5ccb      	ldrb	r3, [r1, r3]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8c:	4a09      	ldr	r2, [pc, #36]	@ (8002ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe ffb5 	bl	8001a04 <HAL_InitTick>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08004d58 	.word	0x08004d58
 8002ab4:	20000180 	.word	0x20000180
 8002ab8:	20000184 	.word	0x20000184

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	@ 0x24
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aca:	4b3e      	ldr	r3, [pc, #248]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d11e      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002af0:	4b34      	ldr	r3, [pc, #208]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002afc:	4b31      	ldr	r3, [pc, #196]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e005      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b18:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e004      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b40:	4b23      	ldr	r3, [pc, #140]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d134      	bne.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d003      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0xac>
 8002b60:	e005      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b64:	617b      	str	r3, [r7, #20]
      break;
 8002b66:	e005      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6a:	617b      	str	r3, [r7, #20]
      break;
 8002b6c:	e002      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	617b      	str	r3, [r7, #20]
      break;
 8002b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	fb03 f202 	mul.w	r2, r3, r2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	0e5b      	lsrs	r3, r3, #25
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	@ 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08004d70 	.word	0x08004d70
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	007a1200 	.word	0x007a1200

08002bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000180 	.word	0x20000180

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4904      	ldr	r1, [pc, #16]	@ (8002c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08004d68 	.word	0x08004d68

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c1c:	f7ff ffda 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b06      	ldr	r3, [pc, #24]	@ (8002c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0adb      	lsrs	r3, r3, #11
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4904      	ldr	r1, [pc, #16]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	08004d68 	.word	0x08004d68

08002c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c50:	4b2a      	ldr	r3, [pc, #168]	@ (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c5c:	f7ff f9b6 	bl	8001fcc <HAL_PWREx_GetVoltageRange>
 8002c60:	6178      	str	r0, [r7, #20]
 8002c62:	e014      	b.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	4a24      	ldr	r2, [pc, #144]	@ (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c70:	4b22      	ldr	r3, [pc, #136]	@ (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c7c:	f7ff f9a6 	bl	8001fcc <HAL_PWREx_GetVoltageRange>
 8002c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c86:	4a1d      	ldr	r2, [pc, #116]	@ (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c94:	d10b      	bne.n	8002cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b80      	cmp	r3, #128	@ 0x80
 8002c9a:	d919      	bls.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ca0:	d902      	bls.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e013      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca8:	2301      	movs	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	e010      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b80      	cmp	r3, #128	@ 0x80
 8002cb2:	d902      	bls.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	e00a      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b80      	cmp	r3, #128	@ 0x80
 8002cbe:	d102      	bne.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e004      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b70      	cmp	r3, #112	@ 0x70
 8002cca:	d101      	bne.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ccc:	2301      	movs	r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0207 	bic.w	r2, r3, #7
 8002cd8:	4909      	ldr	r1, [pc, #36]	@ (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce0:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40022000 	.word	0x40022000

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d10:	2300      	movs	r3, #0
 8002d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d031      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d28:	d01a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d2e:	d814      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d38:	d10f      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 fa44 	bl	80031dc <RCCEx_PLLSAI1_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d68:	4b51      	ldr	r3, [pc, #324]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	494e      	ldr	r1, [pc, #312]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d7e:	e001      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 809e 	beq.w	8002ece <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d96:	4b46      	ldr	r3, [pc, #280]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b40      	ldr	r3, [pc, #256]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	4a3f      	ldr	r2, [pc, #252]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db8:	4b3d      	ldr	r3, [pc, #244]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a39      	ldr	r2, [pc, #228]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fe66 	bl	8001aa4 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dda:	e009      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fe62 	bl	8001aa4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	74fb      	strb	r3, [r7, #19]
        break;
 8002dee:	e005      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df0:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d15a      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e02:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01e      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d019      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e1e:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e2a:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e30:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e40:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e4a:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d016      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fe22 	bl	8001aa4 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e62:	e00b      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe fe1e 	bl	8001aa4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d902      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	74fb      	strb	r3, [r7, #19]
            break;
 8002e7a:	e006      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ec      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e90:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9e:	4904      	ldr	r1, [pc, #16]	@ (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ea6:	e009      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
 8002eac:	e006      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ebc:	7c7b      	ldrb	r3, [r7, #17]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d105      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec2:	4b9e      	ldr	r3, [pc, #632]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec6:	4a9d      	ldr	r2, [pc, #628]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eda:	4b98      	ldr	r3, [pc, #608]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f023 0203 	bic.w	r2, r3, #3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	4994      	ldr	r1, [pc, #592]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efc:	4b8f      	ldr	r3, [pc, #572]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f02:	f023 020c 	bic.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	498c      	ldr	r1, [pc, #560]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1e:	4b87      	ldr	r3, [pc, #540]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	4983      	ldr	r1, [pc, #524]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f40:	4b7e      	ldr	r3, [pc, #504]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	497b      	ldr	r1, [pc, #492]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f62:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	4972      	ldr	r1, [pc, #456]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f84:	4b6d      	ldr	r3, [pc, #436]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	496a      	ldr	r1, [pc, #424]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb4:	4961      	ldr	r1, [pc, #388]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fc8:	4b5c      	ldr	r3, [pc, #368]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	4959      	ldr	r1, [pc, #356]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fea:	4b54      	ldr	r3, [pc, #336]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff8:	4950      	ldr	r1, [pc, #320]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800300c:	4b4b      	ldr	r3, [pc, #300]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003012:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301a:	4948      	ldr	r1, [pc, #288]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800302e:	4b43      	ldr	r3, [pc, #268]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003030:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003034:	f023 0203 	bic.w	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	493f      	ldr	r1, [pc, #252]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d028      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003050:	4b3a      	ldr	r3, [pc, #232]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800305e:	4937      	ldr	r1, [pc, #220]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800306a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800306e:	d106      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003070:	4b32      	ldr	r3, [pc, #200]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a31      	ldr	r2, [pc, #196]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800307a:	60d3      	str	r3, [r2, #12]
 800307c:	e011      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003082:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003086:	d10c      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2101      	movs	r1, #1
 800308e:	4618      	mov	r0, r3
 8003090:	f000 f8a4 	bl	80031dc <RCCEx_PLLSAI1_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003098:	7cfb      	ldrb	r3, [r7, #19]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d028      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030ae:	4b23      	ldr	r3, [pc, #140]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	491f      	ldr	r1, [pc, #124]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030cc:	d106      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ce:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a1a      	ldr	r2, [pc, #104]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d8:	60d3      	str	r3, [r2, #12]
 80030da:	e011      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	3304      	adds	r3, #4
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 f875 	bl	80031dc <RCCEx_PLLSAI1_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02b      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800310c:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	4908      	ldr	r1, [pc, #32]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800312a:	d109      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a02      	ldr	r2, [pc, #8]	@ (800313c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003136:	60d3      	str	r3, [r2, #12]
 8003138:	e014      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003144:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3304      	adds	r3, #4
 800314e:	2101      	movs	r1, #1
 8003150:	4618      	mov	r0, r3
 8003152:	f000 f843 	bl	80031dc <RCCEx_PLLSAI1_Config>
 8003156:	4603      	mov	r3, r0
 8003158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800315a:	7cfb      	ldrb	r3, [r7, #19]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01c      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003170:	4b19      	ldr	r3, [pc, #100]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	4916      	ldr	r1, [pc, #88]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800318e:	d10c      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f820 	bl	80031dc <RCCEx_PLLSAI1_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031b6:	4b08      	ldr	r3, [pc, #32]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c4:	4904      	ldr	r1, [pc, #16]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40021000 	.word	0x40021000

080031dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ea:	4b74      	ldr	r3, [pc, #464]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031f6:	4b71      	ldr	r3, [pc, #452]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0203 	and.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d10d      	bne.n	8003222 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
       ||
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800320e:	4b6b      	ldr	r3, [pc, #428]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	091b      	lsrs	r3, r3, #4
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
       ||
 800321e:	429a      	cmp	r2, r3
 8003220:	d047      	beq.n	80032b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	e044      	b.n	80032b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d018      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x86>
 8003230:	2b03      	cmp	r3, #3
 8003232:	d825      	bhi.n	8003280 <RCCEx_PLLSAI1_Config+0xa4>
 8003234:	2b01      	cmp	r3, #1
 8003236:	d002      	beq.n	800323e <RCCEx_PLLSAI1_Config+0x62>
 8003238:	2b02      	cmp	r3, #2
 800323a:	d009      	beq.n	8003250 <RCCEx_PLLSAI1_Config+0x74>
 800323c:	e020      	b.n	8003280 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800323e:	4b5f      	ldr	r3, [pc, #380]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11d      	bne.n	8003286 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324e:	e01a      	b.n	8003286 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003250:	4b5a      	ldr	r3, [pc, #360]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d116      	bne.n	800328a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003260:	e013      	b.n	800328a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003262:	4b56      	ldr	r3, [pc, #344]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800326e:	4b53      	ldr	r3, [pc, #332]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800327e:	e006      	b.n	800328e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e004      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003296:	4b49      	ldr	r3, [pc, #292]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	430b      	orrs	r3, r1
 80032ac:	4943      	ldr	r1, [pc, #268]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d17c      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032b8:	4b40      	ldr	r3, [pc, #256]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a3f      	ldr	r2, [pc, #252]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fe fbee 	bl	8001aa4 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ca:	e009      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032cc:	f7fe fbea 	bl	8001aa4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d902      	bls.n	80032e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	73fb      	strb	r3, [r7, #15]
        break;
 80032de:	e005      	b.n	80032ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e0:	4b36      	ldr	r3, [pc, #216]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ef      	bne.n	80032cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d15f      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d110      	bne.n	800331a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032f8:	4b30      	ldr	r3, [pc, #192]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003300:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6892      	ldr	r2, [r2, #8]
 8003308:	0211      	lsls	r1, r2, #8
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68d2      	ldr	r2, [r2, #12]
 800330e:	06d2      	lsls	r2, r2, #27
 8003310:	430a      	orrs	r2, r1
 8003312:	492a      	ldr	r1, [pc, #168]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	610b      	str	r3, [r1, #16]
 8003318:	e027      	b.n	800336a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d112      	bne.n	8003346 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003320:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003328:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	0211      	lsls	r1, r2, #8
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6912      	ldr	r2, [r2, #16]
 8003336:	0852      	lsrs	r2, r2, #1
 8003338:	3a01      	subs	r2, #1
 800333a:	0552      	lsls	r2, r2, #21
 800333c:	430a      	orrs	r2, r1
 800333e:	491f      	ldr	r1, [pc, #124]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003340:	4313      	orrs	r3, r2
 8003342:	610b      	str	r3, [r1, #16]
 8003344:	e011      	b.n	800336a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003346:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800334e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6892      	ldr	r2, [r2, #8]
 8003356:	0211      	lsls	r1, r2, #8
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6952      	ldr	r2, [r2, #20]
 800335c:	0852      	lsrs	r2, r2, #1
 800335e:	3a01      	subs	r2, #1
 8003360:	0652      	lsls	r2, r2, #25
 8003362:	430a      	orrs	r2, r1
 8003364:	4915      	ldr	r1, [pc, #84]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	4313      	orrs	r3, r2
 8003368:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800336a:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a13      	ldr	r2, [pc, #76]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003374:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003376:	f7fe fb95 	bl	8001aa4 <HAL_GetTick>
 800337a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800337c:	e009      	b.n	8003392 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800337e:	f7fe fb91 	bl	8001aa4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d902      	bls.n	8003392 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	73fb      	strb	r3, [r7, #15]
          break;
 8003390:	e005      	b.n	800339e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003392:	4b0a      	ldr	r3, [pc, #40]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0ef      	beq.n	800337e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800339e:	7bfb      	ldrb	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d106      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033a4:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40021000 	.word	0x40021000

080033c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e040      	b.n	8003454 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d106      	bne.n	80033e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fe f984 	bl	80016f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	@ 0x24
 80033ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fb38 	bl	8003a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8af 	bl	8003570 <UART_SetConfig>
 8003412:	4603      	mov	r3, r0
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e01b      	b.n	8003454 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800342a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800343a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fbb7 	bl	8003bc0 <UART_CheckIdleState>
 8003452:	4603      	mov	r3, r0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	@ 0x28
 8003460:	af02      	add	r7, sp, #8
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003470:	2b20      	cmp	r3, #32
 8003472:	d177      	bne.n	8003564 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_UART_Transmit+0x24>
 800347a:	88fb      	ldrh	r3, [r7, #6]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e070      	b.n	8003566 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2221      	movs	r2, #33	@ 0x21
 8003490:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003492:	f7fe fb07 	bl	8001aa4 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	88fa      	ldrh	r2, [r7, #6]
 800349c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	88fa      	ldrh	r2, [r7, #6]
 80034a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b0:	d108      	bne.n	80034c4 <HAL_UART_Transmit+0x68>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d104      	bne.n	80034c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	e003      	b.n	80034cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034cc:	e02f      	b.n	800352e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2180      	movs	r1, #128	@ 0x80
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fc19 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e03b      	b.n	8003566 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003500:	b292      	uxth	r2, r2
 8003502:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	3302      	adds	r3, #2
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e007      	b.n	800351c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	781a      	ldrb	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3301      	adds	r3, #1
 800351a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1c9      	bne.n	80034ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	2140      	movs	r1, #64	@ 0x40
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fbe3 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e005      	b.n	8003566 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3720      	adds	r7, #32
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b08a      	sub	sp, #40	@ 0x28
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4ba5      	ldr	r3, [pc, #660]	@ (8003834 <UART_SetConfig+0x2c4>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a9a      	ldr	r2, [pc, #616]	@ (8003838 <UART_SetConfig+0x2c8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d8:	4313      	orrs	r3, r2
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a91      	ldr	r2, [pc, #580]	@ (800383c <UART_SetConfig+0x2cc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d126      	bne.n	8003648 <UART_SetConfig+0xd8>
 80035fa:	4b91      	ldr	r3, [pc, #580]	@ (8003840 <UART_SetConfig+0x2d0>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d81b      	bhi.n	8003640 <UART_SetConfig+0xd0>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <UART_SetConfig+0xa0>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003631 	.word	0x08003631
 8003618:	08003629 	.word	0x08003629
 800361c:	08003639 	.word	0x08003639
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003626:	e0d6      	b.n	80037d6 <UART_SetConfig+0x266>
 8003628:	2302      	movs	r3, #2
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800362e:	e0d2      	b.n	80037d6 <UART_SetConfig+0x266>
 8003630:	2304      	movs	r3, #4
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003636:	e0ce      	b.n	80037d6 <UART_SetConfig+0x266>
 8003638:	2308      	movs	r3, #8
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800363e:	e0ca      	b.n	80037d6 <UART_SetConfig+0x266>
 8003640:	2310      	movs	r3, #16
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003646:	e0c6      	b.n	80037d6 <UART_SetConfig+0x266>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a7d      	ldr	r2, [pc, #500]	@ (8003844 <UART_SetConfig+0x2d4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d138      	bne.n	80036c4 <UART_SetConfig+0x154>
 8003652:	4b7b      	ldr	r3, [pc, #492]	@ (8003840 <UART_SetConfig+0x2d0>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d82d      	bhi.n	80036bc <UART_SetConfig+0x14c>
 8003660:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <UART_SetConfig+0xf8>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036bd 	.word	0x080036bd
 8003670:	080036bd 	.word	0x080036bd
 8003674:	080036bd 	.word	0x080036bd
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080036bd 	.word	0x080036bd
 8003680:	080036bd 	.word	0x080036bd
 8003684:	080036bd 	.word	0x080036bd
 8003688:	080036a5 	.word	0x080036a5
 800368c:	080036bd 	.word	0x080036bd
 8003690:	080036bd 	.word	0x080036bd
 8003694:	080036bd 	.word	0x080036bd
 8003698:	080036b5 	.word	0x080036b5
 800369c:	2300      	movs	r3, #0
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036a2:	e098      	b.n	80037d6 <UART_SetConfig+0x266>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036aa:	e094      	b.n	80037d6 <UART_SetConfig+0x266>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036b2:	e090      	b.n	80037d6 <UART_SetConfig+0x266>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ba:	e08c      	b.n	80037d6 <UART_SetConfig+0x266>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036c2:	e088      	b.n	80037d6 <UART_SetConfig+0x266>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003848 <UART_SetConfig+0x2d8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d125      	bne.n	800371a <UART_SetConfig+0x1aa>
 80036ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003840 <UART_SetConfig+0x2d0>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80036d8:	2b30      	cmp	r3, #48	@ 0x30
 80036da:	d016      	beq.n	800370a <UART_SetConfig+0x19a>
 80036dc:	2b30      	cmp	r3, #48	@ 0x30
 80036de:	d818      	bhi.n	8003712 <UART_SetConfig+0x1a2>
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d00a      	beq.n	80036fa <UART_SetConfig+0x18a>
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d814      	bhi.n	8003712 <UART_SetConfig+0x1a2>
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <UART_SetConfig+0x182>
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d008      	beq.n	8003702 <UART_SetConfig+0x192>
 80036f0:	e00f      	b.n	8003712 <UART_SetConfig+0x1a2>
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f8:	e06d      	b.n	80037d6 <UART_SetConfig+0x266>
 80036fa:	2302      	movs	r3, #2
 80036fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003700:	e069      	b.n	80037d6 <UART_SetConfig+0x266>
 8003702:	2304      	movs	r3, #4
 8003704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003708:	e065      	b.n	80037d6 <UART_SetConfig+0x266>
 800370a:	2308      	movs	r3, #8
 800370c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003710:	e061      	b.n	80037d6 <UART_SetConfig+0x266>
 8003712:	2310      	movs	r3, #16
 8003714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003718:	e05d      	b.n	80037d6 <UART_SetConfig+0x266>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a4b      	ldr	r2, [pc, #300]	@ (800384c <UART_SetConfig+0x2dc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d125      	bne.n	8003770 <UART_SetConfig+0x200>
 8003724:	4b46      	ldr	r3, [pc, #280]	@ (8003840 <UART_SetConfig+0x2d0>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800372e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003730:	d016      	beq.n	8003760 <UART_SetConfig+0x1f0>
 8003732:	2bc0      	cmp	r3, #192	@ 0xc0
 8003734:	d818      	bhi.n	8003768 <UART_SetConfig+0x1f8>
 8003736:	2b80      	cmp	r3, #128	@ 0x80
 8003738:	d00a      	beq.n	8003750 <UART_SetConfig+0x1e0>
 800373a:	2b80      	cmp	r3, #128	@ 0x80
 800373c:	d814      	bhi.n	8003768 <UART_SetConfig+0x1f8>
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <UART_SetConfig+0x1d8>
 8003742:	2b40      	cmp	r3, #64	@ 0x40
 8003744:	d008      	beq.n	8003758 <UART_SetConfig+0x1e8>
 8003746:	e00f      	b.n	8003768 <UART_SetConfig+0x1f8>
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374e:	e042      	b.n	80037d6 <UART_SetConfig+0x266>
 8003750:	2302      	movs	r3, #2
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003756:	e03e      	b.n	80037d6 <UART_SetConfig+0x266>
 8003758:	2304      	movs	r3, #4
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375e:	e03a      	b.n	80037d6 <UART_SetConfig+0x266>
 8003760:	2308      	movs	r3, #8
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003766:	e036      	b.n	80037d6 <UART_SetConfig+0x266>
 8003768:	2310      	movs	r3, #16
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376e:	e032      	b.n	80037d6 <UART_SetConfig+0x266>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a30      	ldr	r2, [pc, #192]	@ (8003838 <UART_SetConfig+0x2c8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d12a      	bne.n	80037d0 <UART_SetConfig+0x260>
 800377a:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <UART_SetConfig+0x2d0>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003784:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003788:	d01a      	beq.n	80037c0 <UART_SetConfig+0x250>
 800378a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800378e:	d81b      	bhi.n	80037c8 <UART_SetConfig+0x258>
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003794:	d00c      	beq.n	80037b0 <UART_SetConfig+0x240>
 8003796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800379a:	d815      	bhi.n	80037c8 <UART_SetConfig+0x258>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <UART_SetConfig+0x238>
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a4:	d008      	beq.n	80037b8 <UART_SetConfig+0x248>
 80037a6:	e00f      	b.n	80037c8 <UART_SetConfig+0x258>
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ae:	e012      	b.n	80037d6 <UART_SetConfig+0x266>
 80037b0:	2302      	movs	r3, #2
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b6:	e00e      	b.n	80037d6 <UART_SetConfig+0x266>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037be:	e00a      	b.n	80037d6 <UART_SetConfig+0x266>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c6:	e006      	b.n	80037d6 <UART_SetConfig+0x266>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ce:	e002      	b.n	80037d6 <UART_SetConfig+0x266>
 80037d0:	2310      	movs	r3, #16
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a17      	ldr	r2, [pc, #92]	@ (8003838 <UART_SetConfig+0x2c8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	f040 808b 	bne.w	80038f8 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d834      	bhi.n	8003854 <UART_SetConfig+0x2e4>
 80037ea:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <UART_SetConfig+0x280>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003815 	.word	0x08003815
 80037f4:	08003855 	.word	0x08003855
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	08003855 	.word	0x08003855
 8003800:	08003823 	.word	0x08003823
 8003804:	08003855 	.word	0x08003855
 8003808:	08003855 	.word	0x08003855
 800380c:	08003855 	.word	0x08003855
 8003810:	0800382b 	.word	0x0800382b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003814:	f7ff f9ea 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003818:	61f8      	str	r0, [r7, #28]
        break;
 800381a:	e021      	b.n	8003860 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381c:	4b0c      	ldr	r3, [pc, #48]	@ (8003850 <UART_SetConfig+0x2e0>)
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e01e      	b.n	8003860 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003822:	f7ff f94b 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003826:	61f8      	str	r0, [r7, #28]
        break;
 8003828:	e01a      	b.n	8003860 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800382e:	61fb      	str	r3, [r7, #28]
        break;
 8003830:	e016      	b.n	8003860 <UART_SetConfig+0x2f0>
 8003832:	bf00      	nop
 8003834:	efff69f3 	.word	0xefff69f3
 8003838:	40008000 	.word	0x40008000
 800383c:	40013800 	.word	0x40013800
 8003840:	40021000 	.word	0x40021000
 8003844:	40004400 	.word	0x40004400
 8003848:	40004800 	.word	0x40004800
 800384c:	40004c00 	.word	0x40004c00
 8003850:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800385e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80fa 	beq.w	8003a5c <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	429a      	cmp	r2, r3
 8003876:	d305      	bcc.n	8003884 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	d903      	bls.n	800388c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800388a:	e0e7      	b.n	8003a5c <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2200      	movs	r2, #0
 8003890:	461c      	mov	r4, r3
 8003892:	4615      	mov	r5, r2
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	022b      	lsls	r3, r5, #8
 800389e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038a2:	0222      	lsls	r2, r4, #8
 80038a4:	68f9      	ldr	r1, [r7, #12]
 80038a6:	6849      	ldr	r1, [r1, #4]
 80038a8:	0849      	lsrs	r1, r1, #1
 80038aa:	2000      	movs	r0, #0
 80038ac:	4688      	mov	r8, r1
 80038ae:	4681      	mov	r9, r0
 80038b0:	eb12 0a08 	adds.w	sl, r2, r8
 80038b4:	eb43 0b09 	adc.w	fp, r3, r9
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c6:	4650      	mov	r0, sl
 80038c8:	4659      	mov	r1, fp
 80038ca:	f7fd fc11 	bl	80010f0 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4613      	mov	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038dc:	d308      	bcc.n	80038f0 <UART_SetConfig+0x380>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038e4:	d204      	bcs.n	80038f0 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	e0b5      	b.n	8003a5c <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038f6:	e0b1      	b.n	8003a5c <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003900:	d15d      	bne.n	80039be <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003902:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003906:	2b08      	cmp	r3, #8
 8003908:	d827      	bhi.n	800395a <UART_SetConfig+0x3ea>
 800390a:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <UART_SetConfig+0x3a0>)
 800390c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003910:	08003935 	.word	0x08003935
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003945 	.word	0x08003945
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7ff f95a 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003938:	61f8      	str	r0, [r7, #28]
        break;
 800393a:	e014      	b.n	8003966 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7ff f96c 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8003940:	61f8      	str	r0, [r7, #28]
        break;
 8003942:	e010      	b.n	8003966 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b4c      	ldr	r3, [pc, #304]	@ (8003a78 <UART_SetConfig+0x508>)
 8003946:	61fb      	str	r3, [r7, #28]
        break;
 8003948:	e00d      	b.n	8003966 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7ff f8b7 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 800394e:	61f8      	str	r0, [r7, #28]
        break;
 8003950:	e009      	b.n	8003966 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	61fb      	str	r3, [r7, #28]
        break;
 8003958:	e005      	b.n	8003966 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003964:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d077      	beq.n	8003a5c <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005a      	lsls	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	085b      	lsrs	r3, r3, #1
 8003976:	441a      	add	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d916      	bls.n	80039b6 <UART_SetConfig+0x446>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398e:	d212      	bcs.n	80039b6 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f023 030f 	bic.w	r3, r3, #15
 8003998:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	b29b      	uxth	r3, r3
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	8afb      	ldrh	r3, [r7, #22]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	8afa      	ldrh	r2, [r7, #22]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	e052      	b.n	8003a5c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039bc:	e04e      	b.n	8003a5c <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d827      	bhi.n	8003a16 <UART_SetConfig+0x4a6>
 80039c6:	a201      	add	r2, pc, #4	@ (adr r2, 80039cc <UART_SetConfig+0x45c>)
 80039c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039cc:	080039f1 	.word	0x080039f1
 80039d0:	080039f9 	.word	0x080039f9
 80039d4:	08003a01 	.word	0x08003a01
 80039d8:	08003a17 	.word	0x08003a17
 80039dc:	08003a07 	.word	0x08003a07
 80039e0:	08003a17 	.word	0x08003a17
 80039e4:	08003a17 	.word	0x08003a17
 80039e8:	08003a17 	.word	0x08003a17
 80039ec:	08003a0f 	.word	0x08003a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7ff f8fc 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80039f4:	61f8      	str	r0, [r7, #28]
        break;
 80039f6:	e014      	b.n	8003a22 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039f8:	f7ff f90e 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 80039fc:	61f8      	str	r0, [r7, #28]
        break;
 80039fe:	e010      	b.n	8003a22 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a00:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <UART_SetConfig+0x508>)
 8003a02:	61fb      	str	r3, [r7, #28]
        break;
 8003a04:	e00d      	b.n	8003a22 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a06:	f7ff f859 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003a0a:	61f8      	str	r0, [r7, #28]
        break;
 8003a0c:	e009      	b.n	8003a22 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a12:	61fb      	str	r3, [r7, #28]
        break;
 8003a14:	e005      	b.n	8003a22 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a20:	bf00      	nop
    }

    if (pclk != 0U)
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d019      	beq.n	8003a5c <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	085a      	lsrs	r2, r3, #1
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	441a      	add	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	d909      	bls.n	8003a56 <UART_SetConfig+0x4e6>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a48:	d205      	bcs.n	8003a56 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	e002      	b.n	8003a5c <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	@ 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a76:	bf00      	nop
 8003a78:	00f42400 	.word	0x00f42400

08003a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01a      	beq.n	8003b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b7a:	d10a      	bne.n	8003b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	605a      	str	r2, [r3, #4]
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b098      	sub	sp, #96	@ 0x60
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd0:	f7fd ff68 	bl	8001aa4 <HAL_GetTick>
 8003bd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d12e      	bne.n	8003c42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bec:	2200      	movs	r2, #0
 8003bee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f88c 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d021      	beq.n	8003c42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e6      	bne.n	8003bfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e062      	b.n	8003d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d149      	bne.n	8003ce4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f856 	bl	8003d10 <UART_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d03c      	beq.n	8003ce4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	623b      	str	r3, [r7, #32]
   return(result);
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e6      	bne.n	8003c6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0301 	bic.w	r3, r3, #1
 8003cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cbc:	61fa      	str	r2, [r7, #28]
 8003cbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e011      	b.n	8003d08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3758      	adds	r7, #88	@ 0x58
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d20:	e04f      	b.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d04b      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fd febb 	bl	8001aa4 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e04e      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d037      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b80      	cmp	r3, #128	@ 0x80
 8003d56:	d034      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d031      	beq.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d110      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2208      	movs	r2, #8
 8003d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f838 	bl	8003dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e029      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d9c:	d111      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f81e 	bl	8003dea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e00f      	b.n	8003de2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	bf0c      	ite	eq
 8003dd2:	2301      	moveq	r3, #1
 8003dd4:	2300      	movne	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	461a      	mov	r2, r3
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d0a0      	beq.n	8003d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b095      	sub	sp, #84	@ 0x54
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e6      	bne.n	8003df2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3308      	adds	r3, #8
 8003e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e5      	bne.n	8003e24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d118      	bne.n	8003e92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f023 0310 	bic.w	r3, r3, #16
 8003e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e82:	6979      	ldr	r1, [r7, #20]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1e6      	bne.n	8003e60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ea6:	bf00      	nop
 8003ea8:	3754      	adds	r7, #84	@ 0x54
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <std>:
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	4604      	mov	r4, r0
 8003eba:	e9c0 3300 	strd	r3, r3, [r0]
 8003ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ec2:	6083      	str	r3, [r0, #8]
 8003ec4:	8181      	strh	r1, [r0, #12]
 8003ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ec8:	81c2      	strh	r2, [r0, #14]
 8003eca:	6183      	str	r3, [r0, #24]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	2208      	movs	r2, #8
 8003ed0:	305c      	adds	r0, #92	@ 0x5c
 8003ed2:	f000 f906 	bl	80040e2 <memset>
 8003ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f0c <std+0x58>)
 8003ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003eda:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <std+0x5c>)
 8003edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <std+0x60>)
 8003ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <std+0x64>)
 8003ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <std+0x68>)
 8003ee8:	6224      	str	r4, [r4, #32]
 8003eea:	429c      	cmp	r4, r3
 8003eec:	d006      	beq.n	8003efc <std+0x48>
 8003eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ef2:	4294      	cmp	r4, r2
 8003ef4:	d002      	beq.n	8003efc <std+0x48>
 8003ef6:	33d0      	adds	r3, #208	@ 0xd0
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	d105      	bne.n	8003f08 <std+0x54>
 8003efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f04:	f000 b966 	b.w	80041d4 <__retarget_lock_init_recursive>
 8003f08:	bd10      	pop	{r4, pc}
 8003f0a:	bf00      	nop
 8003f0c:	0800405d 	.word	0x0800405d
 8003f10:	0800407f 	.word	0x0800407f
 8003f14:	080040b7 	.word	0x080040b7
 8003f18:	080040db 	.word	0x080040db
 8003f1c:	20000294 	.word	0x20000294

08003f20 <stdio_exit_handler>:
 8003f20:	4a02      	ldr	r2, [pc, #8]	@ (8003f2c <stdio_exit_handler+0xc>)
 8003f22:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <stdio_exit_handler+0x10>)
 8003f24:	4803      	ldr	r0, [pc, #12]	@ (8003f34 <stdio_exit_handler+0x14>)
 8003f26:	f000 b869 	b.w	8003ffc <_fwalk_sglue>
 8003f2a:	bf00      	nop
 8003f2c:	2000018c 	.word	0x2000018c
 8003f30:	08004a75 	.word	0x08004a75
 8003f34:	2000019c 	.word	0x2000019c

08003f38 <cleanup_stdio>:
 8003f38:	6841      	ldr	r1, [r0, #4]
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <cleanup_stdio+0x34>)
 8003f3c:	4299      	cmp	r1, r3
 8003f3e:	b510      	push	{r4, lr}
 8003f40:	4604      	mov	r4, r0
 8003f42:	d001      	beq.n	8003f48 <cleanup_stdio+0x10>
 8003f44:	f000 fd96 	bl	8004a74 <_fflush_r>
 8003f48:	68a1      	ldr	r1, [r4, #8]
 8003f4a:	4b09      	ldr	r3, [pc, #36]	@ (8003f70 <cleanup_stdio+0x38>)
 8003f4c:	4299      	cmp	r1, r3
 8003f4e:	d002      	beq.n	8003f56 <cleanup_stdio+0x1e>
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 fd8f 	bl	8004a74 <_fflush_r>
 8003f56:	68e1      	ldr	r1, [r4, #12]
 8003f58:	4b06      	ldr	r3, [pc, #24]	@ (8003f74 <cleanup_stdio+0x3c>)
 8003f5a:	4299      	cmp	r1, r3
 8003f5c:	d004      	beq.n	8003f68 <cleanup_stdio+0x30>
 8003f5e:	4620      	mov	r0, r4
 8003f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f64:	f000 bd86 	b.w	8004a74 <_fflush_r>
 8003f68:	bd10      	pop	{r4, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000294 	.word	0x20000294
 8003f70:	200002fc 	.word	0x200002fc
 8003f74:	20000364 	.word	0x20000364

08003f78 <global_stdio_init.part.0>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa8 <global_stdio_init.part.0+0x30>)
 8003f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8003fac <global_stdio_init.part.0+0x34>)
 8003f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb0 <global_stdio_init.part.0+0x38>)
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	4620      	mov	r0, r4
 8003f84:	2200      	movs	r2, #0
 8003f86:	2104      	movs	r1, #4
 8003f88:	f7ff ff94 	bl	8003eb4 <std>
 8003f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f90:	2201      	movs	r2, #1
 8003f92:	2109      	movs	r1, #9
 8003f94:	f7ff ff8e 	bl	8003eb4 <std>
 8003f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa2:	2112      	movs	r1, #18
 8003fa4:	f7ff bf86 	b.w	8003eb4 <std>
 8003fa8:	200003cc 	.word	0x200003cc
 8003fac:	20000294 	.word	0x20000294
 8003fb0:	08003f21 	.word	0x08003f21

08003fb4 <__sfp_lock_acquire>:
 8003fb4:	4801      	ldr	r0, [pc, #4]	@ (8003fbc <__sfp_lock_acquire+0x8>)
 8003fb6:	f000 b90e 	b.w	80041d6 <__retarget_lock_acquire_recursive>
 8003fba:	bf00      	nop
 8003fbc:	200003d5 	.word	0x200003d5

08003fc0 <__sfp_lock_release>:
 8003fc0:	4801      	ldr	r0, [pc, #4]	@ (8003fc8 <__sfp_lock_release+0x8>)
 8003fc2:	f000 b909 	b.w	80041d8 <__retarget_lock_release_recursive>
 8003fc6:	bf00      	nop
 8003fc8:	200003d5 	.word	0x200003d5

08003fcc <__sinit>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	4604      	mov	r4, r0
 8003fd0:	f7ff fff0 	bl	8003fb4 <__sfp_lock_acquire>
 8003fd4:	6a23      	ldr	r3, [r4, #32]
 8003fd6:	b11b      	cbz	r3, 8003fe0 <__sinit+0x14>
 8003fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fdc:	f7ff bff0 	b.w	8003fc0 <__sfp_lock_release>
 8003fe0:	4b04      	ldr	r3, [pc, #16]	@ (8003ff4 <__sinit+0x28>)
 8003fe2:	6223      	str	r3, [r4, #32]
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <__sinit+0x2c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f5      	bne.n	8003fd8 <__sinit+0xc>
 8003fec:	f7ff ffc4 	bl	8003f78 <global_stdio_init.part.0>
 8003ff0:	e7f2      	b.n	8003fd8 <__sinit+0xc>
 8003ff2:	bf00      	nop
 8003ff4:	08003f39 	.word	0x08003f39
 8003ff8:	200003cc 	.word	0x200003cc

08003ffc <_fwalk_sglue>:
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004000:	4607      	mov	r7, r0
 8004002:	4688      	mov	r8, r1
 8004004:	4614      	mov	r4, r2
 8004006:	2600      	movs	r6, #0
 8004008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800400c:	f1b9 0901 	subs.w	r9, r9, #1
 8004010:	d505      	bpl.n	800401e <_fwalk_sglue+0x22>
 8004012:	6824      	ldr	r4, [r4, #0]
 8004014:	2c00      	cmp	r4, #0
 8004016:	d1f7      	bne.n	8004008 <_fwalk_sglue+0xc>
 8004018:	4630      	mov	r0, r6
 800401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d907      	bls.n	8004034 <_fwalk_sglue+0x38>
 8004024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004028:	3301      	adds	r3, #1
 800402a:	d003      	beq.n	8004034 <_fwalk_sglue+0x38>
 800402c:	4629      	mov	r1, r5
 800402e:	4638      	mov	r0, r7
 8004030:	47c0      	blx	r8
 8004032:	4306      	orrs	r6, r0
 8004034:	3568      	adds	r5, #104	@ 0x68
 8004036:	e7e9      	b.n	800400c <_fwalk_sglue+0x10>

08004038 <iprintf>:
 8004038:	b40f      	push	{r0, r1, r2, r3}
 800403a:	b507      	push	{r0, r1, r2, lr}
 800403c:	4906      	ldr	r1, [pc, #24]	@ (8004058 <iprintf+0x20>)
 800403e:	ab04      	add	r3, sp, #16
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	f853 2b04 	ldr.w	r2, [r3], #4
 8004046:	6881      	ldr	r1, [r0, #8]
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	f000 f9e9 	bl	8004420 <_vfiprintf_r>
 800404e:	b003      	add	sp, #12
 8004050:	f85d eb04 	ldr.w	lr, [sp], #4
 8004054:	b004      	add	sp, #16
 8004056:	4770      	bx	lr
 8004058:	20000198 	.word	0x20000198

0800405c <__sread>:
 800405c:	b510      	push	{r4, lr}
 800405e:	460c      	mov	r4, r1
 8004060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004064:	f000 f868 	bl	8004138 <_read_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	bfab      	itete	ge
 800406c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800406e:	89a3      	ldrhlt	r3, [r4, #12]
 8004070:	181b      	addge	r3, r3, r0
 8004072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004076:	bfac      	ite	ge
 8004078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800407a:	81a3      	strhlt	r3, [r4, #12]
 800407c:	bd10      	pop	{r4, pc}

0800407e <__swrite>:
 800407e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004082:	461f      	mov	r7, r3
 8004084:	898b      	ldrh	r3, [r1, #12]
 8004086:	05db      	lsls	r3, r3, #23
 8004088:	4605      	mov	r5, r0
 800408a:	460c      	mov	r4, r1
 800408c:	4616      	mov	r6, r2
 800408e:	d505      	bpl.n	800409c <__swrite+0x1e>
 8004090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004094:	2302      	movs	r3, #2
 8004096:	2200      	movs	r2, #0
 8004098:	f000 f83c 	bl	8004114 <_lseek_r>
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040a6:	81a3      	strh	r3, [r4, #12]
 80040a8:	4632      	mov	r2, r6
 80040aa:	463b      	mov	r3, r7
 80040ac:	4628      	mov	r0, r5
 80040ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b2:	f000 b853 	b.w	800415c <_write_r>

080040b6 <__sseek>:
 80040b6:	b510      	push	{r4, lr}
 80040b8:	460c      	mov	r4, r1
 80040ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040be:	f000 f829 	bl	8004114 <_lseek_r>
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	bf15      	itete	ne
 80040c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040d2:	81a3      	strheq	r3, [r4, #12]
 80040d4:	bf18      	it	ne
 80040d6:	81a3      	strhne	r3, [r4, #12]
 80040d8:	bd10      	pop	{r4, pc}

080040da <__sclose>:
 80040da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040de:	f000 b809 	b.w	80040f4 <_close_r>

080040e2 <memset>:
 80040e2:	4402      	add	r2, r0
 80040e4:	4603      	mov	r3, r0
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d100      	bne.n	80040ec <memset+0xa>
 80040ea:	4770      	bx	lr
 80040ec:	f803 1b01 	strb.w	r1, [r3], #1
 80040f0:	e7f9      	b.n	80040e6 <memset+0x4>
	...

080040f4 <_close_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	4d06      	ldr	r5, [pc, #24]	@ (8004110 <_close_r+0x1c>)
 80040f8:	2300      	movs	r3, #0
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	f7fd fbba 	bl	8001878 <_close>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_close_r+0x1a>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_close_r+0x1a>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	200003d0 	.word	0x200003d0

08004114 <_lseek_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4d07      	ldr	r5, [pc, #28]	@ (8004134 <_lseek_r+0x20>)
 8004118:	4604      	mov	r4, r0
 800411a:	4608      	mov	r0, r1
 800411c:	4611      	mov	r1, r2
 800411e:	2200      	movs	r2, #0
 8004120:	602a      	str	r2, [r5, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f7fd fbcf 	bl	80018c6 <_lseek>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_lseek_r+0x1e>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_lseek_r+0x1e>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	200003d0 	.word	0x200003d0

08004138 <_read_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4d07      	ldr	r5, [pc, #28]	@ (8004158 <_read_r+0x20>)
 800413c:	4604      	mov	r4, r0
 800413e:	4608      	mov	r0, r1
 8004140:	4611      	mov	r1, r2
 8004142:	2200      	movs	r2, #0
 8004144:	602a      	str	r2, [r5, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f7fd fb5d 	bl	8001806 <_read>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d102      	bne.n	8004156 <_read_r+0x1e>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	b103      	cbz	r3, 8004156 <_read_r+0x1e>
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	bd38      	pop	{r3, r4, r5, pc}
 8004158:	200003d0 	.word	0x200003d0

0800415c <_write_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d07      	ldr	r5, [pc, #28]	@ (800417c <_write_r+0x20>)
 8004160:	4604      	mov	r4, r0
 8004162:	4608      	mov	r0, r1
 8004164:	4611      	mov	r1, r2
 8004166:	2200      	movs	r2, #0
 8004168:	602a      	str	r2, [r5, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	f7fd fb68 	bl	8001840 <_write>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_write_r+0x1e>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_write_r+0x1e>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	200003d0 	.word	0x200003d0

08004180 <__errno>:
 8004180:	4b01      	ldr	r3, [pc, #4]	@ (8004188 <__errno+0x8>)
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000198 	.word	0x20000198

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4d0d      	ldr	r5, [pc, #52]	@ (80041c4 <__libc_init_array+0x38>)
 8004190:	4c0d      	ldr	r4, [pc, #52]	@ (80041c8 <__libc_init_array+0x3c>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	2600      	movs	r6, #0
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	4d0b      	ldr	r5, [pc, #44]	@ (80041cc <__libc_init_array+0x40>)
 800419e:	4c0c      	ldr	r4, [pc, #48]	@ (80041d0 <__libc_init_array+0x44>)
 80041a0:	f000 fdb8 	bl	8004d14 <_init>
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	2600      	movs	r6, #0
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	08004ddc 	.word	0x08004ddc
 80041c8:	08004ddc 	.word	0x08004ddc
 80041cc:	08004ddc 	.word	0x08004ddc
 80041d0:	08004de0 	.word	0x08004de0

080041d4 <__retarget_lock_init_recursive>:
 80041d4:	4770      	bx	lr

080041d6 <__retarget_lock_acquire_recursive>:
 80041d6:	4770      	bx	lr

080041d8 <__retarget_lock_release_recursive>:
 80041d8:	4770      	bx	lr
	...

080041dc <_free_r>:
 80041dc:	b538      	push	{r3, r4, r5, lr}
 80041de:	4605      	mov	r5, r0
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d041      	beq.n	8004268 <_free_r+0x8c>
 80041e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e8:	1f0c      	subs	r4, r1, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bfb8      	it	lt
 80041ee:	18e4      	addlt	r4, r4, r3
 80041f0:	f000 f8e0 	bl	80043b4 <__malloc_lock>
 80041f4:	4a1d      	ldr	r2, [pc, #116]	@ (800426c <_free_r+0x90>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	b933      	cbnz	r3, 8004208 <_free_r+0x2c>
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	6014      	str	r4, [r2, #0]
 80041fe:	4628      	mov	r0, r5
 8004200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004204:	f000 b8dc 	b.w	80043c0 <__malloc_unlock>
 8004208:	42a3      	cmp	r3, r4
 800420a:	d908      	bls.n	800421e <_free_r+0x42>
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	1821      	adds	r1, r4, r0
 8004210:	428b      	cmp	r3, r1
 8004212:	bf01      	itttt	eq
 8004214:	6819      	ldreq	r1, [r3, #0]
 8004216:	685b      	ldreq	r3, [r3, #4]
 8004218:	1809      	addeq	r1, r1, r0
 800421a:	6021      	streq	r1, [r4, #0]
 800421c:	e7ed      	b.n	80041fa <_free_r+0x1e>
 800421e:	461a      	mov	r2, r3
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	b10b      	cbz	r3, 8004228 <_free_r+0x4c>
 8004224:	42a3      	cmp	r3, r4
 8004226:	d9fa      	bls.n	800421e <_free_r+0x42>
 8004228:	6811      	ldr	r1, [r2, #0]
 800422a:	1850      	adds	r0, r2, r1
 800422c:	42a0      	cmp	r0, r4
 800422e:	d10b      	bne.n	8004248 <_free_r+0x6c>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	4401      	add	r1, r0
 8004234:	1850      	adds	r0, r2, r1
 8004236:	4283      	cmp	r3, r0
 8004238:	6011      	str	r1, [r2, #0]
 800423a:	d1e0      	bne.n	80041fe <_free_r+0x22>
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	6053      	str	r3, [r2, #4]
 8004242:	4408      	add	r0, r1
 8004244:	6010      	str	r0, [r2, #0]
 8004246:	e7da      	b.n	80041fe <_free_r+0x22>
 8004248:	d902      	bls.n	8004250 <_free_r+0x74>
 800424a:	230c      	movs	r3, #12
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	e7d6      	b.n	80041fe <_free_r+0x22>
 8004250:	6820      	ldr	r0, [r4, #0]
 8004252:	1821      	adds	r1, r4, r0
 8004254:	428b      	cmp	r3, r1
 8004256:	bf04      	itt	eq
 8004258:	6819      	ldreq	r1, [r3, #0]
 800425a:	685b      	ldreq	r3, [r3, #4]
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	bf04      	itt	eq
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6054      	str	r4, [r2, #4]
 8004266:	e7ca      	b.n	80041fe <_free_r+0x22>
 8004268:	bd38      	pop	{r3, r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	200003dc 	.word	0x200003dc

08004270 <sbrk_aligned>:
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	4e0f      	ldr	r6, [pc, #60]	@ (80042b0 <sbrk_aligned+0x40>)
 8004274:	460c      	mov	r4, r1
 8004276:	6831      	ldr	r1, [r6, #0]
 8004278:	4605      	mov	r5, r0
 800427a:	b911      	cbnz	r1, 8004282 <sbrk_aligned+0x12>
 800427c:	f000 fcb6 	bl	8004bec <_sbrk_r>
 8004280:	6030      	str	r0, [r6, #0]
 8004282:	4621      	mov	r1, r4
 8004284:	4628      	mov	r0, r5
 8004286:	f000 fcb1 	bl	8004bec <_sbrk_r>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	d103      	bne.n	8004296 <sbrk_aligned+0x26>
 800428e:	f04f 34ff 	mov.w	r4, #4294967295
 8004292:	4620      	mov	r0, r4
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	1cc4      	adds	r4, r0, #3
 8004298:	f024 0403 	bic.w	r4, r4, #3
 800429c:	42a0      	cmp	r0, r4
 800429e:	d0f8      	beq.n	8004292 <sbrk_aligned+0x22>
 80042a0:	1a21      	subs	r1, r4, r0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f000 fca2 	bl	8004bec <_sbrk_r>
 80042a8:	3001      	adds	r0, #1
 80042aa:	d1f2      	bne.n	8004292 <sbrk_aligned+0x22>
 80042ac:	e7ef      	b.n	800428e <sbrk_aligned+0x1e>
 80042ae:	bf00      	nop
 80042b0:	200003d8 	.word	0x200003d8

080042b4 <_malloc_r>:
 80042b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b8:	1ccd      	adds	r5, r1, #3
 80042ba:	f025 0503 	bic.w	r5, r5, #3
 80042be:	3508      	adds	r5, #8
 80042c0:	2d0c      	cmp	r5, #12
 80042c2:	bf38      	it	cc
 80042c4:	250c      	movcc	r5, #12
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	4606      	mov	r6, r0
 80042ca:	db01      	blt.n	80042d0 <_malloc_r+0x1c>
 80042cc:	42a9      	cmp	r1, r5
 80042ce:	d904      	bls.n	80042da <_malloc_r+0x26>
 80042d0:	230c      	movs	r3, #12
 80042d2:	6033      	str	r3, [r6, #0]
 80042d4:	2000      	movs	r0, #0
 80042d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043b0 <_malloc_r+0xfc>
 80042de:	f000 f869 	bl	80043b4 <__malloc_lock>
 80042e2:	f8d8 3000 	ldr.w	r3, [r8]
 80042e6:	461c      	mov	r4, r3
 80042e8:	bb44      	cbnz	r4, 800433c <_malloc_r+0x88>
 80042ea:	4629      	mov	r1, r5
 80042ec:	4630      	mov	r0, r6
 80042ee:	f7ff ffbf 	bl	8004270 <sbrk_aligned>
 80042f2:	1c43      	adds	r3, r0, #1
 80042f4:	4604      	mov	r4, r0
 80042f6:	d158      	bne.n	80043aa <_malloc_r+0xf6>
 80042f8:	f8d8 4000 	ldr.w	r4, [r8]
 80042fc:	4627      	mov	r7, r4
 80042fe:	2f00      	cmp	r7, #0
 8004300:	d143      	bne.n	800438a <_malloc_r+0xd6>
 8004302:	2c00      	cmp	r4, #0
 8004304:	d04b      	beq.n	800439e <_malloc_r+0xea>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4639      	mov	r1, r7
 800430a:	4630      	mov	r0, r6
 800430c:	eb04 0903 	add.w	r9, r4, r3
 8004310:	f000 fc6c 	bl	8004bec <_sbrk_r>
 8004314:	4581      	cmp	r9, r0
 8004316:	d142      	bne.n	800439e <_malloc_r+0xea>
 8004318:	6821      	ldr	r1, [r4, #0]
 800431a:	1a6d      	subs	r5, r5, r1
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f7ff ffa6 	bl	8004270 <sbrk_aligned>
 8004324:	3001      	adds	r0, #1
 8004326:	d03a      	beq.n	800439e <_malloc_r+0xea>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	442b      	add	r3, r5
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	f8d8 3000 	ldr.w	r3, [r8]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	bb62      	cbnz	r2, 8004390 <_malloc_r+0xdc>
 8004336:	f8c8 7000 	str.w	r7, [r8]
 800433a:	e00f      	b.n	800435c <_malloc_r+0xa8>
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	1b52      	subs	r2, r2, r5
 8004340:	d420      	bmi.n	8004384 <_malloc_r+0xd0>
 8004342:	2a0b      	cmp	r2, #11
 8004344:	d917      	bls.n	8004376 <_malloc_r+0xc2>
 8004346:	1961      	adds	r1, r4, r5
 8004348:	42a3      	cmp	r3, r4
 800434a:	6025      	str	r5, [r4, #0]
 800434c:	bf18      	it	ne
 800434e:	6059      	strne	r1, [r3, #4]
 8004350:	6863      	ldr	r3, [r4, #4]
 8004352:	bf08      	it	eq
 8004354:	f8c8 1000 	streq.w	r1, [r8]
 8004358:	5162      	str	r2, [r4, r5]
 800435a:	604b      	str	r3, [r1, #4]
 800435c:	4630      	mov	r0, r6
 800435e:	f000 f82f 	bl	80043c0 <__malloc_unlock>
 8004362:	f104 000b 	add.w	r0, r4, #11
 8004366:	1d23      	adds	r3, r4, #4
 8004368:	f020 0007 	bic.w	r0, r0, #7
 800436c:	1ac2      	subs	r2, r0, r3
 800436e:	bf1c      	itt	ne
 8004370:	1a1b      	subne	r3, r3, r0
 8004372:	50a3      	strne	r3, [r4, r2]
 8004374:	e7af      	b.n	80042d6 <_malloc_r+0x22>
 8004376:	6862      	ldr	r2, [r4, #4]
 8004378:	42a3      	cmp	r3, r4
 800437a:	bf0c      	ite	eq
 800437c:	f8c8 2000 	streq.w	r2, [r8]
 8004380:	605a      	strne	r2, [r3, #4]
 8004382:	e7eb      	b.n	800435c <_malloc_r+0xa8>
 8004384:	4623      	mov	r3, r4
 8004386:	6864      	ldr	r4, [r4, #4]
 8004388:	e7ae      	b.n	80042e8 <_malloc_r+0x34>
 800438a:	463c      	mov	r4, r7
 800438c:	687f      	ldr	r7, [r7, #4]
 800438e:	e7b6      	b.n	80042fe <_malloc_r+0x4a>
 8004390:	461a      	mov	r2, r3
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	d1fb      	bne.n	8004390 <_malloc_r+0xdc>
 8004398:	2300      	movs	r3, #0
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7de      	b.n	800435c <_malloc_r+0xa8>
 800439e:	230c      	movs	r3, #12
 80043a0:	6033      	str	r3, [r6, #0]
 80043a2:	4630      	mov	r0, r6
 80043a4:	f000 f80c 	bl	80043c0 <__malloc_unlock>
 80043a8:	e794      	b.n	80042d4 <_malloc_r+0x20>
 80043aa:	6005      	str	r5, [r0, #0]
 80043ac:	e7d6      	b.n	800435c <_malloc_r+0xa8>
 80043ae:	bf00      	nop
 80043b0:	200003dc 	.word	0x200003dc

080043b4 <__malloc_lock>:
 80043b4:	4801      	ldr	r0, [pc, #4]	@ (80043bc <__malloc_lock+0x8>)
 80043b6:	f7ff bf0e 	b.w	80041d6 <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200003d4 	.word	0x200003d4

080043c0 <__malloc_unlock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	@ (80043c8 <__malloc_unlock+0x8>)
 80043c2:	f7ff bf09 	b.w	80041d8 <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200003d4 	.word	0x200003d4

080043cc <__sfputc_r>:
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	b410      	push	{r4}
 80043d4:	6093      	str	r3, [r2, #8]
 80043d6:	da08      	bge.n	80043ea <__sfputc_r+0x1e>
 80043d8:	6994      	ldr	r4, [r2, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	db01      	blt.n	80043e2 <__sfputc_r+0x16>
 80043de:	290a      	cmp	r1, #10
 80043e0:	d103      	bne.n	80043ea <__sfputc_r+0x1e>
 80043e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e6:	f000 bb6d 	b.w	8004ac4 <__swbuf_r>
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	1c58      	adds	r0, r3, #1
 80043ee:	6010      	str	r0, [r2, #0]
 80043f0:	7019      	strb	r1, [r3, #0]
 80043f2:	4608      	mov	r0, r1
 80043f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <__sfputs_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	4614      	mov	r4, r2
 8004402:	18d5      	adds	r5, r2, r3
 8004404:	42ac      	cmp	r4, r5
 8004406:	d101      	bne.n	800440c <__sfputs_r+0x12>
 8004408:	2000      	movs	r0, #0
 800440a:	e007      	b.n	800441c <__sfputs_r+0x22>
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	463a      	mov	r2, r7
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffda 	bl	80043cc <__sfputc_r>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d1f3      	bne.n	8004404 <__sfputs_r+0xa>
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004420 <_vfiprintf_r>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	460d      	mov	r5, r1
 8004426:	b09d      	sub	sp, #116	@ 0x74
 8004428:	4614      	mov	r4, r2
 800442a:	4698      	mov	r8, r3
 800442c:	4606      	mov	r6, r0
 800442e:	b118      	cbz	r0, 8004438 <_vfiprintf_r+0x18>
 8004430:	6a03      	ldr	r3, [r0, #32]
 8004432:	b90b      	cbnz	r3, 8004438 <_vfiprintf_r+0x18>
 8004434:	f7ff fdca 	bl	8003fcc <__sinit>
 8004438:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800443a:	07d9      	lsls	r1, r3, #31
 800443c:	d405      	bmi.n	800444a <_vfiprintf_r+0x2a>
 800443e:	89ab      	ldrh	r3, [r5, #12]
 8004440:	059a      	lsls	r2, r3, #22
 8004442:	d402      	bmi.n	800444a <_vfiprintf_r+0x2a>
 8004444:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004446:	f7ff fec6 	bl	80041d6 <__retarget_lock_acquire_recursive>
 800444a:	89ab      	ldrh	r3, [r5, #12]
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	d501      	bpl.n	8004454 <_vfiprintf_r+0x34>
 8004450:	692b      	ldr	r3, [r5, #16]
 8004452:	b99b      	cbnz	r3, 800447c <_vfiprintf_r+0x5c>
 8004454:	4629      	mov	r1, r5
 8004456:	4630      	mov	r0, r6
 8004458:	f000 fb72 	bl	8004b40 <__swsetup_r>
 800445c:	b170      	cbz	r0, 800447c <_vfiprintf_r+0x5c>
 800445e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004460:	07dc      	lsls	r4, r3, #31
 8004462:	d504      	bpl.n	800446e <_vfiprintf_r+0x4e>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	b01d      	add	sp, #116	@ 0x74
 800446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	0598      	lsls	r0, r3, #22
 8004472:	d4f7      	bmi.n	8004464 <_vfiprintf_r+0x44>
 8004474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004476:	f7ff feaf 	bl	80041d8 <__retarget_lock_release_recursive>
 800447a:	e7f3      	b.n	8004464 <_vfiprintf_r+0x44>
 800447c:	2300      	movs	r3, #0
 800447e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004480:	2320      	movs	r3, #32
 8004482:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004486:	f8cd 800c 	str.w	r8, [sp, #12]
 800448a:	2330      	movs	r3, #48	@ 0x30
 800448c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800463c <_vfiprintf_r+0x21c>
 8004490:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004494:	f04f 0901 	mov.w	r9, #1
 8004498:	4623      	mov	r3, r4
 800449a:	469a      	mov	sl, r3
 800449c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044a0:	b10a      	cbz	r2, 80044a6 <_vfiprintf_r+0x86>
 80044a2:	2a25      	cmp	r2, #37	@ 0x25
 80044a4:	d1f9      	bne.n	800449a <_vfiprintf_r+0x7a>
 80044a6:	ebba 0b04 	subs.w	fp, sl, r4
 80044aa:	d00b      	beq.n	80044c4 <_vfiprintf_r+0xa4>
 80044ac:	465b      	mov	r3, fp
 80044ae:	4622      	mov	r2, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ffa1 	bl	80043fa <__sfputs_r>
 80044b8:	3001      	adds	r0, #1
 80044ba:	f000 80a7 	beq.w	800460c <_vfiprintf_r+0x1ec>
 80044be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044c0:	445a      	add	r2, fp
 80044c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80044c4:	f89a 3000 	ldrb.w	r3, [sl]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 809f 	beq.w	800460c <_vfiprintf_r+0x1ec>
 80044ce:	2300      	movs	r3, #0
 80044d0:	f04f 32ff 	mov.w	r2, #4294967295
 80044d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044d8:	f10a 0a01 	add.w	sl, sl, #1
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	9307      	str	r3, [sp, #28]
 80044e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80044e6:	4654      	mov	r4, sl
 80044e8:	2205      	movs	r2, #5
 80044ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ee:	4853      	ldr	r0, [pc, #332]	@ (800463c <_vfiprintf_r+0x21c>)
 80044f0:	f7fc fdae 	bl	8001050 <memchr>
 80044f4:	9a04      	ldr	r2, [sp, #16]
 80044f6:	b9d8      	cbnz	r0, 8004530 <_vfiprintf_r+0x110>
 80044f8:	06d1      	lsls	r1, r2, #27
 80044fa:	bf44      	itt	mi
 80044fc:	2320      	movmi	r3, #32
 80044fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004502:	0713      	lsls	r3, r2, #28
 8004504:	bf44      	itt	mi
 8004506:	232b      	movmi	r3, #43	@ 0x2b
 8004508:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800450c:	f89a 3000 	ldrb.w	r3, [sl]
 8004510:	2b2a      	cmp	r3, #42	@ 0x2a
 8004512:	d015      	beq.n	8004540 <_vfiprintf_r+0x120>
 8004514:	9a07      	ldr	r2, [sp, #28]
 8004516:	4654      	mov	r4, sl
 8004518:	2000      	movs	r0, #0
 800451a:	f04f 0c0a 	mov.w	ip, #10
 800451e:	4621      	mov	r1, r4
 8004520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004524:	3b30      	subs	r3, #48	@ 0x30
 8004526:	2b09      	cmp	r3, #9
 8004528:	d94b      	bls.n	80045c2 <_vfiprintf_r+0x1a2>
 800452a:	b1b0      	cbz	r0, 800455a <_vfiprintf_r+0x13a>
 800452c:	9207      	str	r2, [sp, #28]
 800452e:	e014      	b.n	800455a <_vfiprintf_r+0x13a>
 8004530:	eba0 0308 	sub.w	r3, r0, r8
 8004534:	fa09 f303 	lsl.w	r3, r9, r3
 8004538:	4313      	orrs	r3, r2
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	46a2      	mov	sl, r4
 800453e:	e7d2      	b.n	80044e6 <_vfiprintf_r+0xc6>
 8004540:	9b03      	ldr	r3, [sp, #12]
 8004542:	1d19      	adds	r1, r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	9103      	str	r1, [sp, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	bfbb      	ittet	lt
 800454c:	425b      	neglt	r3, r3
 800454e:	f042 0202 	orrlt.w	r2, r2, #2
 8004552:	9307      	strge	r3, [sp, #28]
 8004554:	9307      	strlt	r3, [sp, #28]
 8004556:	bfb8      	it	lt
 8004558:	9204      	strlt	r2, [sp, #16]
 800455a:	7823      	ldrb	r3, [r4, #0]
 800455c:	2b2e      	cmp	r3, #46	@ 0x2e
 800455e:	d10a      	bne.n	8004576 <_vfiprintf_r+0x156>
 8004560:	7863      	ldrb	r3, [r4, #1]
 8004562:	2b2a      	cmp	r3, #42	@ 0x2a
 8004564:	d132      	bne.n	80045cc <_vfiprintf_r+0x1ac>
 8004566:	9b03      	ldr	r3, [sp, #12]
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	9203      	str	r2, [sp, #12]
 800456e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004572:	3402      	adds	r4, #2
 8004574:	9305      	str	r3, [sp, #20]
 8004576:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800464c <_vfiprintf_r+0x22c>
 800457a:	7821      	ldrb	r1, [r4, #0]
 800457c:	2203      	movs	r2, #3
 800457e:	4650      	mov	r0, sl
 8004580:	f7fc fd66 	bl	8001050 <memchr>
 8004584:	b138      	cbz	r0, 8004596 <_vfiprintf_r+0x176>
 8004586:	9b04      	ldr	r3, [sp, #16]
 8004588:	eba0 000a 	sub.w	r0, r0, sl
 800458c:	2240      	movs	r2, #64	@ 0x40
 800458e:	4082      	lsls	r2, r0
 8004590:	4313      	orrs	r3, r2
 8004592:	3401      	adds	r4, #1
 8004594:	9304      	str	r3, [sp, #16]
 8004596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800459a:	4829      	ldr	r0, [pc, #164]	@ (8004640 <_vfiprintf_r+0x220>)
 800459c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045a0:	2206      	movs	r2, #6
 80045a2:	f7fc fd55 	bl	8001050 <memchr>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d03f      	beq.n	800462a <_vfiprintf_r+0x20a>
 80045aa:	4b26      	ldr	r3, [pc, #152]	@ (8004644 <_vfiprintf_r+0x224>)
 80045ac:	bb1b      	cbnz	r3, 80045f6 <_vfiprintf_r+0x1d6>
 80045ae:	9b03      	ldr	r3, [sp, #12]
 80045b0:	3307      	adds	r3, #7
 80045b2:	f023 0307 	bic.w	r3, r3, #7
 80045b6:	3308      	adds	r3, #8
 80045b8:	9303      	str	r3, [sp, #12]
 80045ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045bc:	443b      	add	r3, r7
 80045be:	9309      	str	r3, [sp, #36]	@ 0x24
 80045c0:	e76a      	b.n	8004498 <_vfiprintf_r+0x78>
 80045c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80045c6:	460c      	mov	r4, r1
 80045c8:	2001      	movs	r0, #1
 80045ca:	e7a8      	b.n	800451e <_vfiprintf_r+0xfe>
 80045cc:	2300      	movs	r3, #0
 80045ce:	3401      	adds	r4, #1
 80045d0:	9305      	str	r3, [sp, #20]
 80045d2:	4619      	mov	r1, r3
 80045d4:	f04f 0c0a 	mov.w	ip, #10
 80045d8:	4620      	mov	r0, r4
 80045da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045de:	3a30      	subs	r2, #48	@ 0x30
 80045e0:	2a09      	cmp	r2, #9
 80045e2:	d903      	bls.n	80045ec <_vfiprintf_r+0x1cc>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0c6      	beq.n	8004576 <_vfiprintf_r+0x156>
 80045e8:	9105      	str	r1, [sp, #20]
 80045ea:	e7c4      	b.n	8004576 <_vfiprintf_r+0x156>
 80045ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80045f0:	4604      	mov	r4, r0
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7f0      	b.n	80045d8 <_vfiprintf_r+0x1b8>
 80045f6:	ab03      	add	r3, sp, #12
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	462a      	mov	r2, r5
 80045fc:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <_vfiprintf_r+0x228>)
 80045fe:	a904      	add	r1, sp, #16
 8004600:	4630      	mov	r0, r6
 8004602:	f3af 8000 	nop.w
 8004606:	4607      	mov	r7, r0
 8004608:	1c78      	adds	r0, r7, #1
 800460a:	d1d6      	bne.n	80045ba <_vfiprintf_r+0x19a>
 800460c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800460e:	07d9      	lsls	r1, r3, #31
 8004610:	d405      	bmi.n	800461e <_vfiprintf_r+0x1fe>
 8004612:	89ab      	ldrh	r3, [r5, #12]
 8004614:	059a      	lsls	r2, r3, #22
 8004616:	d402      	bmi.n	800461e <_vfiprintf_r+0x1fe>
 8004618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800461a:	f7ff fddd 	bl	80041d8 <__retarget_lock_release_recursive>
 800461e:	89ab      	ldrh	r3, [r5, #12]
 8004620:	065b      	lsls	r3, r3, #25
 8004622:	f53f af1f 	bmi.w	8004464 <_vfiprintf_r+0x44>
 8004626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004628:	e71e      	b.n	8004468 <_vfiprintf_r+0x48>
 800462a:	ab03      	add	r3, sp, #12
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	462a      	mov	r2, r5
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <_vfiprintf_r+0x228>)
 8004632:	a904      	add	r1, sp, #16
 8004634:	4630      	mov	r0, r6
 8004636:	f000 f879 	bl	800472c <_printf_i>
 800463a:	e7e4      	b.n	8004606 <_vfiprintf_r+0x1e6>
 800463c:	08004da0 	.word	0x08004da0
 8004640:	08004daa 	.word	0x08004daa
 8004644:	00000000 	.word	0x00000000
 8004648:	080043fb 	.word	0x080043fb
 800464c:	08004da6 	.word	0x08004da6

08004650 <_printf_common>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	4616      	mov	r6, r2
 8004656:	4698      	mov	r8, r3
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004660:	4293      	cmp	r3, r2
 8004662:	bfb8      	it	lt
 8004664:	4613      	movlt	r3, r2
 8004666:	6033      	str	r3, [r6, #0]
 8004668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800466c:	4607      	mov	r7, r0
 800466e:	460c      	mov	r4, r1
 8004670:	b10a      	cbz	r2, 8004676 <_printf_common+0x26>
 8004672:	3301      	adds	r3, #1
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0699      	lsls	r1, r3, #26
 800467a:	bf42      	ittt	mi
 800467c:	6833      	ldrmi	r3, [r6, #0]
 800467e:	3302      	addmi	r3, #2
 8004680:	6033      	strmi	r3, [r6, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	f015 0506 	ands.w	r5, r5, #6
 8004688:	d106      	bne.n	8004698 <_printf_common+0x48>
 800468a:	f104 0a19 	add.w	sl, r4, #25
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	6832      	ldr	r2, [r6, #0]
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	42ab      	cmp	r3, r5
 8004696:	dc26      	bgt.n	80046e6 <_printf_common+0x96>
 8004698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	3b00      	subs	r3, #0
 80046a0:	bf18      	it	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	0692      	lsls	r2, r2, #26
 80046a6:	d42b      	bmi.n	8004700 <_printf_common+0xb0>
 80046a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046ac:	4641      	mov	r1, r8
 80046ae:	4638      	mov	r0, r7
 80046b0:	47c8      	blx	r9
 80046b2:	3001      	adds	r0, #1
 80046b4:	d01e      	beq.n	80046f4 <_printf_common+0xa4>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	6922      	ldr	r2, [r4, #16]
 80046ba:	f003 0306 	and.w	r3, r3, #6
 80046be:	2b04      	cmp	r3, #4
 80046c0:	bf02      	ittt	eq
 80046c2:	68e5      	ldreq	r5, [r4, #12]
 80046c4:	6833      	ldreq	r3, [r6, #0]
 80046c6:	1aed      	subeq	r5, r5, r3
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	bf0c      	ite	eq
 80046cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d0:	2500      	movne	r5, #0
 80046d2:	4293      	cmp	r3, r2
 80046d4:	bfc4      	itt	gt
 80046d6:	1a9b      	subgt	r3, r3, r2
 80046d8:	18ed      	addgt	r5, r5, r3
 80046da:	2600      	movs	r6, #0
 80046dc:	341a      	adds	r4, #26
 80046de:	42b5      	cmp	r5, r6
 80046e0:	d11a      	bne.n	8004718 <_printf_common+0xc8>
 80046e2:	2000      	movs	r0, #0
 80046e4:	e008      	b.n	80046f8 <_printf_common+0xa8>
 80046e6:	2301      	movs	r3, #1
 80046e8:	4652      	mov	r2, sl
 80046ea:	4641      	mov	r1, r8
 80046ec:	4638      	mov	r0, r7
 80046ee:	47c8      	blx	r9
 80046f0:	3001      	adds	r0, #1
 80046f2:	d103      	bne.n	80046fc <_printf_common+0xac>
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046fc:	3501      	adds	r5, #1
 80046fe:	e7c6      	b.n	800468e <_printf_common+0x3e>
 8004700:	18e1      	adds	r1, r4, r3
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	2030      	movs	r0, #48	@ 0x30
 8004706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800470a:	4422      	add	r2, r4
 800470c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004714:	3302      	adds	r3, #2
 8004716:	e7c7      	b.n	80046a8 <_printf_common+0x58>
 8004718:	2301      	movs	r3, #1
 800471a:	4622      	mov	r2, r4
 800471c:	4641      	mov	r1, r8
 800471e:	4638      	mov	r0, r7
 8004720:	47c8      	blx	r9
 8004722:	3001      	adds	r0, #1
 8004724:	d0e6      	beq.n	80046f4 <_printf_common+0xa4>
 8004726:	3601      	adds	r6, #1
 8004728:	e7d9      	b.n	80046de <_printf_common+0x8e>
	...

0800472c <_printf_i>:
 800472c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	7e0f      	ldrb	r7, [r1, #24]
 8004732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004734:	2f78      	cmp	r7, #120	@ 0x78
 8004736:	4691      	mov	r9, r2
 8004738:	4680      	mov	r8, r0
 800473a:	460c      	mov	r4, r1
 800473c:	469a      	mov	sl, r3
 800473e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004742:	d807      	bhi.n	8004754 <_printf_i+0x28>
 8004744:	2f62      	cmp	r7, #98	@ 0x62
 8004746:	d80a      	bhi.n	800475e <_printf_i+0x32>
 8004748:	2f00      	cmp	r7, #0
 800474a:	f000 80d2 	beq.w	80048f2 <_printf_i+0x1c6>
 800474e:	2f58      	cmp	r7, #88	@ 0x58
 8004750:	f000 80b9 	beq.w	80048c6 <_printf_i+0x19a>
 8004754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800475c:	e03a      	b.n	80047d4 <_printf_i+0xa8>
 800475e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004762:	2b15      	cmp	r3, #21
 8004764:	d8f6      	bhi.n	8004754 <_printf_i+0x28>
 8004766:	a101      	add	r1, pc, #4	@ (adr r1, 800476c <_printf_i+0x40>)
 8004768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800476c:	080047c5 	.word	0x080047c5
 8004770:	080047d9 	.word	0x080047d9
 8004774:	08004755 	.word	0x08004755
 8004778:	08004755 	.word	0x08004755
 800477c:	08004755 	.word	0x08004755
 8004780:	08004755 	.word	0x08004755
 8004784:	080047d9 	.word	0x080047d9
 8004788:	08004755 	.word	0x08004755
 800478c:	08004755 	.word	0x08004755
 8004790:	08004755 	.word	0x08004755
 8004794:	08004755 	.word	0x08004755
 8004798:	080048d9 	.word	0x080048d9
 800479c:	08004803 	.word	0x08004803
 80047a0:	08004893 	.word	0x08004893
 80047a4:	08004755 	.word	0x08004755
 80047a8:	08004755 	.word	0x08004755
 80047ac:	080048fb 	.word	0x080048fb
 80047b0:	08004755 	.word	0x08004755
 80047b4:	08004803 	.word	0x08004803
 80047b8:	08004755 	.word	0x08004755
 80047bc:	08004755 	.word	0x08004755
 80047c0:	0800489b 	.word	0x0800489b
 80047c4:	6833      	ldr	r3, [r6, #0]
 80047c6:	1d1a      	adds	r2, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6032      	str	r2, [r6, #0]
 80047cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047d4:	2301      	movs	r3, #1
 80047d6:	e09d      	b.n	8004914 <_printf_i+0x1e8>
 80047d8:	6833      	ldr	r3, [r6, #0]
 80047da:	6820      	ldr	r0, [r4, #0]
 80047dc:	1d19      	adds	r1, r3, #4
 80047de:	6031      	str	r1, [r6, #0]
 80047e0:	0606      	lsls	r6, r0, #24
 80047e2:	d501      	bpl.n	80047e8 <_printf_i+0xbc>
 80047e4:	681d      	ldr	r5, [r3, #0]
 80047e6:	e003      	b.n	80047f0 <_printf_i+0xc4>
 80047e8:	0645      	lsls	r5, r0, #25
 80047ea:	d5fb      	bpl.n	80047e4 <_printf_i+0xb8>
 80047ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	da03      	bge.n	80047fc <_printf_i+0xd0>
 80047f4:	232d      	movs	r3, #45	@ 0x2d
 80047f6:	426d      	negs	r5, r5
 80047f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047fc:	4859      	ldr	r0, [pc, #356]	@ (8004964 <_printf_i+0x238>)
 80047fe:	230a      	movs	r3, #10
 8004800:	e011      	b.n	8004826 <_printf_i+0xfa>
 8004802:	6821      	ldr	r1, [r4, #0]
 8004804:	6833      	ldr	r3, [r6, #0]
 8004806:	0608      	lsls	r0, r1, #24
 8004808:	f853 5b04 	ldr.w	r5, [r3], #4
 800480c:	d402      	bmi.n	8004814 <_printf_i+0xe8>
 800480e:	0649      	lsls	r1, r1, #25
 8004810:	bf48      	it	mi
 8004812:	b2ad      	uxthmi	r5, r5
 8004814:	2f6f      	cmp	r7, #111	@ 0x6f
 8004816:	4853      	ldr	r0, [pc, #332]	@ (8004964 <_printf_i+0x238>)
 8004818:	6033      	str	r3, [r6, #0]
 800481a:	bf14      	ite	ne
 800481c:	230a      	movne	r3, #10
 800481e:	2308      	moveq	r3, #8
 8004820:	2100      	movs	r1, #0
 8004822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004826:	6866      	ldr	r6, [r4, #4]
 8004828:	60a6      	str	r6, [r4, #8]
 800482a:	2e00      	cmp	r6, #0
 800482c:	bfa2      	ittt	ge
 800482e:	6821      	ldrge	r1, [r4, #0]
 8004830:	f021 0104 	bicge.w	r1, r1, #4
 8004834:	6021      	strge	r1, [r4, #0]
 8004836:	b90d      	cbnz	r5, 800483c <_printf_i+0x110>
 8004838:	2e00      	cmp	r6, #0
 800483a:	d04b      	beq.n	80048d4 <_printf_i+0x1a8>
 800483c:	4616      	mov	r6, r2
 800483e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004842:	fb03 5711 	mls	r7, r3, r1, r5
 8004846:	5dc7      	ldrb	r7, [r0, r7]
 8004848:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800484c:	462f      	mov	r7, r5
 800484e:	42bb      	cmp	r3, r7
 8004850:	460d      	mov	r5, r1
 8004852:	d9f4      	bls.n	800483e <_printf_i+0x112>
 8004854:	2b08      	cmp	r3, #8
 8004856:	d10b      	bne.n	8004870 <_printf_i+0x144>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	07df      	lsls	r7, r3, #31
 800485c:	d508      	bpl.n	8004870 <_printf_i+0x144>
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	6861      	ldr	r1, [r4, #4]
 8004862:	4299      	cmp	r1, r3
 8004864:	bfde      	ittt	le
 8004866:	2330      	movle	r3, #48	@ 0x30
 8004868:	f806 3c01 	strble.w	r3, [r6, #-1]
 800486c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004870:	1b92      	subs	r2, r2, r6
 8004872:	6122      	str	r2, [r4, #16]
 8004874:	f8cd a000 	str.w	sl, [sp]
 8004878:	464b      	mov	r3, r9
 800487a:	aa03      	add	r2, sp, #12
 800487c:	4621      	mov	r1, r4
 800487e:	4640      	mov	r0, r8
 8004880:	f7ff fee6 	bl	8004650 <_printf_common>
 8004884:	3001      	adds	r0, #1
 8004886:	d14a      	bne.n	800491e <_printf_i+0x1f2>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	b004      	add	sp, #16
 800488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f043 0320 	orr.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	4833      	ldr	r0, [pc, #204]	@ (8004968 <_printf_i+0x23c>)
 800489c:	2778      	movs	r7, #120	@ 0x78
 800489e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	6831      	ldr	r1, [r6, #0]
 80048a6:	061f      	lsls	r7, r3, #24
 80048a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80048ac:	d402      	bmi.n	80048b4 <_printf_i+0x188>
 80048ae:	065f      	lsls	r7, r3, #25
 80048b0:	bf48      	it	mi
 80048b2:	b2ad      	uxthmi	r5, r5
 80048b4:	6031      	str	r1, [r6, #0]
 80048b6:	07d9      	lsls	r1, r3, #31
 80048b8:	bf44      	itt	mi
 80048ba:	f043 0320 	orrmi.w	r3, r3, #32
 80048be:	6023      	strmi	r3, [r4, #0]
 80048c0:	b11d      	cbz	r5, 80048ca <_printf_i+0x19e>
 80048c2:	2310      	movs	r3, #16
 80048c4:	e7ac      	b.n	8004820 <_printf_i+0xf4>
 80048c6:	4827      	ldr	r0, [pc, #156]	@ (8004964 <_printf_i+0x238>)
 80048c8:	e7e9      	b.n	800489e <_printf_i+0x172>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	f023 0320 	bic.w	r3, r3, #32
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	e7f6      	b.n	80048c2 <_printf_i+0x196>
 80048d4:	4616      	mov	r6, r2
 80048d6:	e7bd      	b.n	8004854 <_printf_i+0x128>
 80048d8:	6833      	ldr	r3, [r6, #0]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	6961      	ldr	r1, [r4, #20]
 80048de:	1d18      	adds	r0, r3, #4
 80048e0:	6030      	str	r0, [r6, #0]
 80048e2:	062e      	lsls	r6, r5, #24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	d501      	bpl.n	80048ec <_printf_i+0x1c0>
 80048e8:	6019      	str	r1, [r3, #0]
 80048ea:	e002      	b.n	80048f2 <_printf_i+0x1c6>
 80048ec:	0668      	lsls	r0, r5, #25
 80048ee:	d5fb      	bpl.n	80048e8 <_printf_i+0x1bc>
 80048f0:	8019      	strh	r1, [r3, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	4616      	mov	r6, r2
 80048f8:	e7bc      	b.n	8004874 <_printf_i+0x148>
 80048fa:	6833      	ldr	r3, [r6, #0]
 80048fc:	1d1a      	adds	r2, r3, #4
 80048fe:	6032      	str	r2, [r6, #0]
 8004900:	681e      	ldr	r6, [r3, #0]
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	2100      	movs	r1, #0
 8004906:	4630      	mov	r0, r6
 8004908:	f7fc fba2 	bl	8001050 <memchr>
 800490c:	b108      	cbz	r0, 8004912 <_printf_i+0x1e6>
 800490e:	1b80      	subs	r0, r0, r6
 8004910:	6060      	str	r0, [r4, #4]
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	2300      	movs	r3, #0
 8004918:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800491c:	e7aa      	b.n	8004874 <_printf_i+0x148>
 800491e:	6923      	ldr	r3, [r4, #16]
 8004920:	4632      	mov	r2, r6
 8004922:	4649      	mov	r1, r9
 8004924:	4640      	mov	r0, r8
 8004926:	47d0      	blx	sl
 8004928:	3001      	adds	r0, #1
 800492a:	d0ad      	beq.n	8004888 <_printf_i+0x15c>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	079b      	lsls	r3, r3, #30
 8004930:	d413      	bmi.n	800495a <_printf_i+0x22e>
 8004932:	68e0      	ldr	r0, [r4, #12]
 8004934:	9b03      	ldr	r3, [sp, #12]
 8004936:	4298      	cmp	r0, r3
 8004938:	bfb8      	it	lt
 800493a:	4618      	movlt	r0, r3
 800493c:	e7a6      	b.n	800488c <_printf_i+0x160>
 800493e:	2301      	movs	r3, #1
 8004940:	4632      	mov	r2, r6
 8004942:	4649      	mov	r1, r9
 8004944:	4640      	mov	r0, r8
 8004946:	47d0      	blx	sl
 8004948:	3001      	adds	r0, #1
 800494a:	d09d      	beq.n	8004888 <_printf_i+0x15c>
 800494c:	3501      	adds	r5, #1
 800494e:	68e3      	ldr	r3, [r4, #12]
 8004950:	9903      	ldr	r1, [sp, #12]
 8004952:	1a5b      	subs	r3, r3, r1
 8004954:	42ab      	cmp	r3, r5
 8004956:	dcf2      	bgt.n	800493e <_printf_i+0x212>
 8004958:	e7eb      	b.n	8004932 <_printf_i+0x206>
 800495a:	2500      	movs	r5, #0
 800495c:	f104 0619 	add.w	r6, r4, #25
 8004960:	e7f5      	b.n	800494e <_printf_i+0x222>
 8004962:	bf00      	nop
 8004964:	08004db1 	.word	0x08004db1
 8004968:	08004dc2 	.word	0x08004dc2

0800496c <__sflush_r>:
 800496c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004974:	0716      	lsls	r6, r2, #28
 8004976:	4605      	mov	r5, r0
 8004978:	460c      	mov	r4, r1
 800497a:	d454      	bmi.n	8004a26 <__sflush_r+0xba>
 800497c:	684b      	ldr	r3, [r1, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	dc02      	bgt.n	8004988 <__sflush_r+0x1c>
 8004982:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	dd48      	ble.n	8004a1a <__sflush_r+0xae>
 8004988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800498a:	2e00      	cmp	r6, #0
 800498c:	d045      	beq.n	8004a1a <__sflush_r+0xae>
 800498e:	2300      	movs	r3, #0
 8004990:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004994:	682f      	ldr	r7, [r5, #0]
 8004996:	6a21      	ldr	r1, [r4, #32]
 8004998:	602b      	str	r3, [r5, #0]
 800499a:	d030      	beq.n	80049fe <__sflush_r+0x92>
 800499c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	0759      	lsls	r1, r3, #29
 80049a2:	d505      	bpl.n	80049b0 <__sflush_r+0x44>
 80049a4:	6863      	ldr	r3, [r4, #4]
 80049a6:	1ad2      	subs	r2, r2, r3
 80049a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80049aa:	b10b      	cbz	r3, 80049b0 <__sflush_r+0x44>
 80049ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	2300      	movs	r3, #0
 80049b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80049b4:	6a21      	ldr	r1, [r4, #32]
 80049b6:	4628      	mov	r0, r5
 80049b8:	47b0      	blx	r6
 80049ba:	1c43      	adds	r3, r0, #1
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	d106      	bne.n	80049ce <__sflush_r+0x62>
 80049c0:	6829      	ldr	r1, [r5, #0]
 80049c2:	291d      	cmp	r1, #29
 80049c4:	d82b      	bhi.n	8004a1e <__sflush_r+0xb2>
 80049c6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a70 <__sflush_r+0x104>)
 80049c8:	410a      	asrs	r2, r1
 80049ca:	07d6      	lsls	r6, r2, #31
 80049cc:	d427      	bmi.n	8004a1e <__sflush_r+0xb2>
 80049ce:	2200      	movs	r2, #0
 80049d0:	6062      	str	r2, [r4, #4]
 80049d2:	04d9      	lsls	r1, r3, #19
 80049d4:	6922      	ldr	r2, [r4, #16]
 80049d6:	6022      	str	r2, [r4, #0]
 80049d8:	d504      	bpl.n	80049e4 <__sflush_r+0x78>
 80049da:	1c42      	adds	r2, r0, #1
 80049dc:	d101      	bne.n	80049e2 <__sflush_r+0x76>
 80049de:	682b      	ldr	r3, [r5, #0]
 80049e0:	b903      	cbnz	r3, 80049e4 <__sflush_r+0x78>
 80049e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80049e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049e6:	602f      	str	r7, [r5, #0]
 80049e8:	b1b9      	cbz	r1, 8004a1a <__sflush_r+0xae>
 80049ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049ee:	4299      	cmp	r1, r3
 80049f0:	d002      	beq.n	80049f8 <__sflush_r+0x8c>
 80049f2:	4628      	mov	r0, r5
 80049f4:	f7ff fbf2 	bl	80041dc <_free_r>
 80049f8:	2300      	movs	r3, #0
 80049fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80049fc:	e00d      	b.n	8004a1a <__sflush_r+0xae>
 80049fe:	2301      	movs	r3, #1
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b0      	blx	r6
 8004a04:	4602      	mov	r2, r0
 8004a06:	1c50      	adds	r0, r2, #1
 8004a08:	d1c9      	bne.n	800499e <__sflush_r+0x32>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0c6      	beq.n	800499e <__sflush_r+0x32>
 8004a10:	2b1d      	cmp	r3, #29
 8004a12:	d001      	beq.n	8004a18 <__sflush_r+0xac>
 8004a14:	2b16      	cmp	r3, #22
 8004a16:	d11e      	bne.n	8004a56 <__sflush_r+0xea>
 8004a18:	602f      	str	r7, [r5, #0]
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e022      	b.n	8004a64 <__sflush_r+0xf8>
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a22:	b21b      	sxth	r3, r3
 8004a24:	e01b      	b.n	8004a5e <__sflush_r+0xf2>
 8004a26:	690f      	ldr	r7, [r1, #16]
 8004a28:	2f00      	cmp	r7, #0
 8004a2a:	d0f6      	beq.n	8004a1a <__sflush_r+0xae>
 8004a2c:	0793      	lsls	r3, r2, #30
 8004a2e:	680e      	ldr	r6, [r1, #0]
 8004a30:	bf08      	it	eq
 8004a32:	694b      	ldreq	r3, [r1, #20]
 8004a34:	600f      	str	r7, [r1, #0]
 8004a36:	bf18      	it	ne
 8004a38:	2300      	movne	r3, #0
 8004a3a:	eba6 0807 	sub.w	r8, r6, r7
 8004a3e:	608b      	str	r3, [r1, #8]
 8004a40:	f1b8 0f00 	cmp.w	r8, #0
 8004a44:	dde9      	ble.n	8004a1a <__sflush_r+0xae>
 8004a46:	6a21      	ldr	r1, [r4, #32]
 8004a48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a4a:	4643      	mov	r3, r8
 8004a4c:	463a      	mov	r2, r7
 8004a4e:	4628      	mov	r0, r5
 8004a50:	47b0      	blx	r6
 8004a52:	2800      	cmp	r0, #0
 8004a54:	dc08      	bgt.n	8004a68 <__sflush_r+0xfc>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a5e:	81a3      	strh	r3, [r4, #12]
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a68:	4407      	add	r7, r0
 8004a6a:	eba8 0800 	sub.w	r8, r8, r0
 8004a6e:	e7e7      	b.n	8004a40 <__sflush_r+0xd4>
 8004a70:	dfbffffe 	.word	0xdfbffffe

08004a74 <_fflush_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	690b      	ldr	r3, [r1, #16]
 8004a78:	4605      	mov	r5, r0
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	b913      	cbnz	r3, 8004a84 <_fflush_r+0x10>
 8004a7e:	2500      	movs	r5, #0
 8004a80:	4628      	mov	r0, r5
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	b118      	cbz	r0, 8004a8e <_fflush_r+0x1a>
 8004a86:	6a03      	ldr	r3, [r0, #32]
 8004a88:	b90b      	cbnz	r3, 8004a8e <_fflush_r+0x1a>
 8004a8a:	f7ff fa9f 	bl	8003fcc <__sinit>
 8004a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f3      	beq.n	8004a7e <_fflush_r+0xa>
 8004a96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a98:	07d0      	lsls	r0, r2, #31
 8004a9a:	d404      	bmi.n	8004aa6 <_fflush_r+0x32>
 8004a9c:	0599      	lsls	r1, r3, #22
 8004a9e:	d402      	bmi.n	8004aa6 <_fflush_r+0x32>
 8004aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004aa2:	f7ff fb98 	bl	80041d6 <__retarget_lock_acquire_recursive>
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	f7ff ff5f 	bl	800496c <__sflush_r>
 8004aae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ab0:	07da      	lsls	r2, r3, #31
 8004ab2:	4605      	mov	r5, r0
 8004ab4:	d4e4      	bmi.n	8004a80 <_fflush_r+0xc>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	059b      	lsls	r3, r3, #22
 8004aba:	d4e1      	bmi.n	8004a80 <_fflush_r+0xc>
 8004abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004abe:	f7ff fb8b 	bl	80041d8 <__retarget_lock_release_recursive>
 8004ac2:	e7dd      	b.n	8004a80 <_fflush_r+0xc>

08004ac4 <__swbuf_r>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	460e      	mov	r6, r1
 8004ac8:	4614      	mov	r4, r2
 8004aca:	4605      	mov	r5, r0
 8004acc:	b118      	cbz	r0, 8004ad6 <__swbuf_r+0x12>
 8004ace:	6a03      	ldr	r3, [r0, #32]
 8004ad0:	b90b      	cbnz	r3, 8004ad6 <__swbuf_r+0x12>
 8004ad2:	f7ff fa7b 	bl	8003fcc <__sinit>
 8004ad6:	69a3      	ldr	r3, [r4, #24]
 8004ad8:	60a3      	str	r3, [r4, #8]
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	071a      	lsls	r2, r3, #28
 8004ade:	d501      	bpl.n	8004ae4 <__swbuf_r+0x20>
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	b943      	cbnz	r3, 8004af6 <__swbuf_r+0x32>
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f82a 	bl	8004b40 <__swsetup_r>
 8004aec:	b118      	cbz	r0, 8004af6 <__swbuf_r+0x32>
 8004aee:	f04f 37ff 	mov.w	r7, #4294967295
 8004af2:	4638      	mov	r0, r7
 8004af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	1a98      	subs	r0, r3, r2
 8004afc:	6963      	ldr	r3, [r4, #20]
 8004afe:	b2f6      	uxtb	r6, r6
 8004b00:	4283      	cmp	r3, r0
 8004b02:	4637      	mov	r7, r6
 8004b04:	dc05      	bgt.n	8004b12 <__swbuf_r+0x4e>
 8004b06:	4621      	mov	r1, r4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f7ff ffb3 	bl	8004a74 <_fflush_r>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d1ed      	bne.n	8004aee <__swbuf_r+0x2a>
 8004b12:	68a3      	ldr	r3, [r4, #8]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	60a3      	str	r3, [r4, #8]
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	701e      	strb	r6, [r3, #0]
 8004b20:	6962      	ldr	r2, [r4, #20]
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d004      	beq.n	8004b32 <__swbuf_r+0x6e>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	07db      	lsls	r3, r3, #31
 8004b2c:	d5e1      	bpl.n	8004af2 <__swbuf_r+0x2e>
 8004b2e:	2e0a      	cmp	r6, #10
 8004b30:	d1df      	bne.n	8004af2 <__swbuf_r+0x2e>
 8004b32:	4621      	mov	r1, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	f7ff ff9d 	bl	8004a74 <_fflush_r>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d0d9      	beq.n	8004af2 <__swbuf_r+0x2e>
 8004b3e:	e7d6      	b.n	8004aee <__swbuf_r+0x2a>

08004b40 <__swsetup_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4b29      	ldr	r3, [pc, #164]	@ (8004be8 <__swsetup_r+0xa8>)
 8004b44:	4605      	mov	r5, r0
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	460c      	mov	r4, r1
 8004b4a:	b118      	cbz	r0, 8004b54 <__swsetup_r+0x14>
 8004b4c:	6a03      	ldr	r3, [r0, #32]
 8004b4e:	b90b      	cbnz	r3, 8004b54 <__swsetup_r+0x14>
 8004b50:	f7ff fa3c 	bl	8003fcc <__sinit>
 8004b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b58:	0719      	lsls	r1, r3, #28
 8004b5a:	d422      	bmi.n	8004ba2 <__swsetup_r+0x62>
 8004b5c:	06da      	lsls	r2, r3, #27
 8004b5e:	d407      	bmi.n	8004b70 <__swsetup_r+0x30>
 8004b60:	2209      	movs	r2, #9
 8004b62:	602a      	str	r2, [r5, #0]
 8004b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6e:	e033      	b.n	8004bd8 <__swsetup_r+0x98>
 8004b70:	0758      	lsls	r0, r3, #29
 8004b72:	d512      	bpl.n	8004b9a <__swsetup_r+0x5a>
 8004b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b76:	b141      	cbz	r1, 8004b8a <__swsetup_r+0x4a>
 8004b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b7c:	4299      	cmp	r1, r3
 8004b7e:	d002      	beq.n	8004b86 <__swsetup_r+0x46>
 8004b80:	4628      	mov	r0, r5
 8004b82:	f7ff fb2b 	bl	80041dc <_free_r>
 8004b86:	2300      	movs	r3, #0
 8004b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	2300      	movs	r3, #0
 8004b94:	6063      	str	r3, [r4, #4]
 8004b96:	6923      	ldr	r3, [r4, #16]
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	89a3      	ldrh	r3, [r4, #12]
 8004b9c:	f043 0308 	orr.w	r3, r3, #8
 8004ba0:	81a3      	strh	r3, [r4, #12]
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	b94b      	cbnz	r3, 8004bba <__swsetup_r+0x7a>
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb0:	d003      	beq.n	8004bba <__swsetup_r+0x7a>
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	f000 f84f 	bl	8004c58 <__smakebuf_r>
 8004bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bbe:	f013 0201 	ands.w	r2, r3, #1
 8004bc2:	d00a      	beq.n	8004bda <__swsetup_r+0x9a>
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	60a2      	str	r2, [r4, #8]
 8004bc8:	6962      	ldr	r2, [r4, #20]
 8004bca:	4252      	negs	r2, r2
 8004bcc:	61a2      	str	r2, [r4, #24]
 8004bce:	6922      	ldr	r2, [r4, #16]
 8004bd0:	b942      	cbnz	r2, 8004be4 <__swsetup_r+0xa4>
 8004bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bd6:	d1c5      	bne.n	8004b64 <__swsetup_r+0x24>
 8004bd8:	bd38      	pop	{r3, r4, r5, pc}
 8004bda:	0799      	lsls	r1, r3, #30
 8004bdc:	bf58      	it	pl
 8004bde:	6962      	ldrpl	r2, [r4, #20]
 8004be0:	60a2      	str	r2, [r4, #8]
 8004be2:	e7f4      	b.n	8004bce <__swsetup_r+0x8e>
 8004be4:	2000      	movs	r0, #0
 8004be6:	e7f7      	b.n	8004bd8 <__swsetup_r+0x98>
 8004be8:	20000198 	.word	0x20000198

08004bec <_sbrk_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d06      	ldr	r5, [pc, #24]	@ (8004c08 <_sbrk_r+0x1c>)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	f7fc fe72 	bl	80018e0 <_sbrk>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_sbrk_r+0x1a>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_sbrk_r+0x1a>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	200003d0 	.word	0x200003d0

08004c0c <__swhatbuf_r>:
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	460c      	mov	r4, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	2900      	cmp	r1, #0
 8004c16:	b096      	sub	sp, #88	@ 0x58
 8004c18:	4615      	mov	r5, r2
 8004c1a:	461e      	mov	r6, r3
 8004c1c:	da0d      	bge.n	8004c3a <__swhatbuf_r+0x2e>
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c24:	f04f 0100 	mov.w	r1, #0
 8004c28:	bf14      	ite	ne
 8004c2a:	2340      	movne	r3, #64	@ 0x40
 8004c2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c30:	2000      	movs	r0, #0
 8004c32:	6031      	str	r1, [r6, #0]
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	b016      	add	sp, #88	@ 0x58
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	466a      	mov	r2, sp
 8004c3c:	f000 f848 	bl	8004cd0 <_fstat_r>
 8004c40:	2800      	cmp	r0, #0
 8004c42:	dbec      	blt.n	8004c1e <__swhatbuf_r+0x12>
 8004c44:	9901      	ldr	r1, [sp, #4]
 8004c46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c4e:	4259      	negs	r1, r3
 8004c50:	4159      	adcs	r1, r3
 8004c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c56:	e7eb      	b.n	8004c30 <__swhatbuf_r+0x24>

08004c58 <__smakebuf_r>:
 8004c58:	898b      	ldrh	r3, [r1, #12]
 8004c5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c5c:	079d      	lsls	r5, r3, #30
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460c      	mov	r4, r1
 8004c62:	d507      	bpl.n	8004c74 <__smakebuf_r+0x1c>
 8004c64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	6163      	str	r3, [r4, #20]
 8004c70:	b003      	add	sp, #12
 8004c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c74:	ab01      	add	r3, sp, #4
 8004c76:	466a      	mov	r2, sp
 8004c78:	f7ff ffc8 	bl	8004c0c <__swhatbuf_r>
 8004c7c:	9f00      	ldr	r7, [sp, #0]
 8004c7e:	4605      	mov	r5, r0
 8004c80:	4639      	mov	r1, r7
 8004c82:	4630      	mov	r0, r6
 8004c84:	f7ff fb16 	bl	80042b4 <_malloc_r>
 8004c88:	b948      	cbnz	r0, 8004c9e <__smakebuf_r+0x46>
 8004c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8e:	059a      	lsls	r2, r3, #22
 8004c90:	d4ee      	bmi.n	8004c70 <__smakebuf_r+0x18>
 8004c92:	f023 0303 	bic.w	r3, r3, #3
 8004c96:	f043 0302 	orr.w	r3, r3, #2
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	e7e2      	b.n	8004c64 <__smakebuf_r+0xc>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	6020      	str	r0, [r4, #0]
 8004ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ca6:	81a3      	strh	r3, [r4, #12]
 8004ca8:	9b01      	ldr	r3, [sp, #4]
 8004caa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cae:	b15b      	cbz	r3, 8004cc8 <__smakebuf_r+0x70>
 8004cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 f81d 	bl	8004cf4 <_isatty_r>
 8004cba:	b128      	cbz	r0, 8004cc8 <__smakebuf_r+0x70>
 8004cbc:	89a3      	ldrh	r3, [r4, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	81a3      	strh	r3, [r4, #12]
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	431d      	orrs	r5, r3
 8004ccc:	81a5      	strh	r5, [r4, #12]
 8004cce:	e7cf      	b.n	8004c70 <__smakebuf_r+0x18>

08004cd0 <_fstat_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4d07      	ldr	r5, [pc, #28]	@ (8004cf0 <_fstat_r+0x20>)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	f7fc fdd7 	bl	8001890 <_fstat>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	d102      	bne.n	8004cec <_fstat_r+0x1c>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	b103      	cbz	r3, 8004cec <_fstat_r+0x1c>
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	bd38      	pop	{r3, r4, r5, pc}
 8004cee:	bf00      	nop
 8004cf0:	200003d0 	.word	0x200003d0

08004cf4 <_isatty_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4d06      	ldr	r5, [pc, #24]	@ (8004d10 <_isatty_r+0x1c>)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	4608      	mov	r0, r1
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	f7fc fdd6 	bl	80018b0 <_isatty>
 8004d04:	1c43      	adds	r3, r0, #1
 8004d06:	d102      	bne.n	8004d0e <_isatty_r+0x1a>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	b103      	cbz	r3, 8004d0e <_isatty_r+0x1a>
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
 8004d10:	200003d0 	.word	0x200003d0

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	bf00      	nop
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	bf00      	nop
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr

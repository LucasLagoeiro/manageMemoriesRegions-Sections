
MemoryAndSections.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .myBufBlockRAM 00000080  20000100  20000100  00007100  2**2
                  ALLOC
  2 .myBufBlockFLASH 0000000a  08001000  08001000  00002000  2**2
                  ALLOC
  3 .myBackUpRAM  0000000c  20001000  20001000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .text         00003e2c  08001010  08001010  00002010  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .mysection    0000000a  08018000  08018000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .rodata       000000d4  08004e3c  08004e3c  00005e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08004f10  08004f10  0000800c  2**0
                  CONTENTS
  8 .ARM          00000008  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08004f18  08004f18  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000004  08004f18  08004f18  00005f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .fini_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .data         00000068  20000180  08004f20  00006180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000001f8  200001e8  08004f88  000061e8  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  200003e0  08004f88  000063e0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 16 .debug_info   0000b6d2  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00001bf7  00000000  00000000  0001370e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000a10  00000000  00000000  00015308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000007a3  00000000  00000000  00015d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000227ed  00000000  00000000  000164bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0000be22  00000000  00000000  00038ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000cf267  00000000  00000000  00044aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  00113d31  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00002f9c  00000000  00000000  00113d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000078  00000000  00000000  00116d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08001010 <__do_global_dtors_aux>:
 8001010:	b510      	push	{r4, lr}
 8001012:	4c05      	ldr	r4, [pc, #20]	@ (8001028 <__do_global_dtors_aux+0x18>)
 8001014:	7823      	ldrb	r3, [r4, #0]
 8001016:	b933      	cbnz	r3, 8001026 <__do_global_dtors_aux+0x16>
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <__do_global_dtors_aux+0x1c>)
 800101a:	b113      	cbz	r3, 8001022 <__do_global_dtors_aux+0x12>
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <__do_global_dtors_aux+0x20>)
 800101e:	f3af 8000 	nop.w
 8001022:	2301      	movs	r3, #1
 8001024:	7023      	strb	r3, [r4, #0]
 8001026:	bd10      	pop	{r4, pc}
 8001028:	200001e8 	.word	0x200001e8
 800102c:	00000000 	.word	0x00000000
 8001030:	08004e24 	.word	0x08004e24

08001034 <frame_dummy>:
 8001034:	b508      	push	{r3, lr}
 8001036:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <frame_dummy+0x10>)
 8001038:	b11b      	cbz	r3, 8001042 <frame_dummy+0xe>
 800103a:	4903      	ldr	r1, [pc, #12]	@ (8001048 <frame_dummy+0x14>)
 800103c:	4803      	ldr	r0, [pc, #12]	@ (800104c <frame_dummy+0x18>)
 800103e:	f3af 8000 	nop.w
 8001042:	bd08      	pop	{r3, pc}
 8001044:	00000000 	.word	0x00000000
 8001048:	200001ec 	.word	0x200001ec
 800104c:	08004e24 	.word	0x08004e24

08001050 <memchr>:
 8001050:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8001054:	2a10      	cmp	r2, #16
 8001056:	db2b      	blt.n	80010b0 <memchr+0x60>
 8001058:	f010 0f07 	tst.w	r0, #7
 800105c:	d008      	beq.n	8001070 <memchr+0x20>
 800105e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001062:	3a01      	subs	r2, #1
 8001064:	428b      	cmp	r3, r1
 8001066:	d02d      	beq.n	80010c4 <memchr+0x74>
 8001068:	f010 0f07 	tst.w	r0, #7
 800106c:	b342      	cbz	r2, 80010c0 <memchr+0x70>
 800106e:	d1f6      	bne.n	800105e <memchr+0xe>
 8001070:	b4f0      	push	{r4, r5, r6, r7}
 8001072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800107a:	f022 0407 	bic.w	r4, r2, #7
 800107e:	f07f 0700 	mvns.w	r7, #0
 8001082:	2300      	movs	r3, #0
 8001084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001088:	3c08      	subs	r4, #8
 800108a:	ea85 0501 	eor.w	r5, r5, r1
 800108e:	ea86 0601 	eor.w	r6, r6, r1
 8001092:	fa85 f547 	uadd8	r5, r5, r7
 8001096:	faa3 f587 	sel	r5, r3, r7
 800109a:	fa86 f647 	uadd8	r6, r6, r7
 800109e:	faa5 f687 	sel	r6, r5, r7
 80010a2:	b98e      	cbnz	r6, 80010c8 <memchr+0x78>
 80010a4:	d1ee      	bne.n	8001084 <memchr+0x34>
 80010a6:	bcf0      	pop	{r4, r5, r6, r7}
 80010a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80010ac:	f002 0207 	and.w	r2, r2, #7
 80010b0:	b132      	cbz	r2, 80010c0 <memchr+0x70>
 80010b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80010b6:	3a01      	subs	r2, #1
 80010b8:	ea83 0301 	eor.w	r3, r3, r1
 80010bc:	b113      	cbz	r3, 80010c4 <memchr+0x74>
 80010be:	d1f8      	bne.n	80010b2 <memchr+0x62>
 80010c0:	2000      	movs	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	3801      	subs	r0, #1
 80010c6:	4770      	bx	lr
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	bf06      	itte	eq
 80010cc:	4635      	moveq	r5, r6
 80010ce:	3803      	subeq	r0, #3
 80010d0:	3807      	subne	r0, #7
 80010d2:	f015 0f01 	tst.w	r5, #1
 80010d6:	d107      	bne.n	80010e8 <memchr+0x98>
 80010d8:	3001      	adds	r0, #1
 80010da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80010de:	bf02      	ittt	eq
 80010e0:	3001      	addeq	r0, #1
 80010e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80010e6:	3001      	addeq	r0, #1
 80010e8:	bcf0      	pop	{r4, r5, r6, r7}
 80010ea:	3801      	subs	r0, #1
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_uldivmod>:
 80010f0:	b953      	cbnz	r3, 8001108 <__aeabi_uldivmod+0x18>
 80010f2:	b94a      	cbnz	r2, 8001108 <__aeabi_uldivmod+0x18>
 80010f4:	2900      	cmp	r1, #0
 80010f6:	bf08      	it	eq
 80010f8:	2800      	cmpeq	r0, #0
 80010fa:	bf1c      	itt	ne
 80010fc:	f04f 31ff 	movne.w	r1, #4294967295
 8001100:	f04f 30ff 	movne.w	r0, #4294967295
 8001104:	f000 b96a 	b.w	80013dc <__aeabi_idiv0>
 8001108:	f1ad 0c08 	sub.w	ip, sp, #8
 800110c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001110:	f000 f806 	bl	8001120 <__udivmoddi4>
 8001114:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800111c:	b004      	add	sp, #16
 800111e:	4770      	bx	lr

08001120 <__udivmoddi4>:
 8001120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001124:	9d08      	ldr	r5, [sp, #32]
 8001126:	460c      	mov	r4, r1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d14e      	bne.n	80011ca <__udivmoddi4+0xaa>
 800112c:	4694      	mov	ip, r2
 800112e:	458c      	cmp	ip, r1
 8001130:	4686      	mov	lr, r0
 8001132:	fab2 f282 	clz	r2, r2
 8001136:	d962      	bls.n	80011fe <__udivmoddi4+0xde>
 8001138:	b14a      	cbz	r2, 800114e <__udivmoddi4+0x2e>
 800113a:	f1c2 0320 	rsb	r3, r2, #32
 800113e:	4091      	lsls	r1, r2
 8001140:	fa20 f303 	lsr.w	r3, r0, r3
 8001144:	fa0c fc02 	lsl.w	ip, ip, r2
 8001148:	4319      	orrs	r1, r3
 800114a:	fa00 fe02 	lsl.w	lr, r0, r2
 800114e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001152:	fa1f f68c 	uxth.w	r6, ip
 8001156:	fbb1 f4f7 	udiv	r4, r1, r7
 800115a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800115e:	fb07 1114 	mls	r1, r7, r4, r1
 8001162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001166:	fb04 f106 	mul.w	r1, r4, r6
 800116a:	4299      	cmp	r1, r3
 800116c:	d90a      	bls.n	8001184 <__udivmoddi4+0x64>
 800116e:	eb1c 0303 	adds.w	r3, ip, r3
 8001172:	f104 30ff 	add.w	r0, r4, #4294967295
 8001176:	f080 8112 	bcs.w	800139e <__udivmoddi4+0x27e>
 800117a:	4299      	cmp	r1, r3
 800117c:	f240 810f 	bls.w	800139e <__udivmoddi4+0x27e>
 8001180:	3c02      	subs	r4, #2
 8001182:	4463      	add	r3, ip
 8001184:	1a59      	subs	r1, r3, r1
 8001186:	fa1f f38e 	uxth.w	r3, lr
 800118a:	fbb1 f0f7 	udiv	r0, r1, r7
 800118e:	fb07 1110 	mls	r1, r7, r0, r1
 8001192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001196:	fb00 f606 	mul.w	r6, r0, r6
 800119a:	429e      	cmp	r6, r3
 800119c:	d90a      	bls.n	80011b4 <__udivmoddi4+0x94>
 800119e:	eb1c 0303 	adds.w	r3, ip, r3
 80011a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80011a6:	f080 80fc 	bcs.w	80013a2 <__udivmoddi4+0x282>
 80011aa:	429e      	cmp	r6, r3
 80011ac:	f240 80f9 	bls.w	80013a2 <__udivmoddi4+0x282>
 80011b0:	4463      	add	r3, ip
 80011b2:	3802      	subs	r0, #2
 80011b4:	1b9b      	subs	r3, r3, r6
 80011b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011ba:	2100      	movs	r1, #0
 80011bc:	b11d      	cbz	r5, 80011c6 <__udivmoddi4+0xa6>
 80011be:	40d3      	lsrs	r3, r2
 80011c0:	2200      	movs	r2, #0
 80011c2:	e9c5 3200 	strd	r3, r2, [r5]
 80011c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ca:	428b      	cmp	r3, r1
 80011cc:	d905      	bls.n	80011da <__udivmoddi4+0xba>
 80011ce:	b10d      	cbz	r5, 80011d4 <__udivmoddi4+0xb4>
 80011d0:	e9c5 0100 	strd	r0, r1, [r5]
 80011d4:	2100      	movs	r1, #0
 80011d6:	4608      	mov	r0, r1
 80011d8:	e7f5      	b.n	80011c6 <__udivmoddi4+0xa6>
 80011da:	fab3 f183 	clz	r1, r3
 80011de:	2900      	cmp	r1, #0
 80011e0:	d146      	bne.n	8001270 <__udivmoddi4+0x150>
 80011e2:	42a3      	cmp	r3, r4
 80011e4:	d302      	bcc.n	80011ec <__udivmoddi4+0xcc>
 80011e6:	4290      	cmp	r0, r2
 80011e8:	f0c0 80f0 	bcc.w	80013cc <__udivmoddi4+0x2ac>
 80011ec:	1a86      	subs	r6, r0, r2
 80011ee:	eb64 0303 	sbc.w	r3, r4, r3
 80011f2:	2001      	movs	r0, #1
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d0e6      	beq.n	80011c6 <__udivmoddi4+0xa6>
 80011f8:	e9c5 6300 	strd	r6, r3, [r5]
 80011fc:	e7e3      	b.n	80011c6 <__udivmoddi4+0xa6>
 80011fe:	2a00      	cmp	r2, #0
 8001200:	f040 8090 	bne.w	8001324 <__udivmoddi4+0x204>
 8001204:	eba1 040c 	sub.w	r4, r1, ip
 8001208:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800120c:	fa1f f78c 	uxth.w	r7, ip
 8001210:	2101      	movs	r1, #1
 8001212:	fbb4 f6f8 	udiv	r6, r4, r8
 8001216:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800121a:	fb08 4416 	mls	r4, r8, r6, r4
 800121e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001222:	fb07 f006 	mul.w	r0, r7, r6
 8001226:	4298      	cmp	r0, r3
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x11c>
 800122a:	eb1c 0303 	adds.w	r3, ip, r3
 800122e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001232:	d202      	bcs.n	800123a <__udivmoddi4+0x11a>
 8001234:	4298      	cmp	r0, r3
 8001236:	f200 80cd 	bhi.w	80013d4 <__udivmoddi4+0x2b4>
 800123a:	4626      	mov	r6, r4
 800123c:	1a1c      	subs	r4, r3, r0
 800123e:	fa1f f38e 	uxth.w	r3, lr
 8001242:	fbb4 f0f8 	udiv	r0, r4, r8
 8001246:	fb08 4410 	mls	r4, r8, r0, r4
 800124a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800124e:	fb00 f707 	mul.w	r7, r0, r7
 8001252:	429f      	cmp	r7, r3
 8001254:	d908      	bls.n	8001268 <__udivmoddi4+0x148>
 8001256:	eb1c 0303 	adds.w	r3, ip, r3
 800125a:	f100 34ff 	add.w	r4, r0, #4294967295
 800125e:	d202      	bcs.n	8001266 <__udivmoddi4+0x146>
 8001260:	429f      	cmp	r7, r3
 8001262:	f200 80b0 	bhi.w	80013c6 <__udivmoddi4+0x2a6>
 8001266:	4620      	mov	r0, r4
 8001268:	1bdb      	subs	r3, r3, r7
 800126a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800126e:	e7a5      	b.n	80011bc <__udivmoddi4+0x9c>
 8001270:	f1c1 0620 	rsb	r6, r1, #32
 8001274:	408b      	lsls	r3, r1
 8001276:	fa22 f706 	lsr.w	r7, r2, r6
 800127a:	431f      	orrs	r7, r3
 800127c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001280:	fa04 f301 	lsl.w	r3, r4, r1
 8001284:	ea43 030c 	orr.w	r3, r3, ip
 8001288:	40f4      	lsrs	r4, r6
 800128a:	fa00 f801 	lsl.w	r8, r0, r1
 800128e:	0c38      	lsrs	r0, r7, #16
 8001290:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001294:	fbb4 fef0 	udiv	lr, r4, r0
 8001298:	fa1f fc87 	uxth.w	ip, r7
 800129c:	fb00 441e 	mls	r4, r0, lr, r4
 80012a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012a4:	fb0e f90c 	mul.w	r9, lr, ip
 80012a8:	45a1      	cmp	r9, r4
 80012aa:	fa02 f201 	lsl.w	r2, r2, r1
 80012ae:	d90a      	bls.n	80012c6 <__udivmoddi4+0x1a6>
 80012b0:	193c      	adds	r4, r7, r4
 80012b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80012b6:	f080 8084 	bcs.w	80013c2 <__udivmoddi4+0x2a2>
 80012ba:	45a1      	cmp	r9, r4
 80012bc:	f240 8081 	bls.w	80013c2 <__udivmoddi4+0x2a2>
 80012c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80012c4:	443c      	add	r4, r7
 80012c6:	eba4 0409 	sub.w	r4, r4, r9
 80012ca:	fa1f f983 	uxth.w	r9, r3
 80012ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80012d2:	fb00 4413 	mls	r4, r0, r3, r4
 80012d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80012da:	fb03 fc0c 	mul.w	ip, r3, ip
 80012de:	45a4      	cmp	ip, r4
 80012e0:	d907      	bls.n	80012f2 <__udivmoddi4+0x1d2>
 80012e2:	193c      	adds	r4, r7, r4
 80012e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80012e8:	d267      	bcs.n	80013ba <__udivmoddi4+0x29a>
 80012ea:	45a4      	cmp	ip, r4
 80012ec:	d965      	bls.n	80013ba <__udivmoddi4+0x29a>
 80012ee:	3b02      	subs	r3, #2
 80012f0:	443c      	add	r4, r7
 80012f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80012f6:	fba0 9302 	umull	r9, r3, r0, r2
 80012fa:	eba4 040c 	sub.w	r4, r4, ip
 80012fe:	429c      	cmp	r4, r3
 8001300:	46ce      	mov	lr, r9
 8001302:	469c      	mov	ip, r3
 8001304:	d351      	bcc.n	80013aa <__udivmoddi4+0x28a>
 8001306:	d04e      	beq.n	80013a6 <__udivmoddi4+0x286>
 8001308:	b155      	cbz	r5, 8001320 <__udivmoddi4+0x200>
 800130a:	ebb8 030e 	subs.w	r3, r8, lr
 800130e:	eb64 040c 	sbc.w	r4, r4, ip
 8001312:	fa04 f606 	lsl.w	r6, r4, r6
 8001316:	40cb      	lsrs	r3, r1
 8001318:	431e      	orrs	r6, r3
 800131a:	40cc      	lsrs	r4, r1
 800131c:	e9c5 6400 	strd	r6, r4, [r5]
 8001320:	2100      	movs	r1, #0
 8001322:	e750      	b.n	80011c6 <__udivmoddi4+0xa6>
 8001324:	f1c2 0320 	rsb	r3, r2, #32
 8001328:	fa20 f103 	lsr.w	r1, r0, r3
 800132c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001330:	fa24 f303 	lsr.w	r3, r4, r3
 8001334:	4094      	lsls	r4, r2
 8001336:	430c      	orrs	r4, r1
 8001338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800133c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001340:	fa1f f78c 	uxth.w	r7, ip
 8001344:	fbb3 f0f8 	udiv	r0, r3, r8
 8001348:	fb08 3110 	mls	r1, r8, r0, r3
 800134c:	0c23      	lsrs	r3, r4, #16
 800134e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001352:	fb00 f107 	mul.w	r1, r0, r7
 8001356:	4299      	cmp	r1, r3
 8001358:	d908      	bls.n	800136c <__udivmoddi4+0x24c>
 800135a:	eb1c 0303 	adds.w	r3, ip, r3
 800135e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001362:	d22c      	bcs.n	80013be <__udivmoddi4+0x29e>
 8001364:	4299      	cmp	r1, r3
 8001366:	d92a      	bls.n	80013be <__udivmoddi4+0x29e>
 8001368:	3802      	subs	r0, #2
 800136a:	4463      	add	r3, ip
 800136c:	1a5b      	subs	r3, r3, r1
 800136e:	b2a4      	uxth	r4, r4
 8001370:	fbb3 f1f8 	udiv	r1, r3, r8
 8001374:	fb08 3311 	mls	r3, r8, r1, r3
 8001378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800137c:	fb01 f307 	mul.w	r3, r1, r7
 8001380:	42a3      	cmp	r3, r4
 8001382:	d908      	bls.n	8001396 <__udivmoddi4+0x276>
 8001384:	eb1c 0404 	adds.w	r4, ip, r4
 8001388:	f101 36ff 	add.w	r6, r1, #4294967295
 800138c:	d213      	bcs.n	80013b6 <__udivmoddi4+0x296>
 800138e:	42a3      	cmp	r3, r4
 8001390:	d911      	bls.n	80013b6 <__udivmoddi4+0x296>
 8001392:	3902      	subs	r1, #2
 8001394:	4464      	add	r4, ip
 8001396:	1ae4      	subs	r4, r4, r3
 8001398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800139c:	e739      	b.n	8001212 <__udivmoddi4+0xf2>
 800139e:	4604      	mov	r4, r0
 80013a0:	e6f0      	b.n	8001184 <__udivmoddi4+0x64>
 80013a2:	4608      	mov	r0, r1
 80013a4:	e706      	b.n	80011b4 <__udivmoddi4+0x94>
 80013a6:	45c8      	cmp	r8, r9
 80013a8:	d2ae      	bcs.n	8001308 <__udivmoddi4+0x1e8>
 80013aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80013ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80013b2:	3801      	subs	r0, #1
 80013b4:	e7a8      	b.n	8001308 <__udivmoddi4+0x1e8>
 80013b6:	4631      	mov	r1, r6
 80013b8:	e7ed      	b.n	8001396 <__udivmoddi4+0x276>
 80013ba:	4603      	mov	r3, r0
 80013bc:	e799      	b.n	80012f2 <__udivmoddi4+0x1d2>
 80013be:	4630      	mov	r0, r6
 80013c0:	e7d4      	b.n	800136c <__udivmoddi4+0x24c>
 80013c2:	46d6      	mov	lr, sl
 80013c4:	e77f      	b.n	80012c6 <__udivmoddi4+0x1a6>
 80013c6:	4463      	add	r3, ip
 80013c8:	3802      	subs	r0, #2
 80013ca:	e74d      	b.n	8001268 <__udivmoddi4+0x148>
 80013cc:	4606      	mov	r6, r0
 80013ce:	4623      	mov	r3, r4
 80013d0:	4608      	mov	r0, r1
 80013d2:	e70f      	b.n	80011f4 <__udivmoddi4+0xd4>
 80013d4:	3e02      	subs	r6, #2
 80013d6:	4463      	add	r3, ip
 80013d8:	e730      	b.n	800123c <__udivmoddi4+0x11c>
 80013da:	bf00      	nop

080013dc <__aeabi_idiv0>:
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop

080013e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013e4:	f3bf 8f4f 	dsb	sy
}
 80013e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <__NVIC_SystemReset+0x24>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013f2:	4904      	ldr	r1, [pc, #16]	@ (8001404 <__NVIC_SystemReset+0x24>)
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_SystemReset+0x28>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy
}
 80013fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <__NVIC_SystemReset+0x20>
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	05fa0004 	.word	0x05fa0004

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f000 fb01 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f86b 	bl	80014f0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b2f      	ldr	r3, [pc, #188]	@ (80014d8 <main+0xcc>)
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	4a2e      	ldr	r2, [pc, #184]	@ (80014d8 <main+0xcc>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	@ 0x58
 8001426:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <main+0xcc>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
  HAL_PWR_EnableBkUpAccess();
 8001432:	f000 fde5 	bl	8002000 <HAL_PWR_EnableBkUpAccess>

  // Wait for Backup domain Write protection disable
  uint32_t tickstart = HAL_GetTick();
 8001436:	f000 fb5f 	bl	8001af8 <HAL_GetTick>
 800143a:	6078      	str	r0, [r7, #4]
  while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800143c:	e008      	b.n	8001450 <main+0x44>
  {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800143e:	f000 fb5b 	bl	8001af8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <main+0x44>
      {
          Error_Handler();
 800144c:	f000 f94a 	bl	80016e4 <Error_Handler>
  while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <main+0xd0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <main+0x32>
      }
  }

  // Select the RTC clock source (LSE, LSI, or HSE)
  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE);
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <main+0xcc>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001462:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001466:	4a1c      	ldr	r2, [pc, #112]	@ (80014d8 <main+0xcc>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  // Enable the RTC clock
  __HAL_RCC_RTC_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <main+0xcc>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001476:	4a18      	ldr	r2, [pc, #96]	@ (80014d8 <main+0xcc>)
 8001478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800147c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  //Mechanism to manage and validate the data stored in the backup RAM.
  if((u8_variable[0] % 0x10) != 0){
 8001480:	4b17      	ldr	r3, [pc, #92]	@ (80014e0 <main+0xd4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <main+0x90>
	  u8_variable[0] = 0x00;
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <main+0xd4>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	  u16_variable = 0x00;
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <main+0xd8>)
 8001496:	2200      	movs	r2, #0
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	e005      	b.n	80014a8 <main+0x9c>
  }
  else{
	  u16_variable += 1;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <main+0xd8>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <main+0xd8>)
 80014a6:	801a      	strh	r2, [r3, #0]
  }

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a8:	f000 f8a4 	bl	80015f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014ac:	f000 f872 	bl	8001594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if (u16_variable == 0x00){
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <main+0xd8>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <main+0xbc>
	  printf("I will add 0x10 in u8_variable and reset\r\n");
 80014b8:	480b      	ldr	r0, [pc, #44]	@ (80014e8 <main+0xdc>)
 80014ba:	f002 fe4f 	bl	800415c <puts>
	  u8_variable[0] = 0x10;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <main+0xd4>)
 80014c0:	2210      	movs	r2, #16
 80014c2:	701a      	strb	r2, [r3, #0]
	  // Simulate a system reset
	  NVIC_SystemReset();
 80014c4:	f7ff ff8c 	bl	80013e0 <__NVIC_SystemReset>
  }
  else
	  printf("Variable in BackUpRAM: %d\r\n ", u8_variable[0]);
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <main+0xd4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	@ (80014ec <main+0xe0>)
 80014d0:	f002 fddc 	bl	800408c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <main+0xc8>
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40007000 	.word	0x40007000
 80014e0:	20001000 	.word	0x20001000
 80014e4:	2000100a 	.word	0x2000100a
 80014e8:	08004e3c 	.word	0x08004e3c
 80014ec:	08004e68 	.word	0x08004e68

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b096      	sub	sp, #88	@ 0x58
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	2244      	movs	r2, #68	@ 0x44
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 ff0c 	bl	800431c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001512:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001516:	f000 fd91 	bl	800203c <HAL_PWREx_ControlVoltageScaling>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001520:	f000 f8e0 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001524:	2302      	movs	r3, #2
 8001526:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800152c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800152e:	2340      	movs	r3, #64	@ 0x40
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001536:	2302      	movs	r3, #2
 8001538:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800153e:	230a      	movs	r3, #10
 8001540:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001542:	2307      	movs	r3, #7
 8001544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001546:	2302      	movs	r3, #2
 8001548:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154a:	2302      	movs	r3, #2
 800154c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fdc8 	bl	80020e8 <HAL_RCC_OscConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800155e:	f000 f8c1 	bl	80016e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001562:	230f      	movs	r3, #15
 8001564:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001566:	2303      	movs	r3, #3
 8001568:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	2104      	movs	r1, #4
 800157a:	4618      	mov	r0, r3
 800157c:	f001 f9c8 	bl	8002910 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001586:	f000 f8ad 	bl	80016e4 <Error_Handler>
  }
}
 800158a:	bf00      	nop
 800158c:	3758      	adds	r7, #88	@ 0x58
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	@ (80015f0 <MX_USART2_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015d8:	f001 ff1c 	bl	8003414 <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f87f 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000204 	.word	0x20000204
 80015f0:	40004400 	.word	0x40004400

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 800160c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800160e:	4a2a      	ldr	r2, [pc, #168]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001622:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001626:	4a24      	ldr	r2, [pc, #144]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800162c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	4a18      	ldr	r2, [pc, #96]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <MX_GPIO_Init+0xc4>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	2120      	movs	r1, #32
 800166e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001672:	f000 fcad 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800167c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	480b      	ldr	r0, [pc, #44]	@ (80016bc <MX_GPIO_Init+0xc8>)
 800168e:	f000 fb25 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001692:	2320      	movs	r3, #32
 8001694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ac:	f000 fb16 	bl	8001cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	@ 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	48000800 	.word	0x48000800

080016c0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80016c8:	1d39      	adds	r1, r7, #4
 80016ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016ce:	2201      	movs	r2, #1
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <__io_putchar+0x20>)
 80016d2:	f001 feed 	bl	80034b0 <HAL_UART_Transmit>

  return ch;
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000204 	.word	0x20000204

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printf("Error\r\n ");
 80016e8:	4803      	ldr	r0, [pc, #12]	@ (80016f8 <Error_Handler+0x14>)
 80016ea:	f002 fccf 	bl	800408c <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 80016ee:	b672      	cpsid	i
}
 80016f0:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f2:	bf00      	nop
 80016f4:	e7fd      	b.n	80016f2 <Error_Handler+0xe>
 80016f6:	bf00      	nop
 80016f8:	08004e88 	.word	0x08004e88

080016fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001706:	4a0e      	ldr	r2, [pc, #56]	@ (8001740 <HAL_MspInit+0x44>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6613      	str	r3, [r2, #96]	@ 0x60
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <HAL_MspInit+0x44>)
 8001710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_MspInit+0x44>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001724:	6593      	str	r3, [r2, #88]	@ 0x58
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_MspInit+0x44>)
 8001728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0a4      	sub	sp, #144	@ 0x90
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2268      	movs	r2, #104	@ 0x68
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fdd9 	bl	800431c <memset>
  if(huart->Instance==USART2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <HAL_UART_MspInit+0xb0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d13a      	bne.n	80017ea <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001774:	2302      	movs	r3, #2
 8001776:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001778:	2300      	movs	r3, #0
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fae9 	bl	8002d58 <HAL_RCCEx_PeriphCLKConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800178c:	f7ff ffaa 	bl	80016e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001794:	4a18      	ldr	r2, [pc, #96]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 8001796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179a:	6593      	str	r3, [r2, #88]	@ 0x58
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 80017aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b4:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_UART_MspInit+0xb4>)
 80017b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017c0:	230c      	movs	r3, #12
 80017c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d6:	2307      	movs	r3, #7
 80017d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e6:	f000 fa79 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80017ea:	bf00      	nop
 80017ec:	3790      	adds	r7, #144	@ 0x90
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40004400 	.word	0x40004400
 80017f8:	40021000 	.word	0x40021000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <NMI_Handler+0x4>

08001804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <MemManage_Handler+0x4>

08001814 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <UsageFault_Handler+0x4>

08001824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001852:	f000 f93d 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e00a      	b.n	8001882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186c:	f3af 8000 	nop.w
 8001870:	4601      	mov	r1, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	b2ca      	uxtb	r2, r1
 800187a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbf0      	blt.n	800186c <_read+0x12>
  }

  return len;
 800188a:	687b      	ldr	r3, [r7, #4]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e009      	b.n	80018ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	60ba      	str	r2, [r7, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff06 	bl	80016c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf1      	blt.n	80018a6 <_write+0x12>
  }
  return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_close>:

int _close(int file)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f4:	605a      	str	r2, [r3, #4]
  return 0;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_isatty>:

int _isatty(int file)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	@ (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f002 fd28 	bl	80043b8 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20026000 	.word	0x20026000
 8001994:	00000400 	.word	0x00000400
 8001998:	2000028c 	.word	0x2000028c
 800199c:	200003e0 	.word	0x200003e0

080019a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c8:	f7ff ffea 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <LoopForever+0xe>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a10 <LoopForever+0x16>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019f2:	f002 fce7 	bl	80043c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f6:	f7ff fd09 	bl	800140c <main>

080019fa <LoopForever>:

LoopForever:
    b LoopForever
 80019fa:	e7fe      	b.n	80019fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019fc:	20026000 	.word	0x20026000
  ldr r0, =_sdata
 8001a00:	20000180 	.word	0x20000180
  ldr r1, =_edata
 8001a04:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a08:	08004f20 	.word	0x08004f20
  ldr r2, =_sbss
 8001a0c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a10:	200003e0 	.word	0x200003e0

08001a14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC1_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_Init+0x3c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0b      	ldr	r2, [pc, #44]	@ (8001a54 <HAL_Init+0x3c>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a2e:	2003      	movs	r0, #3
 8001a30:	f000 f920 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f80f 	bl	8001a58 <HAL_InitTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	e001      	b.n	8001a4a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a46:	f7ff fe59 	bl	80016fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_InitTick+0x6c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <HAL_InitTick+0x70>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_InitTick+0x6c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f91d 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10f      	bne.n	8001aae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d809      	bhi.n	8001aa8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f8f5 	bl	8001c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_InitTick+0x74>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e007      	b.n	8001ab8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e004      	b.n	8001ab8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e001      	b.n	8001ab8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000188 	.word	0x20000188
 8001ac8:	20000180 	.word	0x20000180
 8001acc:	20000184 	.word	0x20000184

08001ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_IncTick+0x20>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_IncTick+0x24>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_IncTick+0x24>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000188 	.word	0x20000188
 8001af4:	20000290 	.word	0x20000290

08001af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return uwTick;
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <HAL_GetTick+0x14>)
 8001afe:	681b      	ldr	r3, [r3, #0]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000290 	.word	0x20000290

08001b10 <__NVIC_SetPriorityGrouping>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff47 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff5c 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffb0 	bl	8001c30 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e154      	b.n	8001f96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8146 	beq.w	8001f90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <HAL_GPIO_Init+0x40>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d130      	bne.n	8001d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d52:	2201      	movs	r2, #1
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 0201 	and.w	r2, r3, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80a0 	beq.w	8001f90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e54:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5c:	4b55      	ldr	r3, [pc, #340]	@ (8001fb4 <HAL_GPIO_Init+0x2d8>)
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e68:	4a53      	ldr	r2, [pc, #332]	@ (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e92:	d019      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a49      	ldr	r2, [pc, #292]	@ (8001fbc <HAL_GPIO_Init+0x2e0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a48      	ldr	r2, [pc, #288]	@ (8001fc0 <HAL_GPIO_Init+0x2e4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a47      	ldr	r2, [pc, #284]	@ (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a46      	ldr	r2, [pc, #280]	@ (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_Init+0x1dc>
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e008      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001eb8:	2307      	movs	r3, #7
 8001eba:	e006      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eda:	4937      	ldr	r1, [pc, #220]	@ (8001fb8 <HAL_GPIO_Init+0x2dc>)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ee8:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f12:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f36:	4a25      	ldr	r2, [pc, #148]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f3c:	4b23      	ldr	r3, [pc, #140]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f60:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f8a:	4a10      	ldr	r2, [pc, #64]	@ (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f47f aea3 	bne.w	8001cec <HAL_GPIO_Init+0x10>
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	bf00      	nop
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000
 8001fbc:	48000400 	.word	0x48000400
 8001fc0:	48000800 	.word	0x48000800
 8001fc4:	48000c00 	.word	0x48000c00
 8001fc8:	48001000 	.word	0x48001000
 8001fcc:	40010400 	.word	0x40010400

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002004:	4b05      	ldr	r3, [pc, #20]	@ (800201c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a04      	ldr	r2, [pc, #16]	@ (800201c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <HAL_PWREx_GetVoltageRange+0x18>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40007000 	.word	0x40007000

0800203c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800204a:	d130      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800204c:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002058:	d038      	beq.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800205a:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002062:	4a1e      	ldr	r2, [pc, #120]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002064:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2232      	movs	r2, #50	@ 0x32
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0c9b      	lsrs	r3, r3, #18
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002080:	e002      	b.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3b01      	subs	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002094:	d102      	bne.n	800209c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f2      	bne.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800209c:	4b0f      	ldr	r3, [pc, #60]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a8:	d110      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e00f      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d007      	beq.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020bc:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020c4:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40007000 	.word	0x40007000
 80020e0:	20000180 	.word	0x20000180
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	f000 bc02 	b.w	8002900 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020fc:	4b96      	ldr	r3, [pc, #600]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002106:	4b94      	ldr	r3, [pc, #592]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0310 	and.w	r3, r3, #16
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80e4 	beq.w	80022e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d007      	beq.n	8002134 <HAL_RCC_OscConfig+0x4c>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	f040 808b 	bne.w	8002242 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b01      	cmp	r3, #1
 8002130:	f040 8087 	bne.w	8002242 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002134:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x64>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e3d9      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1a      	ldr	r2, [r3, #32]
 8002150:	4b81      	ldr	r3, [pc, #516]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	2b00      	cmp	r3, #0
 800215a:	d004      	beq.n	8002166 <HAL_RCC_OscConfig+0x7e>
 800215c:	4b7e      	ldr	r3, [pc, #504]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002164:	e005      	b.n	8002172 <HAL_RCC_OscConfig+0x8a>
 8002166:	4b7c      	ldr	r3, [pc, #496]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002172:	4293      	cmp	r3, r2
 8002174:	d223      	bcs.n	80021be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fd8c 	bl	8002c98 <RCC_SetFlashLatencyFromMSIRange>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e3ba      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218a:	4b73      	ldr	r3, [pc, #460]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a72      	ldr	r2, [pc, #456]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002190:	f043 0308 	orr.w	r3, r3, #8
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b70      	ldr	r3, [pc, #448]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	496d      	ldr	r1, [pc, #436]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	4968      	ldr	r1, [pc, #416]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
 80021bc:	e025      	b.n	800220a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a65      	ldr	r2, [pc, #404]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4960      	ldr	r1, [pc, #384]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	495b      	ldr	r1, [pc, #364]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fd4c 	bl	8002c98 <RCC_SetFlashLatencyFromMSIRange>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e37a      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220a:	f000 fc81 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 800220e:	4602      	mov	r2, r0
 8002210:	4b51      	ldr	r3, [pc, #324]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4950      	ldr	r1, [pc, #320]	@ (800235c <HAL_RCC_OscConfig+0x274>)
 800221c:	5ccb      	ldrb	r3, [r1, r3]
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	fa22 f303 	lsr.w	r3, r2, r3
 8002226:	4a4e      	ldr	r2, [pc, #312]	@ (8002360 <HAL_RCC_OscConfig+0x278>)
 8002228:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800222a:	4b4e      	ldr	r3, [pc, #312]	@ (8002364 <HAL_RCC_OscConfig+0x27c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fc12 	bl	8001a58 <HAL_InitTick>
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d052      	beq.n	80022e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	e35e      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d032      	beq.n	80022b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800224a:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a42      	ldr	r2, [pc, #264]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002256:	f7ff fc4f 	bl	8001af8 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225e:	f7ff fc4b 	bl	8001af8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e347      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800227c:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a35      	ldr	r2, [pc, #212]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002282:	f043 0308 	orr.w	r3, r3, #8
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b33      	ldr	r3, [pc, #204]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4930      	ldr	r1, [pc, #192]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229a:	4b2f      	ldr	r3, [pc, #188]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	492b      	ldr	r1, [pc, #172]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
 80022ae:	e01a      	b.n	80022e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b0:	4b29      	ldr	r3, [pc, #164]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fc1c 	bl	8001af8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c4:	f7ff fc18 	bl	8001af8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e314      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022d6:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1dc>
 80022e2:	e000      	b.n	80022e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d073      	beq.n	80023da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_OscConfig+0x21c>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d10e      	bne.n	800231c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d063      	beq.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d15f      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e2f1      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x24c>
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e025      	b.n	8002380 <HAL_RCC_OscConfig+0x298>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800233c:	d114      	bne.n	8002368 <HAL_RCC_OscConfig+0x280>
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a05      	ldr	r2, [pc, #20]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a02      	ldr	r2, [pc, #8]	@ (8002358 <HAL_RCC_OscConfig+0x270>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e013      	b.n	8002380 <HAL_RCC_OscConfig+0x298>
 8002358:	40021000 	.word	0x40021000
 800235c:	08004e94 	.word	0x08004e94
 8002360:	20000180 	.word	0x20000180
 8002364:	20000184 	.word	0x20000184
 8002368:	4ba0      	ldr	r3, [pc, #640]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a9f      	ldr	r2, [pc, #636]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b9d      	ldr	r3, [pc, #628]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a9c      	ldr	r2, [pc, #624]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800237e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff fbb6 	bl	8001af8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fbb2 	bl	8001af8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	@ 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2ae      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a2:	4b92      	ldr	r3, [pc, #584]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x2a8>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff fba2 	bl	8001af8 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fb9e 	bl	8001af8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	@ 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e29a      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ca:	4b88      	ldr	r3, [pc, #544]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2d0>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d060      	beq.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_OscConfig+0x310>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d119      	bne.n	8002426 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d116      	bne.n	8002426 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f8:	4b7c      	ldr	r3, [pc, #496]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x328>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e277      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b76      	ldr	r3, [pc, #472]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	4973      	ldr	r1, [pc, #460]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	e040      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d023      	beq.n	8002476 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242e:	4b6f      	ldr	r3, [pc, #444]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6e      	ldr	r2, [pc, #440]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff fb5d 	bl	8001af8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7ff fb59 	bl	8001af8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e255      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002454:	4b65      	ldr	r3, [pc, #404]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002460:	4b62      	ldr	r3, [pc, #392]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	495f      	ldr	r1, [pc, #380]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
 8002474:	e018      	b.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	4b5d      	ldr	r3, [pc, #372]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5c      	ldr	r2, [pc, #368]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800247c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002482:	f7ff fb39 	bl	8001af8 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248a:	f7ff fb35 	bl	8001af8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e231      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800249c:	4b53      	ldr	r3, [pc, #332]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03c      	beq.n	800252e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024bc:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80024be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c2:	4a4a      	ldr	r2, [pc, #296]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff fb14 	bl	8001af8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7ff fb10 	bl	8001af8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e20c      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024e6:	4b41      	ldr	r3, [pc, #260]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCC_OscConfig+0x3ec>
 80024f4:	e01b      	b.n	800252e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80024f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024fc:	4a3b      	ldr	r2, [pc, #236]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff faf7 	bl	8001af8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800250e:	f7ff faf3 	bl	8001af8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1ef      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002520:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80a6 	beq.w	8002688 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002540:	4b2a      	ldr	r3, [pc, #168]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254c:	4b27      	ldr	r3, [pc, #156]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	4a26      	ldr	r2, [pc, #152]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 8002552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002556:	6593      	str	r3, [r2, #88]	@ 0x58
 8002558:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002564:	2301      	movs	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x508>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d118      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002574:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_RCC_OscConfig+0x508>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_RCC_OscConfig+0x508>)
 800257a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002580:	f7ff faba 	bl	8001af8 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002588:	f7ff fab6 	bl	8001af8 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1b2      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <HAL_RCC_OscConfig+0x508>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4d8>
 80025ae:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80025b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025be:	e029      	b.n	8002614 <HAL_RCC_OscConfig+0x52c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d115      	bne.n	80025f4 <HAL_RCC_OscConfig+0x50c>
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ce:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80025d0:	f043 0304 	orr.w	r3, r3, #4
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025d8:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025de:	4a03      	ldr	r2, [pc, #12]	@ (80025ec <HAL_RCC_OscConfig+0x504>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x52c>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40007000 	.word	0x40007000
 80025f4:	4b9a      	ldr	r3, [pc, #616]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	4a99      	ldr	r2, [pc, #612]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002604:	4b96      	ldr	r3, [pc, #600]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260a:	4a95      	ldr	r2, [pc, #596]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d016      	beq.n	800264a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7ff fa6c 	bl	8001af8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002622:	e00a      	b.n	800263a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7ff fa68 	bl	8001af8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e162      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263a:	4b89      	ldr	r3, [pc, #548]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ed      	beq.n	8002624 <HAL_RCC_OscConfig+0x53c>
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264a:	f7ff fa55 	bl	8001af8 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002650:	e00a      	b.n	8002668 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f7ff fa51 	bl	8001af8 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002660:	4293      	cmp	r3, r2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e14b      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002668:	4b7d      	ldr	r3, [pc, #500]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ed      	bne.n	8002652 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b78      	ldr	r3, [pc, #480]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	4a77      	ldr	r2, [pc, #476]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03c      	beq.n	800270e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800269c:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800269e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7ff fa24 	bl	8001af8 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b4:	f7ff fa20 	bl	8001af8 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e11c      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c6:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80026c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <HAL_RCC_OscConfig+0x5cc>
 80026d4:	e01b      	b.n	800270e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026d6:	4b62      	ldr	r3, [pc, #392]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80026d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026dc:	4a60      	ldr	r2, [pc, #384]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7ff fa07 	bl	8001af8 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ee:	f7ff fa03 	bl	8001af8 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e0ff      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002700:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002702:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ef      	bne.n	80026ee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80f3 	beq.w	80028fe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271c:	2b02      	cmp	r3, #2
 800271e:	f040 80c9 	bne.w	80028b4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0203 	and.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	429a      	cmp	r2, r3
 8002734:	d12c      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	3b01      	subs	r3, #1
 8002742:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d123      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d11b      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002762:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d113      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002772:	085b      	lsrs	r3, r3, #1
 8002774:	3b01      	subs	r3, #1
 8002776:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d109      	bne.n	8002790 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	3b01      	subs	r3, #1
 800278a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d06b      	beq.n	8002868 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d062      	beq.n	800285c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002796:	4b32      	ldr	r3, [pc, #200]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0ac      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80027ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b2:	f7ff f9a1 	bl	8001af8 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff f99d 	bl	8001af8 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e099      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d8:	4b21      	ldr	r3, [pc, #132]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_RCC_OscConfig+0x77c>)
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80027e8:	3a01      	subs	r2, #1
 80027ea:	0112      	lsls	r2, r2, #4
 80027ec:	4311      	orrs	r1, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80027f2:	0212      	lsls	r2, r2, #8
 80027f4:	4311      	orrs	r1, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027fa:	0852      	lsrs	r2, r2, #1
 80027fc:	3a01      	subs	r2, #1
 80027fe:	0552      	lsls	r2, r2, #21
 8002800:	4311      	orrs	r1, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002806:	0852      	lsrs	r2, r2, #1
 8002808:	3a01      	subs	r2, #1
 800280a:	0652      	lsls	r2, r2, #25
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002812:	06d2      	lsls	r2, r2, #27
 8002814:	430a      	orrs	r2, r1
 8002816:	4912      	ldr	r1, [pc, #72]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002818:	4313      	orrs	r3, r2
 800281a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002822:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002826:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002828:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002832:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002834:	f7ff f960 	bl	8001af8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7ff f95c 	bl	8001af8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e058      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284e:	4b04      	ldr	r3, [pc, #16]	@ (8002860 <HAL_RCC_OscConfig+0x778>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800285a:	e050      	b.n	80028fe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e04f      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
 8002860:	40021000 	.word	0x40021000
 8002864:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d144      	bne.n	80028fe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002874:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a23      	ldr	r2, [pc, #140]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002880:	4b21      	ldr	r3, [pc, #132]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a20      	ldr	r2, [pc, #128]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 8002886:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800288a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800288c:	f7ff f934 	bl	8001af8 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff f930 	bl	8001af8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e02c      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x7ac>
 80028b2:	e024      	b.n	80028fe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b0c      	cmp	r3, #12
 80028b8:	d01f      	beq.n	80028fa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 80028c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7ff f917 	bl	8001af8 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7ff f913 	bl	8001af8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e00f      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	4905      	ldr	r1, [pc, #20]	@ (8002908 <HAL_RCC_OscConfig+0x820>)
 80028f2:	4b06      	ldr	r3, [pc, #24]	@ (800290c <HAL_RCC_OscConfig+0x824>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	60cb      	str	r3, [r1, #12]
 80028f8:	e001      	b.n	80028fe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3720      	adds	r7, #32
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	feeefffc 	.word	0xfeeefffc

08002910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0e7      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002924:	4b75      	ldr	r3, [pc, #468]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d910      	bls.n	8002954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b72      	ldr	r3, [pc, #456]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 0207 	bic.w	r2, r3, #7
 800293a:	4970      	ldr	r1, [pc, #448]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b6e      	ldr	r3, [pc, #440]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cf      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d010      	beq.n	8002982 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	4b66      	ldr	r3, [pc, #408]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800296c:	429a      	cmp	r2, r3
 800296e:	d908      	bls.n	8002982 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002970:	4b63      	ldr	r3, [pc, #396]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4960      	ldr	r1, [pc, #384]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d04c      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d107      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002996:	4b5a      	ldr	r3, [pc, #360]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d121      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0a6      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d107      	bne.n	80029be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	4b54      	ldr	r3, [pc, #336]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d115      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e09a      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e08e      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e086      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4943      	ldr	r1, [pc, #268]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7ff f87e 	bl	8001af8 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7ff f87a 	bl	8001af8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e06e      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b3a      	ldr	r3, [pc, #232]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d010      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b31      	ldr	r3, [pc, #196]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d208      	bcs.n	8002a56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b2e      	ldr	r3, [pc, #184]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	492b      	ldr	r1, [pc, #172]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a56:	4b29      	ldr	r3, [pc, #164]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d210      	bcs.n	8002a86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a64:	4b25      	ldr	r3, [pc, #148]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 0207 	bic.w	r2, r3, #7
 8002a6c:	4923      	ldr	r1, [pc, #140]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a74:	4b21      	ldr	r3, [pc, #132]	@ (8002afc <HAL_RCC_ClockConfig+0x1ec>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e036      	b.n	8002af4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a92:	4b1b      	ldr	r3, [pc, #108]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4918      	ldr	r1, [pc, #96]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d009      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab0:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4910      	ldr	r1, [pc, #64]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ac4:	f000 f824 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	490b      	ldr	r1, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x1f4>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae0:	4a09      	ldr	r2, [pc, #36]	@ (8002b08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1fc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe ffb5 	bl	8001a58 <HAL_InitTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002af2:	7afb      	ldrb	r3, [r7, #11]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40022000 	.word	0x40022000
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08004e94 	.word	0x08004e94
 8002b08:	20000180 	.word	0x20000180
 8002b0c:	20000184 	.word	0x20000184

08002b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b28:	4b3b      	ldr	r3, [pc, #236]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x34>
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d121      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d11e      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b44:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b50:	4b31      	ldr	r3, [pc, #196]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	e005      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b60:	4b2d      	ldr	r3, [pc, #180]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10d      	bne.n	8002b98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d102      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	e004      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b94:	4b23      	ldr	r3, [pc, #140]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d134      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d003      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d003      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0xac>
 8002bb4:	e005      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bb8:	617b      	str	r3, [r7, #20]
      break;
 8002bba:	e005      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bbe:	617b      	str	r3, [r7, #20]
      break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	617b      	str	r3, [r7, #20]
      break;
 8002bc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bd6:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	fb03 f202 	mul.w	r2, r3, r2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	0e5b      	lsrs	r3, r3, #25
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c08:	69bb      	ldr	r3, [r7, #24]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	08004eac 	.word	0x08004eac
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000180 	.word	0x20000180

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4904      	ldr	r1, [pc, #16]	@ (8002c68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40021000 	.word	0x40021000
 8002c68:	08004ea4 	.word	0x08004ea4

08002c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c70:	f7ff ffda 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0adb      	lsrs	r3, r3, #11
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4904      	ldr	r1, [pc, #16]	@ (8002c94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	f003 031f 	and.w	r3, r3, #31
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08004ea4 	.word	0x08004ea4

08002c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cb0:	f7ff f9b6 	bl	8002020 <HAL_PWREx_GetVoltageRange>
 8002cb4:	6178      	str	r0, [r7, #20]
 8002cb6:	e014      	b.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cbc:	4a24      	ldr	r2, [pc, #144]	@ (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc4:	4b22      	ldr	r3, [pc, #136]	@ (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cd0:	f7ff f9a6 	bl	8002020 <HAL_PWREx_GetVoltageRange>
 8002cd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cda:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ce0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce8:	d10b      	bne.n	8002d02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b80      	cmp	r3, #128	@ 0x80
 8002cee:	d919      	bls.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cf4:	d902      	bls.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	e013      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	e010      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b80      	cmp	r3, #128	@ 0x80
 8002d06:	d902      	bls.n	8002d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d08:	2303      	movs	r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
 8002d0c:	e00a      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b80      	cmp	r3, #128	@ 0x80
 8002d12:	d102      	bne.n	8002d1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d14:	2302      	movs	r3, #2
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	e004      	b.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b70      	cmp	r3, #112	@ 0x70
 8002d1e:	d101      	bne.n	8002d24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d20:	2301      	movs	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 0207 	bic.w	r2, r3, #7
 8002d2c:	4909      	ldr	r1, [pc, #36]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d34:	4b07      	ldr	r3, [pc, #28]	@ (8002d54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d001      	beq.n	8002d46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40022000 	.word	0x40022000

08002d58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d60:	2300      	movs	r3, #0
 8002d62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d64:	2300      	movs	r3, #0
 8002d66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d031      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d7c:	d01a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002d82:	d814      	bhi.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d009      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d8c:	d10f      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a5c      	ldr	r2, [pc, #368]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d98:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d9a:	e00c      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa44 	bl	8003230 <RCCEx_PLLSAI1_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dac:	e003      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	74fb      	strb	r3, [r7, #19]
      break;
 8002db2:	e000      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dbc:	4b51      	ldr	r3, [pc, #324]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dca:	494e      	ldr	r1, [pc, #312]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002dd2:	e001      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 809e 	beq.w	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dea:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00d      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b40      	ldr	r3, [pc, #256]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e04:	4a3f      	ldr	r2, [pc, #252]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a39      	ldr	r2, [pc, #228]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e28:	f7fe fe66 	bl	8001af8 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e2e:	e009      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe fe62 	bl	8001af8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	74fb      	strb	r3, [r7, #19]
        break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e44:	4b30      	ldr	r3, [pc, #192]	@ (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0ef      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d15a      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e56:	4b2b      	ldr	r3, [pc, #172]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01e      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d019      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e7e:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e84:	4a1f      	ldr	r2, [pc, #124]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e94:	4a1b      	ldr	r2, [pc, #108]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e9e:	4a19      	ldr	r2, [pc, #100]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fe22 	bl	8001af8 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fe1e 	bl	8001af8 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d902      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	74fb      	strb	r3, [r7, #19]
            break;
 8002ece:	e006      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0ec      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002ede:	7cfb      	ldrb	r3, [r7, #19]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee4:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ef2:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002efa:	e009      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002efc:	7cfb      	ldrb	r3, [r7, #19]
 8002efe:	74bb      	strb	r3, [r7, #18]
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7cfb      	ldrb	r3, [r7, #19]
 8002f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f10:	7c7b      	ldrb	r3, [r7, #17]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d105      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f16:	4b9e      	ldr	r3, [pc, #632]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f1a:	4a9d      	ldr	r2, [pc, #628]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2e:	4b98      	ldr	r3, [pc, #608]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f34:	f023 0203 	bic.w	r2, r3, #3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4994      	ldr	r1, [pc, #592]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f50:	4b8f      	ldr	r3, [pc, #572]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f56:	f023 020c 	bic.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	498c      	ldr	r1, [pc, #560]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f72:	4b87      	ldr	r3, [pc, #540]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	4983      	ldr	r1, [pc, #524]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f94:	4b7e      	ldr	r3, [pc, #504]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	497b      	ldr	r1, [pc, #492]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fb6:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc4:	4972      	ldr	r1, [pc, #456]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	496a      	ldr	r1, [pc, #424]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ffa:	4b65      	ldr	r3, [pc, #404]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003000:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003008:	4961      	ldr	r1, [pc, #388]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800301c:	4b5c      	ldr	r3, [pc, #368]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800302a:	4959      	ldr	r1, [pc, #356]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800303e:	4b54      	ldr	r3, [pc, #336]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003044:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	4950      	ldr	r1, [pc, #320]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003060:	4b4b      	ldr	r3, [pc, #300]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	4948      	ldr	r1, [pc, #288]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003082:	4b43      	ldr	r3, [pc, #268]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003084:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003088:	f023 0203 	bic.w	r2, r3, #3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	493f      	ldr	r1, [pc, #252]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d028      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b2:	4937      	ldr	r1, [pc, #220]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c2:	d106      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c4:	4b32      	ldr	r3, [pc, #200]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4a31      	ldr	r2, [pc, #196]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030ce:	60d3      	str	r3, [r2, #12]
 80030d0:	e011      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030da:	d10c      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	2101      	movs	r1, #1
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f8a4 	bl	8003230 <RCCEx_PLLSAI1_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d028      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003102:	4b23      	ldr	r3, [pc, #140]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003108:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	491f      	ldr	r1, [pc, #124]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003120:	d106      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	4a1a      	ldr	r2, [pc, #104]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312c:	60d3      	str	r3, [r2, #12]
 800312e:	e011      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003138:	d10c      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3304      	adds	r3, #4
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f875 	bl	8003230 <RCCEx_PLLSAI1_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316e:	4908      	ldr	r1, [pc, #32]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800317e:	d109      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a02      	ldr	r2, [pc, #8]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800318a:	60d3      	str	r3, [r2, #12]
 800318c:	e014      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f843 	bl	8003230 <RCCEx_PLLSAI1_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01c      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	4916      	ldr	r1, [pc, #88]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031e2:	d10c      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3304      	adds	r3, #4
 80031e8:	2102      	movs	r1, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f820 	bl	8003230 <RCCEx_PLLSAI1_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031f4:	7cfb      	ldrb	r3, [r7, #19]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80031fa:	7cfb      	ldrb	r3, [r7, #19]
 80031fc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003218:	4904      	ldr	r1, [pc, #16]	@ (800322c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003220:	7cbb      	ldrb	r3, [r7, #18]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000

08003230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800323e:	4b74      	ldr	r3, [pc, #464]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d018      	beq.n	800327c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800324a:	4b71      	ldr	r3, [pc, #452]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	f003 0203 	and.w	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d10d      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
       ||
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003262:	4b6b      	ldr	r3, [pc, #428]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
       ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d047      	beq.n	8003306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e044      	b.n	8003306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d018      	beq.n	80032b6 <RCCEx_PLLSAI1_Config+0x86>
 8003284:	2b03      	cmp	r3, #3
 8003286:	d825      	bhi.n	80032d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003288:	2b01      	cmp	r3, #1
 800328a:	d002      	beq.n	8003292 <RCCEx_PLLSAI1_Config+0x62>
 800328c:	2b02      	cmp	r3, #2
 800328e:	d009      	beq.n	80032a4 <RCCEx_PLLSAI1_Config+0x74>
 8003290:	e020      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003292:	4b5f      	ldr	r3, [pc, #380]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11d      	bne.n	80032da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a2:	e01a      	b.n	80032da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d116      	bne.n	80032de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032b4:	e013      	b.n	80032de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032b6:	4b56      	ldr	r3, [pc, #344]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032c2:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032d2:	e006      	b.n	80032e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e004      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032da:	bf00      	nop
 80032dc:	e002      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032de:	bf00      	nop
 80032e0:	e000      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ea:	4b49      	ldr	r3, [pc, #292]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	430b      	orrs	r3, r1
 8003300:	4943      	ldr	r1, [pc, #268]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003302:	4313      	orrs	r3, r2
 8003304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d17c      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800330c:	4b40      	ldr	r3, [pc, #256]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a3f      	ldr	r2, [pc, #252]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003312:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003318:	f7fe fbee 	bl	8001af8 <HAL_GetTick>
 800331c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331e:	e009      	b.n	8003334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003320:	f7fe fbea 	bl	8001af8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d902      	bls.n	8003334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	73fb      	strb	r3, [r7, #15]
        break;
 8003332:	e005      	b.n	8003340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003334:	4b36      	ldr	r3, [pc, #216]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1ef      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d15f      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d110      	bne.n	800336e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334c:	4b30      	ldr	r3, [pc, #192]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003354:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6892      	ldr	r2, [r2, #8]
 800335c:	0211      	lsls	r1, r2, #8
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68d2      	ldr	r2, [r2, #12]
 8003362:	06d2      	lsls	r2, r2, #27
 8003364:	430a      	orrs	r2, r1
 8003366:	492a      	ldr	r1, [pc, #168]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003368:	4313      	orrs	r3, r2
 800336a:	610b      	str	r3, [r1, #16]
 800336c:	e027      	b.n	80033be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d112      	bne.n	800339a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003374:	4b26      	ldr	r3, [pc, #152]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800337c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6892      	ldr	r2, [r2, #8]
 8003384:	0211      	lsls	r1, r2, #8
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6912      	ldr	r2, [r2, #16]
 800338a:	0852      	lsrs	r2, r2, #1
 800338c:	3a01      	subs	r2, #1
 800338e:	0552      	lsls	r2, r2, #21
 8003390:	430a      	orrs	r2, r1
 8003392:	491f      	ldr	r1, [pc, #124]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003394:	4313      	orrs	r3, r2
 8003396:	610b      	str	r3, [r1, #16]
 8003398:	e011      	b.n	80033be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800339a:	4b1d      	ldr	r3, [pc, #116]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80033a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	0211      	lsls	r1, r2, #8
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6952      	ldr	r2, [r2, #20]
 80033b0:	0852      	lsrs	r2, r2, #1
 80033b2:	3a01      	subs	r2, #1
 80033b4:	0652      	lsls	r2, r2, #25
 80033b6:	430a      	orrs	r2, r1
 80033b8:	4915      	ldr	r1, [pc, #84]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033be:	4b14      	ldr	r3, [pc, #80]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a13      	ldr	r2, [pc, #76]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe fb95 	bl	8001af8 <HAL_GetTick>
 80033ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d0:	e009      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033d2:	f7fe fb91 	bl	8001af8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d902      	bls.n	80033e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	73fb      	strb	r3, [r7, #15]
          break;
 80033e4:	e005      	b.n	80033f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ef      	beq.n	80033d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033f2:	7bfb      	ldrb	r3, [r7, #15]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4903      	ldr	r1, [pc, #12]	@ (8003410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000

08003414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e040      	b.n	80034a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d106      	bne.n	800343c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fe f984 	bl	8001744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	@ 0x24
 8003440:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0201 	bic.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb38 	bl	8003ad0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f8af 	bl	80035c4 <UART_SetConfig>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e01b      	b.n	80034a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800347e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800348e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fbb7 	bl	8003c14 <UART_CheckIdleState>
 80034a6:	4603      	mov	r3, r0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08a      	sub	sp, #40	@ 0x28
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d177      	bne.n	80035b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <HAL_UART_Transmit+0x24>
 80034ce:	88fb      	ldrh	r3, [r7, #6]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e070      	b.n	80035ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2221      	movs	r2, #33	@ 0x21
 80034e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034e6:	f7fe fb07 	bl	8001af8 <HAL_GetTick>
 80034ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	88fa      	ldrh	r2, [r7, #6]
 80034f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	88fa      	ldrh	r2, [r7, #6]
 80034f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003504:	d108      	bne.n	8003518 <HAL_UART_Transmit+0x68>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e003      	b.n	8003520 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800351c:	2300      	movs	r3, #0
 800351e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003520:	e02f      	b.n	8003582 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	2180      	movs	r1, #128	@ 0x80
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fc19 	bl	8003d64 <UART_WaitOnFlagUntilTimeout>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e03b      	b.n	80035ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	881a      	ldrh	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003554:	b292      	uxth	r2, r2
 8003556:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3302      	adds	r3, #2
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e007      	b.n	8003570 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1c9      	bne.n	8003522 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	2140      	movs	r1, #64	@ 0x40
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 fbe3 	bl	8003d64 <UART_WaitOnFlagUntilTimeout>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d004      	beq.n	80035ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e005      	b.n	80035ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c8:	b08a      	sub	sp, #40	@ 0x28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4ba5      	ldr	r3, [pc, #660]	@ (8003888 <UART_SetConfig+0x2c4>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a9a      	ldr	r2, [pc, #616]	@ (800388c <UART_SetConfig+0x2c8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	4313      	orrs	r3, r2
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a91      	ldr	r2, [pc, #580]	@ (8003890 <UART_SetConfig+0x2cc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d126      	bne.n	800369c <UART_SetConfig+0xd8>
 800364e:	4b91      	ldr	r3, [pc, #580]	@ (8003894 <UART_SetConfig+0x2d0>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d81b      	bhi.n	8003694 <UART_SetConfig+0xd0>
 800365c:	a201      	add	r2, pc, #4	@ (adr r2, 8003664 <UART_SetConfig+0xa0>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003685 	.word	0x08003685
 800366c:	0800367d 	.word	0x0800367d
 8003670:	0800368d 	.word	0x0800368d
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800367a:	e0d6      	b.n	800382a <UART_SetConfig+0x266>
 800367c:	2302      	movs	r3, #2
 800367e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003682:	e0d2      	b.n	800382a <UART_SetConfig+0x266>
 8003684:	2304      	movs	r3, #4
 8003686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800368a:	e0ce      	b.n	800382a <UART_SetConfig+0x266>
 800368c:	2308      	movs	r3, #8
 800368e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003692:	e0ca      	b.n	800382a <UART_SetConfig+0x266>
 8003694:	2310      	movs	r3, #16
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800369a:	e0c6      	b.n	800382a <UART_SetConfig+0x266>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7d      	ldr	r2, [pc, #500]	@ (8003898 <UART_SetConfig+0x2d4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d138      	bne.n	8003718 <UART_SetConfig+0x154>
 80036a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003894 <UART_SetConfig+0x2d0>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b0c      	cmp	r3, #12
 80036b2:	d82d      	bhi.n	8003710 <UART_SetConfig+0x14c>
 80036b4:	a201      	add	r2, pc, #4	@ (adr r2, 80036bc <UART_SetConfig+0xf8>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036f1 	.word	0x080036f1
 80036c0:	08003711 	.word	0x08003711
 80036c4:	08003711 	.word	0x08003711
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003701 	.word	0x08003701
 80036d0:	08003711 	.word	0x08003711
 80036d4:	08003711 	.word	0x08003711
 80036d8:	08003711 	.word	0x08003711
 80036dc:	080036f9 	.word	0x080036f9
 80036e0:	08003711 	.word	0x08003711
 80036e4:	08003711 	.word	0x08003711
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003709 	.word	0x08003709
 80036f0:	2300      	movs	r3, #0
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f6:	e098      	b.n	800382a <UART_SetConfig+0x266>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fe:	e094      	b.n	800382a <UART_SetConfig+0x266>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003706:	e090      	b.n	800382a <UART_SetConfig+0x266>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800370e:	e08c      	b.n	800382a <UART_SetConfig+0x266>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003716:	e088      	b.n	800382a <UART_SetConfig+0x266>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a5f      	ldr	r2, [pc, #380]	@ (800389c <UART_SetConfig+0x2d8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d125      	bne.n	800376e <UART_SetConfig+0x1aa>
 8003722:	4b5c      	ldr	r3, [pc, #368]	@ (8003894 <UART_SetConfig+0x2d0>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800372c:	2b30      	cmp	r3, #48	@ 0x30
 800372e:	d016      	beq.n	800375e <UART_SetConfig+0x19a>
 8003730:	2b30      	cmp	r3, #48	@ 0x30
 8003732:	d818      	bhi.n	8003766 <UART_SetConfig+0x1a2>
 8003734:	2b20      	cmp	r3, #32
 8003736:	d00a      	beq.n	800374e <UART_SetConfig+0x18a>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d814      	bhi.n	8003766 <UART_SetConfig+0x1a2>
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <UART_SetConfig+0x182>
 8003740:	2b10      	cmp	r3, #16
 8003742:	d008      	beq.n	8003756 <UART_SetConfig+0x192>
 8003744:	e00f      	b.n	8003766 <UART_SetConfig+0x1a2>
 8003746:	2300      	movs	r3, #0
 8003748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374c:	e06d      	b.n	800382a <UART_SetConfig+0x266>
 800374e:	2302      	movs	r3, #2
 8003750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003754:	e069      	b.n	800382a <UART_SetConfig+0x266>
 8003756:	2304      	movs	r3, #4
 8003758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375c:	e065      	b.n	800382a <UART_SetConfig+0x266>
 800375e:	2308      	movs	r3, #8
 8003760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003764:	e061      	b.n	800382a <UART_SetConfig+0x266>
 8003766:	2310      	movs	r3, #16
 8003768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376c:	e05d      	b.n	800382a <UART_SetConfig+0x266>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a4b      	ldr	r2, [pc, #300]	@ (80038a0 <UART_SetConfig+0x2dc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d125      	bne.n	80037c4 <UART_SetConfig+0x200>
 8003778:	4b46      	ldr	r3, [pc, #280]	@ (8003894 <UART_SetConfig+0x2d0>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003782:	2bc0      	cmp	r3, #192	@ 0xc0
 8003784:	d016      	beq.n	80037b4 <UART_SetConfig+0x1f0>
 8003786:	2bc0      	cmp	r3, #192	@ 0xc0
 8003788:	d818      	bhi.n	80037bc <UART_SetConfig+0x1f8>
 800378a:	2b80      	cmp	r3, #128	@ 0x80
 800378c:	d00a      	beq.n	80037a4 <UART_SetConfig+0x1e0>
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d814      	bhi.n	80037bc <UART_SetConfig+0x1f8>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <UART_SetConfig+0x1d8>
 8003796:	2b40      	cmp	r3, #64	@ 0x40
 8003798:	d008      	beq.n	80037ac <UART_SetConfig+0x1e8>
 800379a:	e00f      	b.n	80037bc <UART_SetConfig+0x1f8>
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a2:	e042      	b.n	800382a <UART_SetConfig+0x266>
 80037a4:	2302      	movs	r3, #2
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037aa:	e03e      	b.n	800382a <UART_SetConfig+0x266>
 80037ac:	2304      	movs	r3, #4
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b2:	e03a      	b.n	800382a <UART_SetConfig+0x266>
 80037b4:	2308      	movs	r3, #8
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ba:	e036      	b.n	800382a <UART_SetConfig+0x266>
 80037bc:	2310      	movs	r3, #16
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c2:	e032      	b.n	800382a <UART_SetConfig+0x266>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a30      	ldr	r2, [pc, #192]	@ (800388c <UART_SetConfig+0x2c8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d12a      	bne.n	8003824 <UART_SetConfig+0x260>
 80037ce:	4b31      	ldr	r3, [pc, #196]	@ (8003894 <UART_SetConfig+0x2d0>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80037d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037dc:	d01a      	beq.n	8003814 <UART_SetConfig+0x250>
 80037de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037e2:	d81b      	bhi.n	800381c <UART_SetConfig+0x258>
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037e8:	d00c      	beq.n	8003804 <UART_SetConfig+0x240>
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ee:	d815      	bhi.n	800381c <UART_SetConfig+0x258>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <UART_SetConfig+0x238>
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f8:	d008      	beq.n	800380c <UART_SetConfig+0x248>
 80037fa:	e00f      	b.n	800381c <UART_SetConfig+0x258>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003802:	e012      	b.n	800382a <UART_SetConfig+0x266>
 8003804:	2302      	movs	r3, #2
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380a:	e00e      	b.n	800382a <UART_SetConfig+0x266>
 800380c:	2304      	movs	r3, #4
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003812:	e00a      	b.n	800382a <UART_SetConfig+0x266>
 8003814:	2308      	movs	r3, #8
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381a:	e006      	b.n	800382a <UART_SetConfig+0x266>
 800381c:	2310      	movs	r3, #16
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003822:	e002      	b.n	800382a <UART_SetConfig+0x266>
 8003824:	2310      	movs	r3, #16
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a17      	ldr	r2, [pc, #92]	@ (800388c <UART_SetConfig+0x2c8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	f040 808b 	bne.w	800394c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003836:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800383a:	2b08      	cmp	r3, #8
 800383c:	d834      	bhi.n	80038a8 <UART_SetConfig+0x2e4>
 800383e:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <UART_SetConfig+0x280>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003869 	.word	0x08003869
 8003848:	080038a9 	.word	0x080038a9
 800384c:	08003871 	.word	0x08003871
 8003850:	080038a9 	.word	0x080038a9
 8003854:	08003877 	.word	0x08003877
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038a9 	.word	0x080038a9
 8003860:	080038a9 	.word	0x080038a9
 8003864:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7ff f9ea 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 800386c:	61f8      	str	r0, [r7, #28]
        break;
 800386e:	e021      	b.n	80038b4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <UART_SetConfig+0x2e0>)
 8003872:	61fb      	str	r3, [r7, #28]
        break;
 8003874:	e01e      	b.n	80038b4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7ff f94b 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 800387a:	61f8      	str	r0, [r7, #28]
        break;
 800387c:	e01a      	b.n	80038b4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003882:	61fb      	str	r3, [r7, #28]
        break;
 8003884:	e016      	b.n	80038b4 <UART_SetConfig+0x2f0>
 8003886:	bf00      	nop
 8003888:	efff69f3 	.word	0xefff69f3
 800388c:	40008000 	.word	0x40008000
 8003890:	40013800 	.word	0x40013800
 8003894:	40021000 	.word	0x40021000
 8003898:	40004400 	.word	0x40004400
 800389c:	40004800 	.word	0x40004800
 80038a0:	40004c00 	.word	0x40004c00
 80038a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 80fa 	beq.w	8003ab0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d305      	bcc.n	80038d8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d903      	bls.n	80038e0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038de:	e0e7      	b.n	8003ab0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2200      	movs	r2, #0
 80038e4:	461c      	mov	r4, r3
 80038e6:	4615      	mov	r5, r2
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	022b      	lsls	r3, r5, #8
 80038f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038f6:	0222      	lsls	r2, r4, #8
 80038f8:	68f9      	ldr	r1, [r7, #12]
 80038fa:	6849      	ldr	r1, [r1, #4]
 80038fc:	0849      	lsrs	r1, r1, #1
 80038fe:	2000      	movs	r0, #0
 8003900:	4688      	mov	r8, r1
 8003902:	4681      	mov	r9, r0
 8003904:	eb12 0a08 	adds.w	sl, r2, r8
 8003908:	eb43 0b09 	adc.w	fp, r3, r9
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800391a:	4650      	mov	r0, sl
 800391c:	4659      	mov	r1, fp
 800391e:	f7fd fbe7 	bl	80010f0 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4613      	mov	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003930:	d308      	bcc.n	8003944 <UART_SetConfig+0x380>
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003938:	d204      	bcs.n	8003944 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	e0b5      	b.n	8003ab0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800394a:	e0b1      	b.n	8003ab0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003954:	d15d      	bne.n	8003a12 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003956:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800395a:	2b08      	cmp	r3, #8
 800395c:	d827      	bhi.n	80039ae <UART_SetConfig+0x3ea>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <UART_SetConfig+0x3a0>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003989 	.word	0x08003989
 8003968:	08003991 	.word	0x08003991
 800396c:	08003999 	.word	0x08003999
 8003970:	080039af 	.word	0x080039af
 8003974:	0800399f 	.word	0x0800399f
 8003978:	080039af 	.word	0x080039af
 800397c:	080039af 	.word	0x080039af
 8003980:	080039af 	.word	0x080039af
 8003984:	080039a7 	.word	0x080039a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003988:	f7ff f95a 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 800398c:	61f8      	str	r0, [r7, #28]
        break;
 800398e:	e014      	b.n	80039ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003990:	f7ff f96c 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 8003994:	61f8      	str	r0, [r7, #28]
        break;
 8003996:	e010      	b.n	80039ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003998:	4b4c      	ldr	r3, [pc, #304]	@ (8003acc <UART_SetConfig+0x508>)
 800399a:	61fb      	str	r3, [r7, #28]
        break;
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800399e:	f7ff f8b7 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 80039a2:	61f8      	str	r0, [r7, #28]
        break;
 80039a4:	e009      	b.n	80039ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039aa:	61fb      	str	r3, [r7, #28]
        break;
 80039ac:	e005      	b.n	80039ba <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d077      	beq.n	8003ab0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005a      	lsls	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	085b      	lsrs	r3, r3, #1
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d916      	bls.n	8003a0a <UART_SetConfig+0x446>
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e2:	d212      	bcs.n	8003a0a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f023 030f 	bic.w	r3, r3, #15
 80039ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	8afa      	ldrh	r2, [r7, #22]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	e052      	b.n	8003ab0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a10:	e04e      	b.n	8003ab0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d827      	bhi.n	8003a6a <UART_SetConfig+0x4a6>
 8003a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a20 <UART_SetConfig+0x45c>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a4d 	.word	0x08003a4d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003a6b 	.word	0x08003a6b
 8003a30:	08003a5b 	.word	0x08003a5b
 8003a34:	08003a6b 	.word	0x08003a6b
 8003a38:	08003a6b 	.word	0x08003a6b
 8003a3c:	08003a6b 	.word	0x08003a6b
 8003a40:	08003a63 	.word	0x08003a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a44:	f7ff f8fc 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8003a48:	61f8      	str	r0, [r7, #28]
        break;
 8003a4a:	e014      	b.n	8003a76 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a4c:	f7ff f90e 	bl	8002c6c <HAL_RCC_GetPCLK2Freq>
 8003a50:	61f8      	str	r0, [r7, #28]
        break;
 8003a52:	e010      	b.n	8003a76 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <UART_SetConfig+0x508>)
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e00d      	b.n	8003a76 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a5a:	f7ff f859 	bl	8002b10 <HAL_RCC_GetSysClockFreq>
 8003a5e:	61f8      	str	r0, [r7, #28]
        break;
 8003a60:	e009      	b.n	8003a76 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a66:	61fb      	str	r3, [r7, #28]
        break;
 8003a68:	e005      	b.n	8003a76 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a74:	bf00      	nop
    }

    if (pclk != 0U)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	085a      	lsrs	r2, r3, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	441a      	add	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b0f      	cmp	r3, #15
 8003a94:	d909      	bls.n	8003aaa <UART_SetConfig+0x4e6>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9c:	d205      	bcs.n	8003aaa <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
 8003aa8:	e002      	b.n	8003ab0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003abc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	@ 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aca:	bf00      	nop
 8003acc:	00f42400 	.word	0x00f42400

08003ad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bce:	d10a      	bne.n	8003be6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b098      	sub	sp, #96	@ 0x60
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c24:	f7fd ff68 	bl	8001af8 <HAL_GetTick>
 8003c28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d12e      	bne.n	8003c96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c40:	2200      	movs	r2, #0
 8003c42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f88c 	bl	8003d64 <UART_WaitOnFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d021      	beq.n	8003c96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e062      	b.n	8003d5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d149      	bne.n	8003d38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	2200      	movs	r2, #0
 8003cae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f856 	bl	8003d64 <UART_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d03c      	beq.n	8003d38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	623b      	str	r3, [r7, #32]
   return(result);
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e6      	bne.n	8003cbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d10:	61fa      	str	r2, [r7, #28]
 8003d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e011      	b.n	8003d5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3758      	adds	r7, #88	@ 0x58
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d74:	e04f      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d04b      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fd febb 	bl	8001af8 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e04e      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d037      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b80      	cmp	r3, #128	@ 0x80
 8003daa:	d034      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d031      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d110      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f838 	bl	8003e3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e029      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003df0:	d111      	bne.n	8003e16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f81e 	bl	8003e3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e00f      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0a0      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b095      	sub	sp, #84	@ 0x54
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e64:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e6      	bne.n	8003e46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d118      	bne.n	8003ee6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	e853 3f00 	ldrex	r3, [r3]
 8003ec0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	e841 2300 	strex	r3, r2, [r1]
 8003ede:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1e6      	bne.n	8003eb4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003efa:	bf00      	nop
 8003efc:	3754      	adds	r7, #84	@ 0x54
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <std>:
 8003f08:	2300      	movs	r3, #0
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f16:	6083      	str	r3, [r0, #8]
 8003f18:	8181      	strh	r1, [r0, #12]
 8003f1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f1c:	81c2      	strh	r2, [r0, #14]
 8003f1e:	6183      	str	r3, [r0, #24]
 8003f20:	4619      	mov	r1, r3
 8003f22:	2208      	movs	r2, #8
 8003f24:	305c      	adds	r0, #92	@ 0x5c
 8003f26:	f000 f9f9 	bl	800431c <memset>
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <std+0x58>)
 8003f2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x5c>)
 8003f30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <std+0x60>)
 8003f34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <std+0x64>)
 8003f38:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <std+0x68>)
 8003f3c:	6224      	str	r4, [r4, #32]
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	d006      	beq.n	8003f50 <std+0x48>
 8003f42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f46:	4294      	cmp	r4, r2
 8003f48:	d002      	beq.n	8003f50 <std+0x48>
 8003f4a:	33d0      	adds	r3, #208	@ 0xd0
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d105      	bne.n	8003f5c <std+0x54>
 8003f50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f58:	f000 ba58 	b.w	800440c <__retarget_lock_init_recursive>
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	bf00      	nop
 8003f60:	0800416d 	.word	0x0800416d
 8003f64:	0800418f 	.word	0x0800418f
 8003f68:	080041c7 	.word	0x080041c7
 8003f6c:	080041eb 	.word	0x080041eb
 8003f70:	20000294 	.word	0x20000294

08003f74 <stdio_exit_handler>:
 8003f74:	4a02      	ldr	r2, [pc, #8]	@ (8003f80 <stdio_exit_handler+0xc>)
 8003f76:	4903      	ldr	r1, [pc, #12]	@ (8003f84 <stdio_exit_handler+0x10>)
 8003f78:	4803      	ldr	r0, [pc, #12]	@ (8003f88 <stdio_exit_handler+0x14>)
 8003f7a:	f000 b869 	b.w	8004050 <_fwalk_sglue>
 8003f7e:	bf00      	nop
 8003f80:	2000018c 	.word	0x2000018c
 8003f84:	08004cad 	.word	0x08004cad
 8003f88:	2000019c 	.word	0x2000019c

08003f8c <cleanup_stdio>:
 8003f8c:	6841      	ldr	r1, [r0, #4]
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <cleanup_stdio+0x34>)
 8003f90:	4299      	cmp	r1, r3
 8003f92:	b510      	push	{r4, lr}
 8003f94:	4604      	mov	r4, r0
 8003f96:	d001      	beq.n	8003f9c <cleanup_stdio+0x10>
 8003f98:	f000 fe88 	bl	8004cac <_fflush_r>
 8003f9c:	68a1      	ldr	r1, [r4, #8]
 8003f9e:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <cleanup_stdio+0x38>)
 8003fa0:	4299      	cmp	r1, r3
 8003fa2:	d002      	beq.n	8003faa <cleanup_stdio+0x1e>
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f000 fe81 	bl	8004cac <_fflush_r>
 8003faa:	68e1      	ldr	r1, [r4, #12]
 8003fac:	4b06      	ldr	r3, [pc, #24]	@ (8003fc8 <cleanup_stdio+0x3c>)
 8003fae:	4299      	cmp	r1, r3
 8003fb0:	d004      	beq.n	8003fbc <cleanup_stdio+0x30>
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb8:	f000 be78 	b.w	8004cac <_fflush_r>
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000294 	.word	0x20000294
 8003fc4:	200002fc 	.word	0x200002fc
 8003fc8:	20000364 	.word	0x20000364

08003fcc <global_stdio_init.part.0>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <global_stdio_init.part.0+0x30>)
 8003fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8004000 <global_stdio_init.part.0+0x34>)
 8003fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004004 <global_stdio_init.part.0+0x38>)
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2104      	movs	r1, #4
 8003fdc:	f7ff ff94 	bl	8003f08 <std>
 8003fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2109      	movs	r1, #9
 8003fe8:	f7ff ff8e 	bl	8003f08 <std>
 8003fec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ff6:	2112      	movs	r1, #18
 8003ff8:	f7ff bf86 	b.w	8003f08 <std>
 8003ffc:	200003cc 	.word	0x200003cc
 8004000:	20000294 	.word	0x20000294
 8004004:	08003f75 	.word	0x08003f75

08004008 <__sfp_lock_acquire>:
 8004008:	4801      	ldr	r0, [pc, #4]	@ (8004010 <__sfp_lock_acquire+0x8>)
 800400a:	f000 ba00 	b.w	800440e <__retarget_lock_acquire_recursive>
 800400e:	bf00      	nop
 8004010:	200003d5 	.word	0x200003d5

08004014 <__sfp_lock_release>:
 8004014:	4801      	ldr	r0, [pc, #4]	@ (800401c <__sfp_lock_release+0x8>)
 8004016:	f000 b9fb 	b.w	8004410 <__retarget_lock_release_recursive>
 800401a:	bf00      	nop
 800401c:	200003d5 	.word	0x200003d5

08004020 <__sinit>:
 8004020:	b510      	push	{r4, lr}
 8004022:	4604      	mov	r4, r0
 8004024:	f7ff fff0 	bl	8004008 <__sfp_lock_acquire>
 8004028:	6a23      	ldr	r3, [r4, #32]
 800402a:	b11b      	cbz	r3, 8004034 <__sinit+0x14>
 800402c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004030:	f7ff bff0 	b.w	8004014 <__sfp_lock_release>
 8004034:	4b04      	ldr	r3, [pc, #16]	@ (8004048 <__sinit+0x28>)
 8004036:	6223      	str	r3, [r4, #32]
 8004038:	4b04      	ldr	r3, [pc, #16]	@ (800404c <__sinit+0x2c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f5      	bne.n	800402c <__sinit+0xc>
 8004040:	f7ff ffc4 	bl	8003fcc <global_stdio_init.part.0>
 8004044:	e7f2      	b.n	800402c <__sinit+0xc>
 8004046:	bf00      	nop
 8004048:	08003f8d 	.word	0x08003f8d
 800404c:	200003cc 	.word	0x200003cc

08004050 <_fwalk_sglue>:
 8004050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004054:	4607      	mov	r7, r0
 8004056:	4688      	mov	r8, r1
 8004058:	4614      	mov	r4, r2
 800405a:	2600      	movs	r6, #0
 800405c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004060:	f1b9 0901 	subs.w	r9, r9, #1
 8004064:	d505      	bpl.n	8004072 <_fwalk_sglue+0x22>
 8004066:	6824      	ldr	r4, [r4, #0]
 8004068:	2c00      	cmp	r4, #0
 800406a:	d1f7      	bne.n	800405c <_fwalk_sglue+0xc>
 800406c:	4630      	mov	r0, r6
 800406e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004072:	89ab      	ldrh	r3, [r5, #12]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d907      	bls.n	8004088 <_fwalk_sglue+0x38>
 8004078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800407c:	3301      	adds	r3, #1
 800407e:	d003      	beq.n	8004088 <_fwalk_sglue+0x38>
 8004080:	4629      	mov	r1, r5
 8004082:	4638      	mov	r0, r7
 8004084:	47c0      	blx	r8
 8004086:	4306      	orrs	r6, r0
 8004088:	3568      	adds	r5, #104	@ 0x68
 800408a:	e7e9      	b.n	8004060 <_fwalk_sglue+0x10>

0800408c <iprintf>:
 800408c:	b40f      	push	{r0, r1, r2, r3}
 800408e:	b507      	push	{r0, r1, r2, lr}
 8004090:	4906      	ldr	r1, [pc, #24]	@ (80040ac <iprintf+0x20>)
 8004092:	ab04      	add	r3, sp, #16
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	f853 2b04 	ldr.w	r2, [r3], #4
 800409a:	6881      	ldr	r1, [r0, #8]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	f000 fadb 	bl	8004658 <_vfiprintf_r>
 80040a2:	b003      	add	sp, #12
 80040a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a8:	b004      	add	sp, #16
 80040aa:	4770      	bx	lr
 80040ac:	20000198 	.word	0x20000198

080040b0 <_puts_r>:
 80040b0:	6a03      	ldr	r3, [r0, #32]
 80040b2:	b570      	push	{r4, r5, r6, lr}
 80040b4:	6884      	ldr	r4, [r0, #8]
 80040b6:	4605      	mov	r5, r0
 80040b8:	460e      	mov	r6, r1
 80040ba:	b90b      	cbnz	r3, 80040c0 <_puts_r+0x10>
 80040bc:	f7ff ffb0 	bl	8004020 <__sinit>
 80040c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040c2:	07db      	lsls	r3, r3, #31
 80040c4:	d405      	bmi.n	80040d2 <_puts_r+0x22>
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	0598      	lsls	r0, r3, #22
 80040ca:	d402      	bmi.n	80040d2 <_puts_r+0x22>
 80040cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ce:	f000 f99e 	bl	800440e <__retarget_lock_acquire_recursive>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	0719      	lsls	r1, r3, #28
 80040d6:	d502      	bpl.n	80040de <_puts_r+0x2e>
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d135      	bne.n	800414a <_puts_r+0x9a>
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f8c5 	bl	8004270 <__swsetup_r>
 80040e6:	b380      	cbz	r0, 800414a <_puts_r+0x9a>
 80040e8:	f04f 35ff 	mov.w	r5, #4294967295
 80040ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040ee:	07da      	lsls	r2, r3, #31
 80040f0:	d405      	bmi.n	80040fe <_puts_r+0x4e>
 80040f2:	89a3      	ldrh	r3, [r4, #12]
 80040f4:	059b      	lsls	r3, r3, #22
 80040f6:	d402      	bmi.n	80040fe <_puts_r+0x4e>
 80040f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040fa:	f000 f989 	bl	8004410 <__retarget_lock_release_recursive>
 80040fe:	4628      	mov	r0, r5
 8004100:	bd70      	pop	{r4, r5, r6, pc}
 8004102:	2b00      	cmp	r3, #0
 8004104:	da04      	bge.n	8004110 <_puts_r+0x60>
 8004106:	69a2      	ldr	r2, [r4, #24]
 8004108:	429a      	cmp	r2, r3
 800410a:	dc17      	bgt.n	800413c <_puts_r+0x8c>
 800410c:	290a      	cmp	r1, #10
 800410e:	d015      	beq.n	800413c <_puts_r+0x8c>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	6022      	str	r2, [r4, #0]
 8004116:	7019      	strb	r1, [r3, #0]
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800411e:	3b01      	subs	r3, #1
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	2900      	cmp	r1, #0
 8004124:	d1ed      	bne.n	8004102 <_puts_r+0x52>
 8004126:	2b00      	cmp	r3, #0
 8004128:	da11      	bge.n	800414e <_puts_r+0x9e>
 800412a:	4622      	mov	r2, r4
 800412c:	210a      	movs	r1, #10
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f85f 	bl	80041f2 <__swbuf_r>
 8004134:	3001      	adds	r0, #1
 8004136:	d0d7      	beq.n	80040e8 <_puts_r+0x38>
 8004138:	250a      	movs	r5, #10
 800413a:	e7d7      	b.n	80040ec <_puts_r+0x3c>
 800413c:	4622      	mov	r2, r4
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f857 	bl	80041f2 <__swbuf_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d1e7      	bne.n	8004118 <_puts_r+0x68>
 8004148:	e7ce      	b.n	80040e8 <_puts_r+0x38>
 800414a:	3e01      	subs	r6, #1
 800414c:	e7e4      	b.n	8004118 <_puts_r+0x68>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	220a      	movs	r2, #10
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e7ee      	b.n	8004138 <_puts_r+0x88>
	...

0800415c <puts>:
 800415c:	4b02      	ldr	r3, [pc, #8]	@ (8004168 <puts+0xc>)
 800415e:	4601      	mov	r1, r0
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f7ff bfa5 	b.w	80040b0 <_puts_r>
 8004166:	bf00      	nop
 8004168:	20000198 	.word	0x20000198

0800416c <__sread>:
 800416c:	b510      	push	{r4, lr}
 800416e:	460c      	mov	r4, r1
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	f000 f8fc 	bl	8004370 <_read_r>
 8004178:	2800      	cmp	r0, #0
 800417a:	bfab      	itete	ge
 800417c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800417e:	89a3      	ldrhlt	r3, [r4, #12]
 8004180:	181b      	addge	r3, r3, r0
 8004182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004186:	bfac      	ite	ge
 8004188:	6563      	strge	r3, [r4, #84]	@ 0x54
 800418a:	81a3      	strhlt	r3, [r4, #12]
 800418c:	bd10      	pop	{r4, pc}

0800418e <__swrite>:
 800418e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	461f      	mov	r7, r3
 8004194:	898b      	ldrh	r3, [r1, #12]
 8004196:	05db      	lsls	r3, r3, #23
 8004198:	4605      	mov	r5, r0
 800419a:	460c      	mov	r4, r1
 800419c:	4616      	mov	r6, r2
 800419e:	d505      	bpl.n	80041ac <__swrite+0x1e>
 80041a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a4:	2302      	movs	r3, #2
 80041a6:	2200      	movs	r2, #0
 80041a8:	f000 f8d0 	bl	800434c <_lseek_r>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	4632      	mov	r2, r6
 80041ba:	463b      	mov	r3, r7
 80041bc:	4628      	mov	r0, r5
 80041be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041c2:	f000 b8e7 	b.w	8004394 <_write_r>

080041c6 <__sseek>:
 80041c6:	b510      	push	{r4, lr}
 80041c8:	460c      	mov	r4, r1
 80041ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ce:	f000 f8bd 	bl	800434c <_lseek_r>
 80041d2:	1c43      	adds	r3, r0, #1
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	bf15      	itete	ne
 80041d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041e2:	81a3      	strheq	r3, [r4, #12]
 80041e4:	bf18      	it	ne
 80041e6:	81a3      	strhne	r3, [r4, #12]
 80041e8:	bd10      	pop	{r4, pc}

080041ea <__sclose>:
 80041ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ee:	f000 b89d 	b.w	800432c <_close_r>

080041f2 <__swbuf_r>:
 80041f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f4:	460e      	mov	r6, r1
 80041f6:	4614      	mov	r4, r2
 80041f8:	4605      	mov	r5, r0
 80041fa:	b118      	cbz	r0, 8004204 <__swbuf_r+0x12>
 80041fc:	6a03      	ldr	r3, [r0, #32]
 80041fe:	b90b      	cbnz	r3, 8004204 <__swbuf_r+0x12>
 8004200:	f7ff ff0e 	bl	8004020 <__sinit>
 8004204:	69a3      	ldr	r3, [r4, #24]
 8004206:	60a3      	str	r3, [r4, #8]
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	071a      	lsls	r2, r3, #28
 800420c:	d501      	bpl.n	8004212 <__swbuf_r+0x20>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	b943      	cbnz	r3, 8004224 <__swbuf_r+0x32>
 8004212:	4621      	mov	r1, r4
 8004214:	4628      	mov	r0, r5
 8004216:	f000 f82b 	bl	8004270 <__swsetup_r>
 800421a:	b118      	cbz	r0, 8004224 <__swbuf_r+0x32>
 800421c:	f04f 37ff 	mov.w	r7, #4294967295
 8004220:	4638      	mov	r0, r7
 8004222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	6922      	ldr	r2, [r4, #16]
 8004228:	1a98      	subs	r0, r3, r2
 800422a:	6963      	ldr	r3, [r4, #20]
 800422c:	b2f6      	uxtb	r6, r6
 800422e:	4283      	cmp	r3, r0
 8004230:	4637      	mov	r7, r6
 8004232:	dc05      	bgt.n	8004240 <__swbuf_r+0x4e>
 8004234:	4621      	mov	r1, r4
 8004236:	4628      	mov	r0, r5
 8004238:	f000 fd38 	bl	8004cac <_fflush_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	d1ed      	bne.n	800421c <__swbuf_r+0x2a>
 8004240:	68a3      	ldr	r3, [r4, #8]
 8004242:	3b01      	subs	r3, #1
 8004244:	60a3      	str	r3, [r4, #8]
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	6022      	str	r2, [r4, #0]
 800424c:	701e      	strb	r6, [r3, #0]
 800424e:	6962      	ldr	r2, [r4, #20]
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	429a      	cmp	r2, r3
 8004254:	d004      	beq.n	8004260 <__swbuf_r+0x6e>
 8004256:	89a3      	ldrh	r3, [r4, #12]
 8004258:	07db      	lsls	r3, r3, #31
 800425a:	d5e1      	bpl.n	8004220 <__swbuf_r+0x2e>
 800425c:	2e0a      	cmp	r6, #10
 800425e:	d1df      	bne.n	8004220 <__swbuf_r+0x2e>
 8004260:	4621      	mov	r1, r4
 8004262:	4628      	mov	r0, r5
 8004264:	f000 fd22 	bl	8004cac <_fflush_r>
 8004268:	2800      	cmp	r0, #0
 800426a:	d0d9      	beq.n	8004220 <__swbuf_r+0x2e>
 800426c:	e7d6      	b.n	800421c <__swbuf_r+0x2a>
	...

08004270 <__swsetup_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4b29      	ldr	r3, [pc, #164]	@ (8004318 <__swsetup_r+0xa8>)
 8004274:	4605      	mov	r5, r0
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	460c      	mov	r4, r1
 800427a:	b118      	cbz	r0, 8004284 <__swsetup_r+0x14>
 800427c:	6a03      	ldr	r3, [r0, #32]
 800427e:	b90b      	cbnz	r3, 8004284 <__swsetup_r+0x14>
 8004280:	f7ff fece 	bl	8004020 <__sinit>
 8004284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004288:	0719      	lsls	r1, r3, #28
 800428a:	d422      	bmi.n	80042d2 <__swsetup_r+0x62>
 800428c:	06da      	lsls	r2, r3, #27
 800428e:	d407      	bmi.n	80042a0 <__swsetup_r+0x30>
 8004290:	2209      	movs	r2, #9
 8004292:	602a      	str	r2, [r5, #0]
 8004294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004298:	81a3      	strh	r3, [r4, #12]
 800429a:	f04f 30ff 	mov.w	r0, #4294967295
 800429e:	e033      	b.n	8004308 <__swsetup_r+0x98>
 80042a0:	0758      	lsls	r0, r3, #29
 80042a2:	d512      	bpl.n	80042ca <__swsetup_r+0x5a>
 80042a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042a6:	b141      	cbz	r1, 80042ba <__swsetup_r+0x4a>
 80042a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042ac:	4299      	cmp	r1, r3
 80042ae:	d002      	beq.n	80042b6 <__swsetup_r+0x46>
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 f8af 	bl	8004414 <_free_r>
 80042b6:	2300      	movs	r3, #0
 80042b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	2300      	movs	r3, #0
 80042c4:	6063      	str	r3, [r4, #4]
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f043 0308 	orr.w	r3, r3, #8
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	b94b      	cbnz	r3, 80042ea <__swsetup_r+0x7a>
 80042d6:	89a3      	ldrh	r3, [r4, #12]
 80042d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e0:	d003      	beq.n	80042ea <__swsetup_r+0x7a>
 80042e2:	4621      	mov	r1, r4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 fd2f 	bl	8004d48 <__smakebuf_r>
 80042ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ee:	f013 0201 	ands.w	r2, r3, #1
 80042f2:	d00a      	beq.n	800430a <__swsetup_r+0x9a>
 80042f4:	2200      	movs	r2, #0
 80042f6:	60a2      	str	r2, [r4, #8]
 80042f8:	6962      	ldr	r2, [r4, #20]
 80042fa:	4252      	negs	r2, r2
 80042fc:	61a2      	str	r2, [r4, #24]
 80042fe:	6922      	ldr	r2, [r4, #16]
 8004300:	b942      	cbnz	r2, 8004314 <__swsetup_r+0xa4>
 8004302:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004306:	d1c5      	bne.n	8004294 <__swsetup_r+0x24>
 8004308:	bd38      	pop	{r3, r4, r5, pc}
 800430a:	0799      	lsls	r1, r3, #30
 800430c:	bf58      	it	pl
 800430e:	6962      	ldrpl	r2, [r4, #20]
 8004310:	60a2      	str	r2, [r4, #8]
 8004312:	e7f4      	b.n	80042fe <__swsetup_r+0x8e>
 8004314:	2000      	movs	r0, #0
 8004316:	e7f7      	b.n	8004308 <__swsetup_r+0x98>
 8004318:	20000198 	.word	0x20000198

0800431c <memset>:
 800431c:	4402      	add	r2, r0
 800431e:	4603      	mov	r3, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	d100      	bne.n	8004326 <memset+0xa>
 8004324:	4770      	bx	lr
 8004326:	f803 1b01 	strb.w	r1, [r3], #1
 800432a:	e7f9      	b.n	8004320 <memset+0x4>

0800432c <_close_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4d06      	ldr	r5, [pc, #24]	@ (8004348 <_close_r+0x1c>)
 8004330:	2300      	movs	r3, #0
 8004332:	4604      	mov	r4, r0
 8004334:	4608      	mov	r0, r1
 8004336:	602b      	str	r3, [r5, #0]
 8004338:	f7fd fac8 	bl	80018cc <_close>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_close_r+0x1a>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_close_r+0x1a>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	200003d0 	.word	0x200003d0

0800434c <_lseek_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d07      	ldr	r5, [pc, #28]	@ (800436c <_lseek_r+0x20>)
 8004350:	4604      	mov	r4, r0
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	2200      	movs	r2, #0
 8004358:	602a      	str	r2, [r5, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f7fd fadd 	bl	800191a <_lseek>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_lseek_r+0x1e>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_lseek_r+0x1e>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	200003d0 	.word	0x200003d0

08004370 <_read_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	@ (8004390 <_read_r+0x20>)
 8004374:	4604      	mov	r4, r0
 8004376:	4608      	mov	r0, r1
 8004378:	4611      	mov	r1, r2
 800437a:	2200      	movs	r2, #0
 800437c:	602a      	str	r2, [r5, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	f7fd fa6b 	bl	800185a <_read>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_read_r+0x1e>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_read_r+0x1e>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	200003d0 	.word	0x200003d0

08004394 <_write_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d07      	ldr	r5, [pc, #28]	@ (80043b4 <_write_r+0x20>)
 8004398:	4604      	mov	r4, r0
 800439a:	4608      	mov	r0, r1
 800439c:	4611      	mov	r1, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	602a      	str	r2, [r5, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f7fd fa76 	bl	8001894 <_write>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d102      	bne.n	80043b2 <_write_r+0x1e>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	b103      	cbz	r3, 80043b2 <_write_r+0x1e>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	200003d0 	.word	0x200003d0

080043b8 <__errno>:
 80043b8:	4b01      	ldr	r3, [pc, #4]	@ (80043c0 <__errno+0x8>)
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000198 	.word	0x20000198

080043c4 <__libc_init_array>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	4d0d      	ldr	r5, [pc, #52]	@ (80043fc <__libc_init_array+0x38>)
 80043c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004400 <__libc_init_array+0x3c>)
 80043ca:	1b64      	subs	r4, r4, r5
 80043cc:	10a4      	asrs	r4, r4, #2
 80043ce:	2600      	movs	r6, #0
 80043d0:	42a6      	cmp	r6, r4
 80043d2:	d109      	bne.n	80043e8 <__libc_init_array+0x24>
 80043d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004404 <__libc_init_array+0x40>)
 80043d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004408 <__libc_init_array+0x44>)
 80043d8:	f000 fd24 	bl	8004e24 <_init>
 80043dc:	1b64      	subs	r4, r4, r5
 80043de:	10a4      	asrs	r4, r4, #2
 80043e0:	2600      	movs	r6, #0
 80043e2:	42a6      	cmp	r6, r4
 80043e4:	d105      	bne.n	80043f2 <__libc_init_array+0x2e>
 80043e6:	bd70      	pop	{r4, r5, r6, pc}
 80043e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ec:	4798      	blx	r3
 80043ee:	3601      	adds	r6, #1
 80043f0:	e7ee      	b.n	80043d0 <__libc_init_array+0xc>
 80043f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f6:	4798      	blx	r3
 80043f8:	3601      	adds	r6, #1
 80043fa:	e7f2      	b.n	80043e2 <__libc_init_array+0x1e>
 80043fc:	08004f18 	.word	0x08004f18
 8004400:	08004f18 	.word	0x08004f18
 8004404:	08004f18 	.word	0x08004f18
 8004408:	08004f1c 	.word	0x08004f1c

0800440c <__retarget_lock_init_recursive>:
 800440c:	4770      	bx	lr

0800440e <__retarget_lock_acquire_recursive>:
 800440e:	4770      	bx	lr

08004410 <__retarget_lock_release_recursive>:
 8004410:	4770      	bx	lr
	...

08004414 <_free_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	4605      	mov	r5, r0
 8004418:	2900      	cmp	r1, #0
 800441a:	d041      	beq.n	80044a0 <_free_r+0x8c>
 800441c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004420:	1f0c      	subs	r4, r1, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	bfb8      	it	lt
 8004426:	18e4      	addlt	r4, r4, r3
 8004428:	f000 f8e0 	bl	80045ec <__malloc_lock>
 800442c:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <_free_r+0x90>)
 800442e:	6813      	ldr	r3, [r2, #0]
 8004430:	b933      	cbnz	r3, 8004440 <_free_r+0x2c>
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	6014      	str	r4, [r2, #0]
 8004436:	4628      	mov	r0, r5
 8004438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800443c:	f000 b8dc 	b.w	80045f8 <__malloc_unlock>
 8004440:	42a3      	cmp	r3, r4
 8004442:	d908      	bls.n	8004456 <_free_r+0x42>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	1821      	adds	r1, r4, r0
 8004448:	428b      	cmp	r3, r1
 800444a:	bf01      	itttt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	1809      	addeq	r1, r1, r0
 8004452:	6021      	streq	r1, [r4, #0]
 8004454:	e7ed      	b.n	8004432 <_free_r+0x1e>
 8004456:	461a      	mov	r2, r3
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b10b      	cbz	r3, 8004460 <_free_r+0x4c>
 800445c:	42a3      	cmp	r3, r4
 800445e:	d9fa      	bls.n	8004456 <_free_r+0x42>
 8004460:	6811      	ldr	r1, [r2, #0]
 8004462:	1850      	adds	r0, r2, r1
 8004464:	42a0      	cmp	r0, r4
 8004466:	d10b      	bne.n	8004480 <_free_r+0x6c>
 8004468:	6820      	ldr	r0, [r4, #0]
 800446a:	4401      	add	r1, r0
 800446c:	1850      	adds	r0, r2, r1
 800446e:	4283      	cmp	r3, r0
 8004470:	6011      	str	r1, [r2, #0]
 8004472:	d1e0      	bne.n	8004436 <_free_r+0x22>
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	6053      	str	r3, [r2, #4]
 800447a:	4408      	add	r0, r1
 800447c:	6010      	str	r0, [r2, #0]
 800447e:	e7da      	b.n	8004436 <_free_r+0x22>
 8004480:	d902      	bls.n	8004488 <_free_r+0x74>
 8004482:	230c      	movs	r3, #12
 8004484:	602b      	str	r3, [r5, #0]
 8004486:	e7d6      	b.n	8004436 <_free_r+0x22>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	1821      	adds	r1, r4, r0
 800448c:	428b      	cmp	r3, r1
 800448e:	bf04      	itt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	6063      	str	r3, [r4, #4]
 8004496:	bf04      	itt	eq
 8004498:	1809      	addeq	r1, r1, r0
 800449a:	6021      	streq	r1, [r4, #0]
 800449c:	6054      	str	r4, [r2, #4]
 800449e:	e7ca      	b.n	8004436 <_free_r+0x22>
 80044a0:	bd38      	pop	{r3, r4, r5, pc}
 80044a2:	bf00      	nop
 80044a4:	200003dc 	.word	0x200003dc

080044a8 <sbrk_aligned>:
 80044a8:	b570      	push	{r4, r5, r6, lr}
 80044aa:	4e0f      	ldr	r6, [pc, #60]	@ (80044e8 <sbrk_aligned+0x40>)
 80044ac:	460c      	mov	r4, r1
 80044ae:	6831      	ldr	r1, [r6, #0]
 80044b0:	4605      	mov	r5, r0
 80044b2:	b911      	cbnz	r1, 80044ba <sbrk_aligned+0x12>
 80044b4:	f000 fca6 	bl	8004e04 <_sbrk_r>
 80044b8:	6030      	str	r0, [r6, #0]
 80044ba:	4621      	mov	r1, r4
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 fca1 	bl	8004e04 <_sbrk_r>
 80044c2:	1c43      	adds	r3, r0, #1
 80044c4:	d103      	bne.n	80044ce <sbrk_aligned+0x26>
 80044c6:	f04f 34ff 	mov.w	r4, #4294967295
 80044ca:	4620      	mov	r0, r4
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d0f8      	beq.n	80044ca <sbrk_aligned+0x22>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fc92 	bl	8004e04 <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d1f2      	bne.n	80044ca <sbrk_aligned+0x22>
 80044e4:	e7ef      	b.n	80044c6 <sbrk_aligned+0x1e>
 80044e6:	bf00      	nop
 80044e8:	200003d8 	.word	0x200003d8

080044ec <_malloc_r>:
 80044ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f0:	1ccd      	adds	r5, r1, #3
 80044f2:	f025 0503 	bic.w	r5, r5, #3
 80044f6:	3508      	adds	r5, #8
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	bf38      	it	cc
 80044fc:	250c      	movcc	r5, #12
 80044fe:	2d00      	cmp	r5, #0
 8004500:	4606      	mov	r6, r0
 8004502:	db01      	blt.n	8004508 <_malloc_r+0x1c>
 8004504:	42a9      	cmp	r1, r5
 8004506:	d904      	bls.n	8004512 <_malloc_r+0x26>
 8004508:	230c      	movs	r3, #12
 800450a:	6033      	str	r3, [r6, #0]
 800450c:	2000      	movs	r0, #0
 800450e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004512:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045e8 <_malloc_r+0xfc>
 8004516:	f000 f869 	bl	80045ec <__malloc_lock>
 800451a:	f8d8 3000 	ldr.w	r3, [r8]
 800451e:	461c      	mov	r4, r3
 8004520:	bb44      	cbnz	r4, 8004574 <_malloc_r+0x88>
 8004522:	4629      	mov	r1, r5
 8004524:	4630      	mov	r0, r6
 8004526:	f7ff ffbf 	bl	80044a8 <sbrk_aligned>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	4604      	mov	r4, r0
 800452e:	d158      	bne.n	80045e2 <_malloc_r+0xf6>
 8004530:	f8d8 4000 	ldr.w	r4, [r8]
 8004534:	4627      	mov	r7, r4
 8004536:	2f00      	cmp	r7, #0
 8004538:	d143      	bne.n	80045c2 <_malloc_r+0xd6>
 800453a:	2c00      	cmp	r4, #0
 800453c:	d04b      	beq.n	80045d6 <_malloc_r+0xea>
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	4639      	mov	r1, r7
 8004542:	4630      	mov	r0, r6
 8004544:	eb04 0903 	add.w	r9, r4, r3
 8004548:	f000 fc5c 	bl	8004e04 <_sbrk_r>
 800454c:	4581      	cmp	r9, r0
 800454e:	d142      	bne.n	80045d6 <_malloc_r+0xea>
 8004550:	6821      	ldr	r1, [r4, #0]
 8004552:	1a6d      	subs	r5, r5, r1
 8004554:	4629      	mov	r1, r5
 8004556:	4630      	mov	r0, r6
 8004558:	f7ff ffa6 	bl	80044a8 <sbrk_aligned>
 800455c:	3001      	adds	r0, #1
 800455e:	d03a      	beq.n	80045d6 <_malloc_r+0xea>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	442b      	add	r3, r5
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	f8d8 3000 	ldr.w	r3, [r8]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	bb62      	cbnz	r2, 80045c8 <_malloc_r+0xdc>
 800456e:	f8c8 7000 	str.w	r7, [r8]
 8004572:	e00f      	b.n	8004594 <_malloc_r+0xa8>
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	1b52      	subs	r2, r2, r5
 8004578:	d420      	bmi.n	80045bc <_malloc_r+0xd0>
 800457a:	2a0b      	cmp	r2, #11
 800457c:	d917      	bls.n	80045ae <_malloc_r+0xc2>
 800457e:	1961      	adds	r1, r4, r5
 8004580:	42a3      	cmp	r3, r4
 8004582:	6025      	str	r5, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	6059      	strne	r1, [r3, #4]
 8004588:	6863      	ldr	r3, [r4, #4]
 800458a:	bf08      	it	eq
 800458c:	f8c8 1000 	streq.w	r1, [r8]
 8004590:	5162      	str	r2, [r4, r5]
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	4630      	mov	r0, r6
 8004596:	f000 f82f 	bl	80045f8 <__malloc_unlock>
 800459a:	f104 000b 	add.w	r0, r4, #11
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	f020 0007 	bic.w	r0, r0, #7
 80045a4:	1ac2      	subs	r2, r0, r3
 80045a6:	bf1c      	itt	ne
 80045a8:	1a1b      	subne	r3, r3, r0
 80045aa:	50a3      	strne	r3, [r4, r2]
 80045ac:	e7af      	b.n	800450e <_malloc_r+0x22>
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	42a3      	cmp	r3, r4
 80045b2:	bf0c      	ite	eq
 80045b4:	f8c8 2000 	streq.w	r2, [r8]
 80045b8:	605a      	strne	r2, [r3, #4]
 80045ba:	e7eb      	b.n	8004594 <_malloc_r+0xa8>
 80045bc:	4623      	mov	r3, r4
 80045be:	6864      	ldr	r4, [r4, #4]
 80045c0:	e7ae      	b.n	8004520 <_malloc_r+0x34>
 80045c2:	463c      	mov	r4, r7
 80045c4:	687f      	ldr	r7, [r7, #4]
 80045c6:	e7b6      	b.n	8004536 <_malloc_r+0x4a>
 80045c8:	461a      	mov	r2, r3
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d1fb      	bne.n	80045c8 <_malloc_r+0xdc>
 80045d0:	2300      	movs	r3, #0
 80045d2:	6053      	str	r3, [r2, #4]
 80045d4:	e7de      	b.n	8004594 <_malloc_r+0xa8>
 80045d6:	230c      	movs	r3, #12
 80045d8:	6033      	str	r3, [r6, #0]
 80045da:	4630      	mov	r0, r6
 80045dc:	f000 f80c 	bl	80045f8 <__malloc_unlock>
 80045e0:	e794      	b.n	800450c <_malloc_r+0x20>
 80045e2:	6005      	str	r5, [r0, #0]
 80045e4:	e7d6      	b.n	8004594 <_malloc_r+0xa8>
 80045e6:	bf00      	nop
 80045e8:	200003dc 	.word	0x200003dc

080045ec <__malloc_lock>:
 80045ec:	4801      	ldr	r0, [pc, #4]	@ (80045f4 <__malloc_lock+0x8>)
 80045ee:	f7ff bf0e 	b.w	800440e <__retarget_lock_acquire_recursive>
 80045f2:	bf00      	nop
 80045f4:	200003d4 	.word	0x200003d4

080045f8 <__malloc_unlock>:
 80045f8:	4801      	ldr	r0, [pc, #4]	@ (8004600 <__malloc_unlock+0x8>)
 80045fa:	f7ff bf09 	b.w	8004410 <__retarget_lock_release_recursive>
 80045fe:	bf00      	nop
 8004600:	200003d4 	.word	0x200003d4

08004604 <__sfputc_r>:
 8004604:	6893      	ldr	r3, [r2, #8]
 8004606:	3b01      	subs	r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	b410      	push	{r4}
 800460c:	6093      	str	r3, [r2, #8]
 800460e:	da08      	bge.n	8004622 <__sfputc_r+0x1e>
 8004610:	6994      	ldr	r4, [r2, #24]
 8004612:	42a3      	cmp	r3, r4
 8004614:	db01      	blt.n	800461a <__sfputc_r+0x16>
 8004616:	290a      	cmp	r1, #10
 8004618:	d103      	bne.n	8004622 <__sfputc_r+0x1e>
 800461a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800461e:	f7ff bde8 	b.w	80041f2 <__swbuf_r>
 8004622:	6813      	ldr	r3, [r2, #0]
 8004624:	1c58      	adds	r0, r3, #1
 8004626:	6010      	str	r0, [r2, #0]
 8004628:	7019      	strb	r1, [r3, #0]
 800462a:	4608      	mov	r0, r1
 800462c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004630:	4770      	bx	lr

08004632 <__sfputs_r>:
 8004632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004634:	4606      	mov	r6, r0
 8004636:	460f      	mov	r7, r1
 8004638:	4614      	mov	r4, r2
 800463a:	18d5      	adds	r5, r2, r3
 800463c:	42ac      	cmp	r4, r5
 800463e:	d101      	bne.n	8004644 <__sfputs_r+0x12>
 8004640:	2000      	movs	r0, #0
 8004642:	e007      	b.n	8004654 <__sfputs_r+0x22>
 8004644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004648:	463a      	mov	r2, r7
 800464a:	4630      	mov	r0, r6
 800464c:	f7ff ffda 	bl	8004604 <__sfputc_r>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d1f3      	bne.n	800463c <__sfputs_r+0xa>
 8004654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004658 <_vfiprintf_r>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	460d      	mov	r5, r1
 800465e:	b09d      	sub	sp, #116	@ 0x74
 8004660:	4614      	mov	r4, r2
 8004662:	4698      	mov	r8, r3
 8004664:	4606      	mov	r6, r0
 8004666:	b118      	cbz	r0, 8004670 <_vfiprintf_r+0x18>
 8004668:	6a03      	ldr	r3, [r0, #32]
 800466a:	b90b      	cbnz	r3, 8004670 <_vfiprintf_r+0x18>
 800466c:	f7ff fcd8 	bl	8004020 <__sinit>
 8004670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004672:	07d9      	lsls	r1, r3, #31
 8004674:	d405      	bmi.n	8004682 <_vfiprintf_r+0x2a>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	059a      	lsls	r2, r3, #22
 800467a:	d402      	bmi.n	8004682 <_vfiprintf_r+0x2a>
 800467c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800467e:	f7ff fec6 	bl	800440e <__retarget_lock_acquire_recursive>
 8004682:	89ab      	ldrh	r3, [r5, #12]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	d501      	bpl.n	800468c <_vfiprintf_r+0x34>
 8004688:	692b      	ldr	r3, [r5, #16]
 800468a:	b99b      	cbnz	r3, 80046b4 <_vfiprintf_r+0x5c>
 800468c:	4629      	mov	r1, r5
 800468e:	4630      	mov	r0, r6
 8004690:	f7ff fdee 	bl	8004270 <__swsetup_r>
 8004694:	b170      	cbz	r0, 80046b4 <_vfiprintf_r+0x5c>
 8004696:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004698:	07dc      	lsls	r4, r3, #31
 800469a:	d504      	bpl.n	80046a6 <_vfiprintf_r+0x4e>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	b01d      	add	sp, #116	@ 0x74
 80046a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a6:	89ab      	ldrh	r3, [r5, #12]
 80046a8:	0598      	lsls	r0, r3, #22
 80046aa:	d4f7      	bmi.n	800469c <_vfiprintf_r+0x44>
 80046ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ae:	f7ff feaf 	bl	8004410 <__retarget_lock_release_recursive>
 80046b2:	e7f3      	b.n	800469c <_vfiprintf_r+0x44>
 80046b4:	2300      	movs	r3, #0
 80046b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b8:	2320      	movs	r3, #32
 80046ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046be:	f8cd 800c 	str.w	r8, [sp, #12]
 80046c2:	2330      	movs	r3, #48	@ 0x30
 80046c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004874 <_vfiprintf_r+0x21c>
 80046c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046cc:	f04f 0901 	mov.w	r9, #1
 80046d0:	4623      	mov	r3, r4
 80046d2:	469a      	mov	sl, r3
 80046d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046d8:	b10a      	cbz	r2, 80046de <_vfiprintf_r+0x86>
 80046da:	2a25      	cmp	r2, #37	@ 0x25
 80046dc:	d1f9      	bne.n	80046d2 <_vfiprintf_r+0x7a>
 80046de:	ebba 0b04 	subs.w	fp, sl, r4
 80046e2:	d00b      	beq.n	80046fc <_vfiprintf_r+0xa4>
 80046e4:	465b      	mov	r3, fp
 80046e6:	4622      	mov	r2, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	4630      	mov	r0, r6
 80046ec:	f7ff ffa1 	bl	8004632 <__sfputs_r>
 80046f0:	3001      	adds	r0, #1
 80046f2:	f000 80a7 	beq.w	8004844 <_vfiprintf_r+0x1ec>
 80046f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046f8:	445a      	add	r2, fp
 80046fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80046fc:	f89a 3000 	ldrb.w	r3, [sl]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 809f 	beq.w	8004844 <_vfiprintf_r+0x1ec>
 8004706:	2300      	movs	r3, #0
 8004708:	f04f 32ff 	mov.w	r2, #4294967295
 800470c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004710:	f10a 0a01 	add.w	sl, sl, #1
 8004714:	9304      	str	r3, [sp, #16]
 8004716:	9307      	str	r3, [sp, #28]
 8004718:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800471c:	931a      	str	r3, [sp, #104]	@ 0x68
 800471e:	4654      	mov	r4, sl
 8004720:	2205      	movs	r2, #5
 8004722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004726:	4853      	ldr	r0, [pc, #332]	@ (8004874 <_vfiprintf_r+0x21c>)
 8004728:	f7fc fc92 	bl	8001050 <memchr>
 800472c:	9a04      	ldr	r2, [sp, #16]
 800472e:	b9d8      	cbnz	r0, 8004768 <_vfiprintf_r+0x110>
 8004730:	06d1      	lsls	r1, r2, #27
 8004732:	bf44      	itt	mi
 8004734:	2320      	movmi	r3, #32
 8004736:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800473a:	0713      	lsls	r3, r2, #28
 800473c:	bf44      	itt	mi
 800473e:	232b      	movmi	r3, #43	@ 0x2b
 8004740:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004744:	f89a 3000 	ldrb.w	r3, [sl]
 8004748:	2b2a      	cmp	r3, #42	@ 0x2a
 800474a:	d015      	beq.n	8004778 <_vfiprintf_r+0x120>
 800474c:	9a07      	ldr	r2, [sp, #28]
 800474e:	4654      	mov	r4, sl
 8004750:	2000      	movs	r0, #0
 8004752:	f04f 0c0a 	mov.w	ip, #10
 8004756:	4621      	mov	r1, r4
 8004758:	f811 3b01 	ldrb.w	r3, [r1], #1
 800475c:	3b30      	subs	r3, #48	@ 0x30
 800475e:	2b09      	cmp	r3, #9
 8004760:	d94b      	bls.n	80047fa <_vfiprintf_r+0x1a2>
 8004762:	b1b0      	cbz	r0, 8004792 <_vfiprintf_r+0x13a>
 8004764:	9207      	str	r2, [sp, #28]
 8004766:	e014      	b.n	8004792 <_vfiprintf_r+0x13a>
 8004768:	eba0 0308 	sub.w	r3, r0, r8
 800476c:	fa09 f303 	lsl.w	r3, r9, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	9304      	str	r3, [sp, #16]
 8004774:	46a2      	mov	sl, r4
 8004776:	e7d2      	b.n	800471e <_vfiprintf_r+0xc6>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	1d19      	adds	r1, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	9103      	str	r1, [sp, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfbb      	ittet	lt
 8004784:	425b      	neglt	r3, r3
 8004786:	f042 0202 	orrlt.w	r2, r2, #2
 800478a:	9307      	strge	r3, [sp, #28]
 800478c:	9307      	strlt	r3, [sp, #28]
 800478e:	bfb8      	it	lt
 8004790:	9204      	strlt	r2, [sp, #16]
 8004792:	7823      	ldrb	r3, [r4, #0]
 8004794:	2b2e      	cmp	r3, #46	@ 0x2e
 8004796:	d10a      	bne.n	80047ae <_vfiprintf_r+0x156>
 8004798:	7863      	ldrb	r3, [r4, #1]
 800479a:	2b2a      	cmp	r3, #42	@ 0x2a
 800479c:	d132      	bne.n	8004804 <_vfiprintf_r+0x1ac>
 800479e:	9b03      	ldr	r3, [sp, #12]
 80047a0:	1d1a      	adds	r2, r3, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	9203      	str	r2, [sp, #12]
 80047a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047aa:	3402      	adds	r4, #2
 80047ac:	9305      	str	r3, [sp, #20]
 80047ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004884 <_vfiprintf_r+0x22c>
 80047b2:	7821      	ldrb	r1, [r4, #0]
 80047b4:	2203      	movs	r2, #3
 80047b6:	4650      	mov	r0, sl
 80047b8:	f7fc fc4a 	bl	8001050 <memchr>
 80047bc:	b138      	cbz	r0, 80047ce <_vfiprintf_r+0x176>
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	eba0 000a 	sub.w	r0, r0, sl
 80047c4:	2240      	movs	r2, #64	@ 0x40
 80047c6:	4082      	lsls	r2, r0
 80047c8:	4313      	orrs	r3, r2
 80047ca:	3401      	adds	r4, #1
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d2:	4829      	ldr	r0, [pc, #164]	@ (8004878 <_vfiprintf_r+0x220>)
 80047d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047d8:	2206      	movs	r2, #6
 80047da:	f7fc fc39 	bl	8001050 <memchr>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d03f      	beq.n	8004862 <_vfiprintf_r+0x20a>
 80047e2:	4b26      	ldr	r3, [pc, #152]	@ (800487c <_vfiprintf_r+0x224>)
 80047e4:	bb1b      	cbnz	r3, 800482e <_vfiprintf_r+0x1d6>
 80047e6:	9b03      	ldr	r3, [sp, #12]
 80047e8:	3307      	adds	r3, #7
 80047ea:	f023 0307 	bic.w	r3, r3, #7
 80047ee:	3308      	adds	r3, #8
 80047f0:	9303      	str	r3, [sp, #12]
 80047f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f4:	443b      	add	r3, r7
 80047f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f8:	e76a      	b.n	80046d0 <_vfiprintf_r+0x78>
 80047fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80047fe:	460c      	mov	r4, r1
 8004800:	2001      	movs	r0, #1
 8004802:	e7a8      	b.n	8004756 <_vfiprintf_r+0xfe>
 8004804:	2300      	movs	r3, #0
 8004806:	3401      	adds	r4, #1
 8004808:	9305      	str	r3, [sp, #20]
 800480a:	4619      	mov	r1, r3
 800480c:	f04f 0c0a 	mov.w	ip, #10
 8004810:	4620      	mov	r0, r4
 8004812:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004816:	3a30      	subs	r2, #48	@ 0x30
 8004818:	2a09      	cmp	r2, #9
 800481a:	d903      	bls.n	8004824 <_vfiprintf_r+0x1cc>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0c6      	beq.n	80047ae <_vfiprintf_r+0x156>
 8004820:	9105      	str	r1, [sp, #20]
 8004822:	e7c4      	b.n	80047ae <_vfiprintf_r+0x156>
 8004824:	fb0c 2101 	mla	r1, ip, r1, r2
 8004828:	4604      	mov	r4, r0
 800482a:	2301      	movs	r3, #1
 800482c:	e7f0      	b.n	8004810 <_vfiprintf_r+0x1b8>
 800482e:	ab03      	add	r3, sp, #12
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	462a      	mov	r2, r5
 8004834:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <_vfiprintf_r+0x228>)
 8004836:	a904      	add	r1, sp, #16
 8004838:	4630      	mov	r0, r6
 800483a:	f3af 8000 	nop.w
 800483e:	4607      	mov	r7, r0
 8004840:	1c78      	adds	r0, r7, #1
 8004842:	d1d6      	bne.n	80047f2 <_vfiprintf_r+0x19a>
 8004844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004846:	07d9      	lsls	r1, r3, #31
 8004848:	d405      	bmi.n	8004856 <_vfiprintf_r+0x1fe>
 800484a:	89ab      	ldrh	r3, [r5, #12]
 800484c:	059a      	lsls	r2, r3, #22
 800484e:	d402      	bmi.n	8004856 <_vfiprintf_r+0x1fe>
 8004850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004852:	f7ff fddd 	bl	8004410 <__retarget_lock_release_recursive>
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	065b      	lsls	r3, r3, #25
 800485a:	f53f af1f 	bmi.w	800469c <_vfiprintf_r+0x44>
 800485e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004860:	e71e      	b.n	80046a0 <_vfiprintf_r+0x48>
 8004862:	ab03      	add	r3, sp, #12
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	462a      	mov	r2, r5
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <_vfiprintf_r+0x228>)
 800486a:	a904      	add	r1, sp, #16
 800486c:	4630      	mov	r0, r6
 800486e:	f000 f879 	bl	8004964 <_printf_i>
 8004872:	e7e4      	b.n	800483e <_vfiprintf_r+0x1e6>
 8004874:	08004edc 	.word	0x08004edc
 8004878:	08004ee6 	.word	0x08004ee6
 800487c:	00000000 	.word	0x00000000
 8004880:	08004633 	.word	0x08004633
 8004884:	08004ee2 	.word	0x08004ee2

08004888 <_printf_common>:
 8004888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800488c:	4616      	mov	r6, r2
 800488e:	4698      	mov	r8, r3
 8004890:	688a      	ldr	r2, [r1, #8]
 8004892:	690b      	ldr	r3, [r1, #16]
 8004894:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004898:	4293      	cmp	r3, r2
 800489a:	bfb8      	it	lt
 800489c:	4613      	movlt	r3, r2
 800489e:	6033      	str	r3, [r6, #0]
 80048a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048a4:	4607      	mov	r7, r0
 80048a6:	460c      	mov	r4, r1
 80048a8:	b10a      	cbz	r2, 80048ae <_printf_common+0x26>
 80048aa:	3301      	adds	r3, #1
 80048ac:	6033      	str	r3, [r6, #0]
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	0699      	lsls	r1, r3, #26
 80048b2:	bf42      	ittt	mi
 80048b4:	6833      	ldrmi	r3, [r6, #0]
 80048b6:	3302      	addmi	r3, #2
 80048b8:	6033      	strmi	r3, [r6, #0]
 80048ba:	6825      	ldr	r5, [r4, #0]
 80048bc:	f015 0506 	ands.w	r5, r5, #6
 80048c0:	d106      	bne.n	80048d0 <_printf_common+0x48>
 80048c2:	f104 0a19 	add.w	sl, r4, #25
 80048c6:	68e3      	ldr	r3, [r4, #12]
 80048c8:	6832      	ldr	r2, [r6, #0]
 80048ca:	1a9b      	subs	r3, r3, r2
 80048cc:	42ab      	cmp	r3, r5
 80048ce:	dc26      	bgt.n	800491e <_printf_common+0x96>
 80048d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	3b00      	subs	r3, #0
 80048d8:	bf18      	it	ne
 80048da:	2301      	movne	r3, #1
 80048dc:	0692      	lsls	r2, r2, #26
 80048de:	d42b      	bmi.n	8004938 <_printf_common+0xb0>
 80048e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048e4:	4641      	mov	r1, r8
 80048e6:	4638      	mov	r0, r7
 80048e8:	47c8      	blx	r9
 80048ea:	3001      	adds	r0, #1
 80048ec:	d01e      	beq.n	800492c <_printf_common+0xa4>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	6922      	ldr	r2, [r4, #16]
 80048f2:	f003 0306 	and.w	r3, r3, #6
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf02      	ittt	eq
 80048fa:	68e5      	ldreq	r5, [r4, #12]
 80048fc:	6833      	ldreq	r3, [r6, #0]
 80048fe:	1aed      	subeq	r5, r5, r3
 8004900:	68a3      	ldr	r3, [r4, #8]
 8004902:	bf0c      	ite	eq
 8004904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004908:	2500      	movne	r5, #0
 800490a:	4293      	cmp	r3, r2
 800490c:	bfc4      	itt	gt
 800490e:	1a9b      	subgt	r3, r3, r2
 8004910:	18ed      	addgt	r5, r5, r3
 8004912:	2600      	movs	r6, #0
 8004914:	341a      	adds	r4, #26
 8004916:	42b5      	cmp	r5, r6
 8004918:	d11a      	bne.n	8004950 <_printf_common+0xc8>
 800491a:	2000      	movs	r0, #0
 800491c:	e008      	b.n	8004930 <_printf_common+0xa8>
 800491e:	2301      	movs	r3, #1
 8004920:	4652      	mov	r2, sl
 8004922:	4641      	mov	r1, r8
 8004924:	4638      	mov	r0, r7
 8004926:	47c8      	blx	r9
 8004928:	3001      	adds	r0, #1
 800492a:	d103      	bne.n	8004934 <_printf_common+0xac>
 800492c:	f04f 30ff 	mov.w	r0, #4294967295
 8004930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004934:	3501      	adds	r5, #1
 8004936:	e7c6      	b.n	80048c6 <_printf_common+0x3e>
 8004938:	18e1      	adds	r1, r4, r3
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	2030      	movs	r0, #48	@ 0x30
 800493e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004942:	4422      	add	r2, r4
 8004944:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004948:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800494c:	3302      	adds	r3, #2
 800494e:	e7c7      	b.n	80048e0 <_printf_common+0x58>
 8004950:	2301      	movs	r3, #1
 8004952:	4622      	mov	r2, r4
 8004954:	4641      	mov	r1, r8
 8004956:	4638      	mov	r0, r7
 8004958:	47c8      	blx	r9
 800495a:	3001      	adds	r0, #1
 800495c:	d0e6      	beq.n	800492c <_printf_common+0xa4>
 800495e:	3601      	adds	r6, #1
 8004960:	e7d9      	b.n	8004916 <_printf_common+0x8e>
	...

08004964 <_printf_i>:
 8004964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004968:	7e0f      	ldrb	r7, [r1, #24]
 800496a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800496c:	2f78      	cmp	r7, #120	@ 0x78
 800496e:	4691      	mov	r9, r2
 8004970:	4680      	mov	r8, r0
 8004972:	460c      	mov	r4, r1
 8004974:	469a      	mov	sl, r3
 8004976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800497a:	d807      	bhi.n	800498c <_printf_i+0x28>
 800497c:	2f62      	cmp	r7, #98	@ 0x62
 800497e:	d80a      	bhi.n	8004996 <_printf_i+0x32>
 8004980:	2f00      	cmp	r7, #0
 8004982:	f000 80d2 	beq.w	8004b2a <_printf_i+0x1c6>
 8004986:	2f58      	cmp	r7, #88	@ 0x58
 8004988:	f000 80b9 	beq.w	8004afe <_printf_i+0x19a>
 800498c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004994:	e03a      	b.n	8004a0c <_printf_i+0xa8>
 8004996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800499a:	2b15      	cmp	r3, #21
 800499c:	d8f6      	bhi.n	800498c <_printf_i+0x28>
 800499e:	a101      	add	r1, pc, #4	@ (adr r1, 80049a4 <_printf_i+0x40>)
 80049a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a4:	080049fd 	.word	0x080049fd
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	0800498d 	.word	0x0800498d
 80049b0:	0800498d 	.word	0x0800498d
 80049b4:	0800498d 	.word	0x0800498d
 80049b8:	0800498d 	.word	0x0800498d
 80049bc:	08004a11 	.word	0x08004a11
 80049c0:	0800498d 	.word	0x0800498d
 80049c4:	0800498d 	.word	0x0800498d
 80049c8:	0800498d 	.word	0x0800498d
 80049cc:	0800498d 	.word	0x0800498d
 80049d0:	08004b11 	.word	0x08004b11
 80049d4:	08004a3b 	.word	0x08004a3b
 80049d8:	08004acb 	.word	0x08004acb
 80049dc:	0800498d 	.word	0x0800498d
 80049e0:	0800498d 	.word	0x0800498d
 80049e4:	08004b33 	.word	0x08004b33
 80049e8:	0800498d 	.word	0x0800498d
 80049ec:	08004a3b 	.word	0x08004a3b
 80049f0:	0800498d 	.word	0x0800498d
 80049f4:	0800498d 	.word	0x0800498d
 80049f8:	08004ad3 	.word	0x08004ad3
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	1d1a      	adds	r2, r3, #4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6032      	str	r2, [r6, #0]
 8004a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e09d      	b.n	8004b4c <_printf_i+0x1e8>
 8004a10:	6833      	ldr	r3, [r6, #0]
 8004a12:	6820      	ldr	r0, [r4, #0]
 8004a14:	1d19      	adds	r1, r3, #4
 8004a16:	6031      	str	r1, [r6, #0]
 8004a18:	0606      	lsls	r6, r0, #24
 8004a1a:	d501      	bpl.n	8004a20 <_printf_i+0xbc>
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	e003      	b.n	8004a28 <_printf_i+0xc4>
 8004a20:	0645      	lsls	r5, r0, #25
 8004a22:	d5fb      	bpl.n	8004a1c <_printf_i+0xb8>
 8004a24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	da03      	bge.n	8004a34 <_printf_i+0xd0>
 8004a2c:	232d      	movs	r3, #45	@ 0x2d
 8004a2e:	426d      	negs	r5, r5
 8004a30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a34:	4859      	ldr	r0, [pc, #356]	@ (8004b9c <_printf_i+0x238>)
 8004a36:	230a      	movs	r3, #10
 8004a38:	e011      	b.n	8004a5e <_printf_i+0xfa>
 8004a3a:	6821      	ldr	r1, [r4, #0]
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	0608      	lsls	r0, r1, #24
 8004a40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a44:	d402      	bmi.n	8004a4c <_printf_i+0xe8>
 8004a46:	0649      	lsls	r1, r1, #25
 8004a48:	bf48      	it	mi
 8004a4a:	b2ad      	uxthmi	r5, r5
 8004a4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a4e:	4853      	ldr	r0, [pc, #332]	@ (8004b9c <_printf_i+0x238>)
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	bf14      	ite	ne
 8004a54:	230a      	movne	r3, #10
 8004a56:	2308      	moveq	r3, #8
 8004a58:	2100      	movs	r1, #0
 8004a5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a5e:	6866      	ldr	r6, [r4, #4]
 8004a60:	60a6      	str	r6, [r4, #8]
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	bfa2      	ittt	ge
 8004a66:	6821      	ldrge	r1, [r4, #0]
 8004a68:	f021 0104 	bicge.w	r1, r1, #4
 8004a6c:	6021      	strge	r1, [r4, #0]
 8004a6e:	b90d      	cbnz	r5, 8004a74 <_printf_i+0x110>
 8004a70:	2e00      	cmp	r6, #0
 8004a72:	d04b      	beq.n	8004b0c <_printf_i+0x1a8>
 8004a74:	4616      	mov	r6, r2
 8004a76:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a7a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a7e:	5dc7      	ldrb	r7, [r0, r7]
 8004a80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a84:	462f      	mov	r7, r5
 8004a86:	42bb      	cmp	r3, r7
 8004a88:	460d      	mov	r5, r1
 8004a8a:	d9f4      	bls.n	8004a76 <_printf_i+0x112>
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d10b      	bne.n	8004aa8 <_printf_i+0x144>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	07df      	lsls	r7, r3, #31
 8004a94:	d508      	bpl.n	8004aa8 <_printf_i+0x144>
 8004a96:	6923      	ldr	r3, [r4, #16]
 8004a98:	6861      	ldr	r1, [r4, #4]
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	bfde      	ittt	le
 8004a9e:	2330      	movle	r3, #48	@ 0x30
 8004aa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aa8:	1b92      	subs	r2, r2, r6
 8004aaa:	6122      	str	r2, [r4, #16]
 8004aac:	f8cd a000 	str.w	sl, [sp]
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	aa03      	add	r2, sp, #12
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	4640      	mov	r0, r8
 8004ab8:	f7ff fee6 	bl	8004888 <_printf_common>
 8004abc:	3001      	adds	r0, #1
 8004abe:	d14a      	bne.n	8004b56 <_printf_i+0x1f2>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	b004      	add	sp, #16
 8004ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	f043 0320 	orr.w	r3, r3, #32
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	4833      	ldr	r0, [pc, #204]	@ (8004ba0 <_printf_i+0x23c>)
 8004ad4:	2778      	movs	r7, #120	@ 0x78
 8004ad6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	6831      	ldr	r1, [r6, #0]
 8004ade:	061f      	lsls	r7, r3, #24
 8004ae0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ae4:	d402      	bmi.n	8004aec <_printf_i+0x188>
 8004ae6:	065f      	lsls	r7, r3, #25
 8004ae8:	bf48      	it	mi
 8004aea:	b2ad      	uxthmi	r5, r5
 8004aec:	6031      	str	r1, [r6, #0]
 8004aee:	07d9      	lsls	r1, r3, #31
 8004af0:	bf44      	itt	mi
 8004af2:	f043 0320 	orrmi.w	r3, r3, #32
 8004af6:	6023      	strmi	r3, [r4, #0]
 8004af8:	b11d      	cbz	r5, 8004b02 <_printf_i+0x19e>
 8004afa:	2310      	movs	r3, #16
 8004afc:	e7ac      	b.n	8004a58 <_printf_i+0xf4>
 8004afe:	4827      	ldr	r0, [pc, #156]	@ (8004b9c <_printf_i+0x238>)
 8004b00:	e7e9      	b.n	8004ad6 <_printf_i+0x172>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f023 0320 	bic.w	r3, r3, #32
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	e7f6      	b.n	8004afa <_printf_i+0x196>
 8004b0c:	4616      	mov	r6, r2
 8004b0e:	e7bd      	b.n	8004a8c <_printf_i+0x128>
 8004b10:	6833      	ldr	r3, [r6, #0]
 8004b12:	6825      	ldr	r5, [r4, #0]
 8004b14:	6961      	ldr	r1, [r4, #20]
 8004b16:	1d18      	adds	r0, r3, #4
 8004b18:	6030      	str	r0, [r6, #0]
 8004b1a:	062e      	lsls	r6, r5, #24
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	d501      	bpl.n	8004b24 <_printf_i+0x1c0>
 8004b20:	6019      	str	r1, [r3, #0]
 8004b22:	e002      	b.n	8004b2a <_printf_i+0x1c6>
 8004b24:	0668      	lsls	r0, r5, #25
 8004b26:	d5fb      	bpl.n	8004b20 <_printf_i+0x1bc>
 8004b28:	8019      	strh	r1, [r3, #0]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	4616      	mov	r6, r2
 8004b30:	e7bc      	b.n	8004aac <_printf_i+0x148>
 8004b32:	6833      	ldr	r3, [r6, #0]
 8004b34:	1d1a      	adds	r2, r3, #4
 8004b36:	6032      	str	r2, [r6, #0]
 8004b38:	681e      	ldr	r6, [r3, #0]
 8004b3a:	6862      	ldr	r2, [r4, #4]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f7fc fa86 	bl	8001050 <memchr>
 8004b44:	b108      	cbz	r0, 8004b4a <_printf_i+0x1e6>
 8004b46:	1b80      	subs	r0, r0, r6
 8004b48:	6060      	str	r0, [r4, #4]
 8004b4a:	6863      	ldr	r3, [r4, #4]
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b54:	e7aa      	b.n	8004aac <_printf_i+0x148>
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	4632      	mov	r2, r6
 8004b5a:	4649      	mov	r1, r9
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	47d0      	blx	sl
 8004b60:	3001      	adds	r0, #1
 8004b62:	d0ad      	beq.n	8004ac0 <_printf_i+0x15c>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	079b      	lsls	r3, r3, #30
 8004b68:	d413      	bmi.n	8004b92 <_printf_i+0x22e>
 8004b6a:	68e0      	ldr	r0, [r4, #12]
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	4298      	cmp	r0, r3
 8004b70:	bfb8      	it	lt
 8004b72:	4618      	movlt	r0, r3
 8004b74:	e7a6      	b.n	8004ac4 <_printf_i+0x160>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4632      	mov	r2, r6
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	4640      	mov	r0, r8
 8004b7e:	47d0      	blx	sl
 8004b80:	3001      	adds	r0, #1
 8004b82:	d09d      	beq.n	8004ac0 <_printf_i+0x15c>
 8004b84:	3501      	adds	r5, #1
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	9903      	ldr	r1, [sp, #12]
 8004b8a:	1a5b      	subs	r3, r3, r1
 8004b8c:	42ab      	cmp	r3, r5
 8004b8e:	dcf2      	bgt.n	8004b76 <_printf_i+0x212>
 8004b90:	e7eb      	b.n	8004b6a <_printf_i+0x206>
 8004b92:	2500      	movs	r5, #0
 8004b94:	f104 0619 	add.w	r6, r4, #25
 8004b98:	e7f5      	b.n	8004b86 <_printf_i+0x222>
 8004b9a:	bf00      	nop
 8004b9c:	08004eed 	.word	0x08004eed
 8004ba0:	08004efe 	.word	0x08004efe

08004ba4 <__sflush_r>:
 8004ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	0716      	lsls	r6, r2, #28
 8004bae:	4605      	mov	r5, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	d454      	bmi.n	8004c5e <__sflush_r+0xba>
 8004bb4:	684b      	ldr	r3, [r1, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dc02      	bgt.n	8004bc0 <__sflush_r+0x1c>
 8004bba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	dd48      	ble.n	8004c52 <__sflush_r+0xae>
 8004bc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bc2:	2e00      	cmp	r6, #0
 8004bc4:	d045      	beq.n	8004c52 <__sflush_r+0xae>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bcc:	682f      	ldr	r7, [r5, #0]
 8004bce:	6a21      	ldr	r1, [r4, #32]
 8004bd0:	602b      	str	r3, [r5, #0]
 8004bd2:	d030      	beq.n	8004c36 <__sflush_r+0x92>
 8004bd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	0759      	lsls	r1, r3, #29
 8004bda:	d505      	bpl.n	8004be8 <__sflush_r+0x44>
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004be2:	b10b      	cbz	r3, 8004be8 <__sflush_r+0x44>
 8004be4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004be6:	1ad2      	subs	r2, r2, r3
 8004be8:	2300      	movs	r3, #0
 8004bea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bec:	6a21      	ldr	r1, [r4, #32]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	47b0      	blx	r6
 8004bf2:	1c43      	adds	r3, r0, #1
 8004bf4:	89a3      	ldrh	r3, [r4, #12]
 8004bf6:	d106      	bne.n	8004c06 <__sflush_r+0x62>
 8004bf8:	6829      	ldr	r1, [r5, #0]
 8004bfa:	291d      	cmp	r1, #29
 8004bfc:	d82b      	bhi.n	8004c56 <__sflush_r+0xb2>
 8004bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca8 <__sflush_r+0x104>)
 8004c00:	410a      	asrs	r2, r1
 8004c02:	07d6      	lsls	r6, r2, #31
 8004c04:	d427      	bmi.n	8004c56 <__sflush_r+0xb2>
 8004c06:	2200      	movs	r2, #0
 8004c08:	6062      	str	r2, [r4, #4]
 8004c0a:	04d9      	lsls	r1, r3, #19
 8004c0c:	6922      	ldr	r2, [r4, #16]
 8004c0e:	6022      	str	r2, [r4, #0]
 8004c10:	d504      	bpl.n	8004c1c <__sflush_r+0x78>
 8004c12:	1c42      	adds	r2, r0, #1
 8004c14:	d101      	bne.n	8004c1a <__sflush_r+0x76>
 8004c16:	682b      	ldr	r3, [r5, #0]
 8004c18:	b903      	cbnz	r3, 8004c1c <__sflush_r+0x78>
 8004c1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c1e:	602f      	str	r7, [r5, #0]
 8004c20:	b1b9      	cbz	r1, 8004c52 <__sflush_r+0xae>
 8004c22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c26:	4299      	cmp	r1, r3
 8004c28:	d002      	beq.n	8004c30 <__sflush_r+0x8c>
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	f7ff fbf2 	bl	8004414 <_free_r>
 8004c30:	2300      	movs	r3, #0
 8004c32:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c34:	e00d      	b.n	8004c52 <__sflush_r+0xae>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b0      	blx	r6
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	1c50      	adds	r0, r2, #1
 8004c40:	d1c9      	bne.n	8004bd6 <__sflush_r+0x32>
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0c6      	beq.n	8004bd6 <__sflush_r+0x32>
 8004c48:	2b1d      	cmp	r3, #29
 8004c4a:	d001      	beq.n	8004c50 <__sflush_r+0xac>
 8004c4c:	2b16      	cmp	r3, #22
 8004c4e:	d11e      	bne.n	8004c8e <__sflush_r+0xea>
 8004c50:	602f      	str	r7, [r5, #0]
 8004c52:	2000      	movs	r0, #0
 8004c54:	e022      	b.n	8004c9c <__sflush_r+0xf8>
 8004c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	e01b      	b.n	8004c96 <__sflush_r+0xf2>
 8004c5e:	690f      	ldr	r7, [r1, #16]
 8004c60:	2f00      	cmp	r7, #0
 8004c62:	d0f6      	beq.n	8004c52 <__sflush_r+0xae>
 8004c64:	0793      	lsls	r3, r2, #30
 8004c66:	680e      	ldr	r6, [r1, #0]
 8004c68:	bf08      	it	eq
 8004c6a:	694b      	ldreq	r3, [r1, #20]
 8004c6c:	600f      	str	r7, [r1, #0]
 8004c6e:	bf18      	it	ne
 8004c70:	2300      	movne	r3, #0
 8004c72:	eba6 0807 	sub.w	r8, r6, r7
 8004c76:	608b      	str	r3, [r1, #8]
 8004c78:	f1b8 0f00 	cmp.w	r8, #0
 8004c7c:	dde9      	ble.n	8004c52 <__sflush_r+0xae>
 8004c7e:	6a21      	ldr	r1, [r4, #32]
 8004c80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c82:	4643      	mov	r3, r8
 8004c84:	463a      	mov	r2, r7
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b0      	blx	r6
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	dc08      	bgt.n	8004ca0 <__sflush_r+0xfc>
 8004c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca0:	4407      	add	r7, r0
 8004ca2:	eba8 0800 	sub.w	r8, r8, r0
 8004ca6:	e7e7      	b.n	8004c78 <__sflush_r+0xd4>
 8004ca8:	dfbffffe 	.word	0xdfbffffe

08004cac <_fflush_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	690b      	ldr	r3, [r1, #16]
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	b913      	cbnz	r3, 8004cbc <_fflush_r+0x10>
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	4628      	mov	r0, r5
 8004cba:	bd38      	pop	{r3, r4, r5, pc}
 8004cbc:	b118      	cbz	r0, 8004cc6 <_fflush_r+0x1a>
 8004cbe:	6a03      	ldr	r3, [r0, #32]
 8004cc0:	b90b      	cbnz	r3, 8004cc6 <_fflush_r+0x1a>
 8004cc2:	f7ff f9ad 	bl	8004020 <__sinit>
 8004cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f3      	beq.n	8004cb6 <_fflush_r+0xa>
 8004cce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cd0:	07d0      	lsls	r0, r2, #31
 8004cd2:	d404      	bmi.n	8004cde <_fflush_r+0x32>
 8004cd4:	0599      	lsls	r1, r3, #22
 8004cd6:	d402      	bmi.n	8004cde <_fflush_r+0x32>
 8004cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cda:	f7ff fb98 	bl	800440e <__retarget_lock_acquire_recursive>
 8004cde:	4628      	mov	r0, r5
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	f7ff ff5f 	bl	8004ba4 <__sflush_r>
 8004ce6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ce8:	07da      	lsls	r2, r3, #31
 8004cea:	4605      	mov	r5, r0
 8004cec:	d4e4      	bmi.n	8004cb8 <_fflush_r+0xc>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	059b      	lsls	r3, r3, #22
 8004cf2:	d4e1      	bmi.n	8004cb8 <_fflush_r+0xc>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cf6:	f7ff fb8b 	bl	8004410 <__retarget_lock_release_recursive>
 8004cfa:	e7dd      	b.n	8004cb8 <_fflush_r+0xc>

08004cfc <__swhatbuf_r>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	460c      	mov	r4, r1
 8004d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d04:	2900      	cmp	r1, #0
 8004d06:	b096      	sub	sp, #88	@ 0x58
 8004d08:	4615      	mov	r5, r2
 8004d0a:	461e      	mov	r6, r3
 8004d0c:	da0d      	bge.n	8004d2a <__swhatbuf_r+0x2e>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d14:	f04f 0100 	mov.w	r1, #0
 8004d18:	bf14      	ite	ne
 8004d1a:	2340      	movne	r3, #64	@ 0x40
 8004d1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d20:	2000      	movs	r0, #0
 8004d22:	6031      	str	r1, [r6, #0]
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	b016      	add	sp, #88	@ 0x58
 8004d28:	bd70      	pop	{r4, r5, r6, pc}
 8004d2a:	466a      	mov	r2, sp
 8004d2c:	f000 f848 	bl	8004dc0 <_fstat_r>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	dbec      	blt.n	8004d0e <__swhatbuf_r+0x12>
 8004d34:	9901      	ldr	r1, [sp, #4]
 8004d36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d3e:	4259      	negs	r1, r3
 8004d40:	4159      	adcs	r1, r3
 8004d42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d46:	e7eb      	b.n	8004d20 <__swhatbuf_r+0x24>

08004d48 <__smakebuf_r>:
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d4c:	079d      	lsls	r5, r3, #30
 8004d4e:	4606      	mov	r6, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	d507      	bpl.n	8004d64 <__smakebuf_r+0x1c>
 8004d54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	6123      	str	r3, [r4, #16]
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	6163      	str	r3, [r4, #20]
 8004d60:	b003      	add	sp, #12
 8004d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d64:	ab01      	add	r3, sp, #4
 8004d66:	466a      	mov	r2, sp
 8004d68:	f7ff ffc8 	bl	8004cfc <__swhatbuf_r>
 8004d6c:	9f00      	ldr	r7, [sp, #0]
 8004d6e:	4605      	mov	r5, r0
 8004d70:	4639      	mov	r1, r7
 8004d72:	4630      	mov	r0, r6
 8004d74:	f7ff fbba 	bl	80044ec <_malloc_r>
 8004d78:	b948      	cbnz	r0, 8004d8e <__smakebuf_r+0x46>
 8004d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d7e:	059a      	lsls	r2, r3, #22
 8004d80:	d4ee      	bmi.n	8004d60 <__smakebuf_r+0x18>
 8004d82:	f023 0303 	bic.w	r3, r3, #3
 8004d86:	f043 0302 	orr.w	r3, r3, #2
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	e7e2      	b.n	8004d54 <__smakebuf_r+0xc>
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	6020      	str	r0, [r4, #0]
 8004d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d96:	81a3      	strh	r3, [r4, #12]
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d9e:	b15b      	cbz	r3, 8004db8 <__smakebuf_r+0x70>
 8004da0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004da4:	4630      	mov	r0, r6
 8004da6:	f000 f81d 	bl	8004de4 <_isatty_r>
 8004daa:	b128      	cbz	r0, 8004db8 <__smakebuf_r+0x70>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	431d      	orrs	r5, r3
 8004dbc:	81a5      	strh	r5, [r4, #12]
 8004dbe:	e7cf      	b.n	8004d60 <__smakebuf_r+0x18>

08004dc0 <_fstat_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	4d07      	ldr	r5, [pc, #28]	@ (8004de0 <_fstat_r+0x20>)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	4608      	mov	r0, r1
 8004dca:	4611      	mov	r1, r2
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	f7fc fd89 	bl	80018e4 <_fstat>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d102      	bne.n	8004ddc <_fstat_r+0x1c>
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	b103      	cbz	r3, 8004ddc <_fstat_r+0x1c>
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
 8004dde:	bf00      	nop
 8004de0:	200003d0 	.word	0x200003d0

08004de4 <_isatty_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d06      	ldr	r5, [pc, #24]	@ (8004e00 <_isatty_r+0x1c>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fc fd88 	bl	8001904 <_isatty>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_isatty_r+0x1a>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_isatty_r+0x1a>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	200003d0 	.word	0x200003d0

08004e04 <_sbrk_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d06      	ldr	r5, [pc, #24]	@ (8004e20 <_sbrk_r+0x1c>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	602b      	str	r3, [r5, #0]
 8004e10:	f7fc fd90 	bl	8001934 <_sbrk>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	d102      	bne.n	8004e1e <_sbrk_r+0x1a>
 8004e18:	682b      	ldr	r3, [r5, #0]
 8004e1a:	b103      	cbz	r3, 8004e1e <_sbrk_r+0x1a>
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	200003d0 	.word	0x200003d0

08004e24 <_init>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr

08004e30 <_fini>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr
